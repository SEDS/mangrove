import os


def test(file_manager, tool, line_numbers, description, indices):
    """Tests the debugging algorith. It returns False if it FAILS.

    Arguments:
    file_manager -- file manager object with the info of the file to process
    tool -- SCA tool object 
    line_numbers -- list of the line numbers that are failing
    description -- warning generated by the SCA tool
    indices -- indices of the lines of the file to be reduced
    """
    if not indices:
        return True

    compiler = tool.get_compiler()
    original_fname = file_manager.get_source_path()
    result = compiler.compile(original_fname, \
                              file_manager.get_build_object_path(), 
                              file_manager.get_trial_source_path())

    if result == 0:
        failed = False
        tool.handle_compile_file(file_manager.get_trial_source_path(), \
                                 compiler.get_command(original_fname))
        parsed_output = tool.get_tool_output(filtered=False)
        for (file_name, lines, _, desc) in parsed_output:
            fname1 = os.path.basename(file_name)
            fname2 = os.path.basename(file_manager.get_original_source_path())
            equal_description = True
            if description:
                equal_description = description == desc
            if fname1 == fname2 and \
                    check_indices(indices, line_numbers, lines) and \
                    equal_description:
                failed = True
                break

        return not failed
    else:
        return True

def check_indices(indices, orig_line_numbers, lines):
    """Checks whether the indices generated the same warning.

    Arguments:
    indices -- indices of the lines of the file to be reduced
    orig_line_numbers -- line numbers originally generating the warning
    lines -- line numbers where a warning was generated for the trial file
    """
    # TODO: findbugs sometimes does not include one
    # line that should be included
    tmp = list(map(lambda x: indices[x - 1], lines))
    res = tmp == orig_line_numbers

    #
    # This horrible stuff is just in case we have something like [4,5,6,7]
    # and [5,6,7]. This is because some tools may do that.
    #
    if not res and len(tmp) > 1 and len(orig_line_numbers) > 1:
        chunk_ln = orig_line_numbers[:]
        if tmp[1] == chunk_ln[0]:
            tmp = tmp[1:]
        elif tmp[0] == chunk_ln[1]:
            chunk_ln = chunk_ln[1:]
        if len(tmp) > 1 and len(chunk_ln) > 1:
            if tmp[-1] == chunk_ln[-2]:
                chunk_ln = chunk_ln[:-1]
            elif tmp[-2] == chunk_ln[-1]:
                tmp = tmp[:-1]
        res = tmp == chunk_ln
    return res
