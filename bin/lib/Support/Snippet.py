import logging
import time
import csv
import sys
import os

from . import FileManager
from .IndicesManager import *
from .TopFormFlat import topformflat
from .CommentsRemover import remove_comments
from .Compiler import Compiler
from . import Utilities

from .ND import *
from .DD import *


def create_snippet(configuration, directory, filename, \
                   line_numbers, description, tool):
    """Generates a code snippet generating the same SCA tool warning as was
    produced in the original source code. Returns the snippet filename

    Arguments:
    configuration -- object storing the configuration file variable values
    directory -- folder where the original source code is
    filename -- original source code file name
    line_numbers -- list of the line numbers that are failing
    description -- warning generated by the SCA tool
    tool -- SCA tool object 
    """

    # TODO: add specific subdir to results.directory
    keep_copy = configuration.get_value('minimize.keep.processed.files')
    dirs = FileManager.Dirs(directory, 
                            configuration.get_value('build.directory'), \
                            configuration.get_value('results.directory'))
    file_manager = FileManager.CPPFileManager(dirs, filename, 'c', keep_copy)
    prepend = str(line_numbers[0]) + '_'

    # First we remove comments
    if configuration.get_value('minimize.remove.comments'):
        # disregard_comments(file_manager, indices, description)
        indices = disregard_comments(file_manager)
        line_numbers = convert_ln_to_no_comments(line_numbers, indices)
        file_manager.set_lines_to_trial()

    indices = range(1, file_manager.get_original_source_num_lines() + 1)
    indices = list(indices)

    algorithm = configuration.get_value('minimize.algorithm')
    if algorithm == 'ND':
        minimizer = ND()
        logging.debug('Minimizing by means of Naive Debugging')
    elif algorithm == 'DD':
        minimizer = DD()
        logging.error('Minimizing by means of Delta Debugging. NOT IMPLEMENTED')
        return
    else:
        logging.error('Unkown algorithm to perform minimization [%s]' \
                       % algorithm)
        return

    # Then, we check whether we want to flatenize
    if configuration.get_value('minimize.flatenize'):
        (indices, line_numbers) = code_reduction_topformflat(minimizer, \
                        file_manager, indices, tool, line_numbers, description)
    
    code_reduction(minimizer, file_manager, indices, tool, \
                   line_numbers, description)
    result_fname = file_manager.move_trial_to_result(prepend=prepend)

    return result_fname



def disregard_comments(file_manager):
    """If we can remove the comments from the file, it works faster.

    Arguments:
    file_manager -- file manager object with the info of the file to process
    """
    indices = remove_comments(file_manager.get_original_source_path(), \
                              file_manager.get_trial_source_path())
    file_manager.backup_trial_file()
    file_manager.write_subset_file(indices)
    return indices


def code_reduction(minimizer, file_manager, indices, \
                   tool, line_numbers, description):
    """Performs the code reduction by the debugging algorith. 

    This means that it reduces the code and tests if the result works or not.

    Arguments:
    minimizer -- algorithm to perform the debugging steps
    file_manager -- file manager object with the info of the file to process
    indices -- indices of the lines of the file to be reduced
    tool -- SCA tool object 
    line_numbers -- list of the line numbers that are failing
    description -- warning generated by the SCA tool
    """
    #
    # TODO: test_result should always be False here... 
    # Let's keep it just to make sure
    #
    test_result = test(file_manager, tool, line_numbers, description, indices)
    if not test_result:
        minimization = minimizer.minimize(indices)
        for indices in minimization:
            file_manager.backup_trial_file()
            file_manager.write_subset_file(indices)
            test_result = test(file_manager, tool, line_numbers, \
                               description, indices)
            minimizer.set_test_result(test_result)
    else:
        logging.error("ERROR: could not generate error when minimizing file [%s]" \
                      % file_manager.get_trial_source_path())
        logging.error("ERROR (cont): original warning was: [%s]" % description)
        sys.exit(1)


def test(file_manager, tool, line_numbers, description, indices):
    """Tests the debugging algorith. It returns False if it FAILS.

    Arguments:
    file_manager -- file manager object with the info of the file to process
    tool -- SCA tool object 
    line_numbers -- list of the line numbers that are failing
    description -- warning generated by the SCA tool
    indices -- indices of the lines of the file to be reduced
    """
    if not indices:
        return True

    compiler = tool.get_compiler()
    result = compiler.compile(file_manager.get_source_basename(), \
                              file_manager.get_build_object_path(), 
                              file_manager.get_trial_source_path())

    if result == 0:
        failed = False
        tool.handle_compile_file(file_manager.get_trial_source_path())
        parsed_output = tool.get_tool_output(filtered=False)
        for (file_name, lines, _, desc) in parsed_output:
            fname1 = os.path.basename(file_name)
            fname2 = os.path.basename(file_manager.get_original_source_path())
            if fname1 == fname2 and \
                    check_indices(indices, line_numbers, lines) and \
                    description == desc:
                failed = True
                break

        return not failed
    else:
        return True


def check_indices(indices, orig_line_numbers, lines):
    """Checks whether the indices generated the same warning.

    Arguments:
    indices -- indices of the lines of the file to be reduced
    orig_line_numbers -- line numbers originally generating the warning
    lines -- line numbers where a warning was generated for the trial file
    """
    # TODO: findbugs sometimes does not include one
    # line that should be included
    tmp = list(map(lambda x: indices[x - 1], lines))
    res = tmp == orig_line_numbers

    #
    # This horrible stuff is just in case we have something like [4,5,6,7]
    # and [5,6,7]. This is because some tools may do that.
    #
    if not res and len(tmp) > 1 and len(orig_line_numbers) > 1:
        chunk_ln = orig_line_numbers[:]
        if tmp[1] == chunk_ln[0]:
            tmp = tmp[1:]
        elif tmp[0] == chunk_ln[1]:
            chunk_ln = chunk_ln[1:]
        if len(tmp) > 1 and len(chunk_ln) > 1:
            if tmp[-1] == chunk_ln[-2]:
                chunk_ln = chunk_ln[:-1]
            elif tmp[-2] == chunk_ln[-1]:
                tmp = tmp[:-1]
        res = tmp == chunk_ln
    return res


def code_reduction_topformflat(minimizer, file_manager, indices, \
                               tool, line_numbers, description):
    """Performs the code reduction by the debugging algorith using TopFormFlat.

    This means that it reduces the code and tests if the result works or not.

    Arguments:
    minimizer -- algorithm to perform the debugging steps
    file_manager -- file manager object with the info of the file to process
    indices -- indices of the lines of the file to be reduced
    tool -- SCA tool object 
    line_numbers -- list of the line numbers that are failing
    description -- warning generated by the SCA tool
    """
    working_file = None
    original_indices = None
    level = 0
    last_file = file_manager.force_backup_trial_file()
    changed_lines = topformflat(level, last_file, \
                                file_manager.get_trial_source_path())
    while changed_lines:
        new_ln_warnings = convert_ln_to_topformflat(line_numbers, changed_lines)
        min_indices = range(1, file_manager.get_trial_source_num_lines() + 1)
        min_indices = list(min_indices)
        #
        # TODO: test_result should always be False here... 
        # Let's keep it just to make sure
        #
        test_result = test(file_manager, tool, new_ln_warnings, \
                           description, min_indices)
        if not test_result:
            minimization = minimizer.minimize(min_indices)
            for min_indices in minimization:
                original_indices = convert_ln_to_original(min_indices, \
                                                          changed_lines)
                file_manager.backup_trial_file()
                file_manager.write_subset_file(original_indices)
                working_file = file_manager.get_next_backup_filename()
                test_result = test(file_manager, tool, line_numbers, \
                                   description, original_indices)
                minimizer.set_test_result(test_result)
        
        file_manager.force_backup_trial_file()
        level += 1
        changed_lines = topformflat(level, last_file, \
                                    file_manager.get_trial_source_path())

    if working_file:
        file_manager.move_to_trial_file(working_file)
        return (original_indices, line_numbers)
    else:
        file_manager.move_to_trial_file(last_file)
        return (indices, line_numbers)


