import logging
import time
import csv
import sys
import os

from . import FileManager, Utilities
from .IndicesManager import *
from .CommentsRemover import remove_comments

from ..Reduction import IRD, DD
from ..Reduction.TopFormFlat import topformflat

from ..Validation.Validation import test


class ProcessingError(Exception):
    """Exception raised for errors while creating the snippets.

    Arguments:
    msg  -- explanation of the error
    """

    def __init__(self, msg):
        self.msg = msg


def create_snippet(configuration, directory, filename, \
                   line_numbers, description, tool):
    """Generates a code snippet generating the same SCA tool warning as was
    produced in the original source code. Returns the snippet filename

    Arguments:
    configuration -- object storing the configuration file variable values
    directory -- folder where the original source code is
    filename -- original source code file name
    line_numbers -- list of the line numbers that are failing
    description -- warning generated by the SCA tool
    tool -- SCA tool object 
    """

    # TODO: add specific subdir to results.directory
    keep_copy = configuration.get_value('minimize.keep.processed.files')
    dirs = FileManager.Dirs(directory, 
                            configuration.get_value('build.directory'), \
                            configuration.get_value('results.directory'))
    file_manager = FileManager.CPPFileManager(dirs, filename, 'c', keep_copy)
    prepend = str(line_numbers[0]) + '_'

    # First we remove comments
    # if configuration.get_value('minimize.remove.comments'):
    if True:
        # disregard_comments(file_manager, indices, description)
        indices = disregard_comments(file_manager)
        line_numbers = convert_ln_to_no_comments(line_numbers, indices)
        file_manager.set_lines_to_trial()

    indices = range(1, file_manager.get_original_source_num_lines() + 1)
    indices = list(indices)

    algorithm = configuration.get_value('minimize.algorithm')
    if algorithm == 'IRD':
        minimizer = IRD.IRD()
        logging.debug('Minimizing by means of Naive Debugging')
    elif algorithm == 'DD':
        minimizer = DD.DD()
        logging.error('Minimizing by means of Delta Debugging.')
    else:
        logging.error('Unkown algorithm to perform minimization [%s]' \
                       % algorithm)
        return

    # Then, we check whether we want to flatenize
    if configuration.get_value('minimize.flatenize'):
        (indices, line_numbers) = code_reduction_topformflat(minimizer, \
                        file_manager, indices, tool, line_numbers, description)

    code_reduction(minimizer, file_manager, indices, tool, \
                   line_numbers, description)
    result_fname = file_manager.move_trial_to_result(prepend=prepend)

    return result_fname



def disregard_comments(file_manager):
    """If we can remove the comments from the file, it works faster.

    Arguments:
    file_manager -- file manager object with the info of the file to process
    """
    indices = remove_comments(file_manager.get_original_source_path(), \
                              file_manager.get_trial_source_path())
    # file_manager.backup_trial_file()
    # file_manager.write_subset_file(indices)
    return indices


def code_reduction(minimizer, file_manager, indices, \
                   tool, line_numbers, description):
    """Performs the code reduction by the debugging algorith. 

    This means that it reduces the code and tests if the result works or not.

    Arguments:
    minimizer -- algorithm to perform the debugging steps
    file_manager -- file manager object with the info of the file to process
    indices -- indices of the lines of the file to be reduced
    tool -- SCA tool object 
    line_numbers -- list of the line numbers that are failing
    description -- warning generated by the SCA tool
    """
    logging.debug("Starting to reduce the code")
    #
    # TODO: test_result should always be False here... 
    # Let's keep it just to make sure
    #
    test_result = test(file_manager, tool, line_numbers, description, indices)
    if not test_result:
        minimization = minimizer.minimize(indices)
        for indices in minimization:
            if not Utilities.is_subset(line_numbers, indices):
                minimizer.set_test_result(minimizer.PASS)
                continue

            file_manager.backup_trial_file()
            file_manager.write_subset_file(indices)
            test_result = test(file_manager, tool, line_numbers, \
                               description, indices)
            test_result = minimizer.PASS if test_result else minimizer.FAIL
            minimizer.set_test_result(test_result)

    else:
        logging.error("ERROR: could not generate error when minimizing file [%s]" \
                      % file_manager.get_trial_source_path())
        logging.error("ERROR (cont): original warning was: [%s]" % description)
        raise ProcessingError('ERROR: Unable to regenate the warning')
        # sys.exit(1)


def code_reduction_topformflat(minimizer, file_manager, indices, \
                               tool, line_numbers, description):
    """Performs the code reduction by the debugging algorith using TopFormFlat.

    This means that it reduces the code and tests if the result works or not.

    Arguments:
    minimizer -- algorithm to perform the debugging steps
    file_manager -- file manager object with the info of the file to process
    indices -- indices of the lines of the file to be reduced
    tool -- SCA tool object 
    line_numbers -- list of the line numbers that are failing
    description -- warning generated by the SCA tool
    """
    working_file = None
    original_indices = None
    level = 0
    logging.debug("Starting to minimize by TopFormFlat")

    current_lines = list(range(1,file_manager.get_trial_source_num_lines() + 1))
    # new_ln_warnings = line_numbers
    first_file = file_manager.force_backup_trial_file()
    changed_lines = topformflat(level, first_file, \
                                file_manager.get_trial_source_path())
    while changed_lines:
        logging.debug("Reducing by TopFormFlat, [%s] level" % level)
        # new_ln_warnings = convert_ln_to_topformflat(new_ln_warnings, changed_lines, current_lines)
        min_indices = range(1, file_manager.get_trial_source_num_lines() + 1)
        min_indices = list(min_indices)
        #
        # TODO: test_result should always be False here... 
        # Let's keep it just to make sure
        #
        if True:
            original_indices = convert_ln_to_original(min_indices, changed_lines, \
                                                      current_lines)
            file_manager.backup_trial_file()
            file_manager.write_subset_file(original_indices)
            test_result = test(file_manager, tool, line_numbers, \
                                       description, original_indices)
            if test_result:
                logging.error("ERROR: could not generate error when topformflating file [%s]" \
                      % file_manager.get_trial_source_path())
                logging.error("ERROR (cont): original warning was: [%s]" % description)
                raise ProcessingError('ERROR: Unable to regenate the warning')

        minimization = minimizer.minimize(min_indices)
        for min_indices in minimization:
            original_indices = convert_ln_to_original(min_indices, \
                                                      changed_lines, \
                                                      current_lines)
            if not Utilities.is_subset(line_numbers, original_indices):
                minimizer.set_test_result(minimizer.PASS)
                continue

            file_manager.backup_trial_file()
            file_manager.write_subset_file(original_indices)
            working_file = file_manager.get_next_backup_filename()
            test_result = test(file_manager, tool, line_numbers, \
                               description, original_indices)
            test_result = minimizer.PASS if test_result else minimizer.FAIL
            minimizer.set_test_result(test_result)

        current_lines = original_indices
        last_file = file_manager.force_backup_trial_file()
        level += 1
        changed_lines = topformflat(level, last_file, \
                                    file_manager.get_trial_source_path())

    if working_file:
        file_manager.move_to_trial_file(working_file)
        return (original_indices, line_numbers)
    else:
        file_manager.move_to_trial_file(first_file)
        return (indices, line_numbers)



