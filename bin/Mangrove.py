#!/usr/bin/python

import sys
import os
import argparse
import logging
import re

from lib.Support import XMLManager, Snippet, Utilities
from lib.Support.ConfigParser import ConfigParser

from lib.Validation import Compiler


CONFIG_FILENAME = 'Mangrove.conf'


def parse_arguments ():
    logging.debug ('Initializing parser')
    parser = argparse.ArgumentParser ()
    parser.add_argument ('--debug', action='store_true', \
                         help='Enable debugging output')

    # Two possibilities: the data is given in a file:
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--fps-file', type=str, \
                        help='xml file listing the FPs of the SCA tool, as the one generated by SCATE')

    # or the data is passed in three options:
    group.add_argument('--fname', type=str, \
                        help='file to minimize, containing a FP')
    parser.add_argument ('--line', \
                          help='line where the FP occurs')
    parser.add_argument ('--info', help='FP warning generated (string message)')
    tool_parser = parser.add_subparsers (help='Tool specific commands')

    # Let the Tools modify the parser
    for tool in Utilities.get_tools ():
      logging.debug ('Expanding build command-line parsing using [%s]' % tool)
      tool.init_parser (tool_parser)

    args = parser.parse_args (sys.argv[1:])

    # Check for mutually exclusive options
    if args.fps_file and args.line:
        parser.error('argument --line: not allowed with argument --fps-file')
    elif args.fps_file and args.info:
        parser.error('argument --info: not allowed with argument --fps-file')
    elif args.fname and not (args.line and args.info and args.tool):
        parser.error('argument --fname expects --line and --info be specified')

    tool = args.tool ()
    # Pass the args to the importsuite
    tool.init (args)

    return (args, tool)


def process_bug (configuration, tool, args, criteria, datapoint):
    """Processes a single bug (which is a warning generated
    by an SCA tool)
    
    Arguments:
    configuration -- configuration file already parsed
    tool -- SCA tool that generated the bug
    args -- arguments for the tool
    bug -- bug object containing the information of the warning message
    suite -- name of the suite if it exists
    wakness -- name of the weakness if it exists
    """
    directory = datapoint.getDirectory()
    filename = datapoint.getFilename()
    linenumber = datapoint.getLine()
    info = datapoint.getInfo()

    logging.info ('Running mangrove in directory [%s] and file [%s]. The warning to reproduce is in line [%s]' \
                  % (directory, filename, linenumber))

    try:
        Snippet.create_snippet (configuration, directory, filename, \
                               [int(linenumber)], info, tool)
    except Snippet.ProcessingError as e:
        logging.error(e.msg)

    # TODO: add extra actions here, like anonymization

def main ():
    """Main method to parse the arguments
    and call the process_bug function to perform the
    operations defined in Mangrove. So far, we are
    just Minimizing.
    """
    logging.basicConfig (level=logging.INFO, \
                         format='[%(asctime)s] - %(message)s')
    (args, tool) = parse_arguments ()

    # Check for the debugging flag
    if args.debug:
        logging.root.setLevel (logging.DEBUG)
        logging.debug ('DEBUG logging enabled')

    logging.info ('Starting the minimizer')

    # Get the files to process
    if args.fps_file:
        bugs_data = XMLManager.read_xml(args.fps_file)
    else:
        directory = os.path.dirname(args.fname)
        filename = os.path.basename(args.fname)
        criteria = XMLManager.Criteria("3", "1", "1")
        datapoint = XMLManager.Datapoint(directory, filename, args.line, \
                                         "good", args.info)
        criteria.add(datapoint)
        bugs_data = XMLManager.ResultSet()
        bugs_data.add(criteria)

    # Parse configuration file
    config_fname = os.path.dirname(os.path.realpath(__file__))
    config_fname = os.path.join(config_fname, CONFIG_FILENAME)
    configuration = ConfigParser(config_fname)

    # Process the files
    processed = {}
    for criteria in bugs_data.criterias():
        for datapoint in criteria.datapoints():
            if datapoint.getLine() == 0:
                continue
            function = datapoint.getFunction()
            if not re.match(r'.*good.*', function):
                continue # it is not a false positive
            info = datapoint.getInfo()
            key = (datapoint.getFilename(), datapoint.getLine(), info)
            if key in processed:
                continue
            processed[key] = 1
            process_bug (configuration, tool, args, criteria, datapoint)

    logging.info ("DONE.")
    sys.exit (0)


if __name__ == "__main__":
    main ()

