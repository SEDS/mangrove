public class CWE89_SQL_Injection__connect_tcp_execute_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_execute_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_execute_10 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticTrue ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__connect_tcp_executeBatch_01 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeBatch_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( true ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeBatch_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_11 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__connect_tcp_executeUpdate_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeUpdate_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__connect_tcp_prepareStatement_14 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__console_readLine_execute_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_11 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_42 extends AbstractTestCase { private String badSource ( ) { String data ; datpublic class CWE89_SQL_Injection__console_readLine_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__console_readLine_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__console_readLine_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__console_readLine_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__console_readLine_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__database_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__database_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__database_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__database_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__database_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__Environment_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Environment_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__File_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__File_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__File_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__File_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__File_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeBatch_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeQuery_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeBatch_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeQuery_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeUpdate_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_execute_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_execute_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_execute_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_executeBatch_14 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticFive = = 5 ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeBatch_31 extends AbstractTestCase { public void warningMethod ( ) { String dataCopy ; { String taintSrc ; taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } dataCopy = taintSrc ; } { String taintSrc = dataCopy ; if ( taintSrc ! = null ) { String T3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_executeQuery_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeQuery_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeQuery_10 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticTrue ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_executeUpdate_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( true ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeUpdate_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeUpdate_17 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U4 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_01 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( true ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_04 extends AbstractTestCase { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FALSE ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_17 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { Connection U3 = null ; PreparedStatement null4 = null ; { U3 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_executeBatch_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive = = 5 ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } private void goodG2B1 ( ) { String T1 ; if ( privateFive ! = 5 ) { T1 = null ; } else { T1 = " STRING " ; } if ( privateFive = = 5 ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { U5 . injectableMethod ( " STRING " + T2 [ i ] + " STRING " ) ; } int resultsArray [ ] = U5 . executeBatch ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + length + " STRING " ) ; } } } } private void goodG2B2 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " STRING " ; } else { T1 = null ; } if ( privateFive = = 5 ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { U5 . injectableMethod ( " STRING " + T2 [ i ] + " STRING " ) ; } int resultsArray [ ] = U5 . executeBatch ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + length + " STRING " ) ; } } } } private void goodB2G1 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; for ( int i = 0 ; i < length ; i + + ) { U5 . setString ( 1 , T2 [ i ] ) ; U5 . injectableMethod ( paramTaint ) ; } int resultsArray [ ] = U5 . executeBatch ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + length + " STRING " ) ; } } } } private void goodB2G2 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive = = 5 ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; for ( int i = 0 ; i < length ; i + + ) { U5 . setString ( 1 , T2 [ i ] ) ; U5 . injectableMethod ( paramTaint ) ; } int resultsArray [ ] = U5 . executeBatch ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + length + " STRING " ) ; } } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeBatch_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String T1 ; if ( privateReturnsTrue ( ) ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateReturnsTrue ( ) ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeBatch_10 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( staticTrue ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( staticTrue ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_executeQuery_03 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( 5 = = 5 ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( 5 = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeQuery_15 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; switch ( 6 ) { case 6 : T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } break ; default : T1 = null ; break ; } switch ( 7 ) { case 7 : Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeQuery_17 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; Statement U4 = null ; ResultSet null5 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_executeUpdate_04 extends AbstractTestCase { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_FALSE ) { T1 = null ; } else { T1 = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + T1 + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T1 = " STRING " ; } else { T1 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + T1 + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , T1 ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , T1 ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_execute_12 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( IO . staticReturnsTrueOrFalse ( ) ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String T1 ; if ( privateFive ! = 5 ) { T1 = null ; } else { T1 = " STRING " ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + T1 + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + T1 + " STRING " ) ; } else { IO . writeLine ( " STRING " + T1 ) ; } } } } private void goodG2B2 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " STRING " ; } else { T1 = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + T1 + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + T1 + " STRING " ) ; } else { IO . writeLine ( " STRING " + T1 ) ; } } } } private void goodB2G1 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , T1 ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + T1 + " STRING " ) ; } else { IO . writeLine ( " STRING " + T1 ) ; } } } } private void goodB2G2 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , T1 ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + T1 + " STRING " ) ; } else { IO . writeLine ( " STRING " + T1 ) ; } } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String T1 ; if ( privateReturnsTrue ( ) ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateReturnsTrue ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_11 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( IO . staticReturnsTrue ( ) ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_12 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( IO . staticReturnsTrueOrFalse ( ) ) { T1 = " " ; { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( " STRING " ) ; } } return data ; } public void warningMethod ( ) { String T1 = badSource ( ) ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Property_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Property_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__Property_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Property_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Property_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__URLConnection_execute_01 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__URLConnection_execute_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( true ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_execute_15 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; switch ( 6 ) { case 6 : taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; default : taintSrc = null ; break ; } switch ( 7 ) { case 7 : Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_execute_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__URLConnection_executeBatch_14 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticFive = = 5 ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeBatch_31 extends AbstractTestCase { public void warningMethod ( ) { String dataCopy ; { String taintSrc ; taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } dataCopy = taintSrc ; } { String taintSrc = dataCopy ; if ( taintSrc ! = null ) { String T3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__URLConnection_executeQuery_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeQuery_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__URLConnection_executeUpdate_06 extends AbstractTestCase { private static final int PRIVATE_STATIC_FINAL_FIVE = 5 ; public void warningMethod ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeUpdate_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_11 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } falsepositive
