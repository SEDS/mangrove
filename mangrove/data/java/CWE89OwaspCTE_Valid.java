public class BenchmarkTest00152 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest07177 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07170 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03388 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest07131 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07166 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07135 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04693 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03387 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05899 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00112 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05913 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02804 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01480 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02162 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04707 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05873 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06550 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest20953 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } falsepositive
public class BenchmarkTest07152 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02843 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04080 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04664 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest10266 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest04709 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest15361 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest08397 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest02146 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest15309 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest04687 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest19737 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest01500 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz33238 = new StringBuilder ( taintSrc ) ; T4 = sbxyz33238 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00931 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest16549 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14096 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } falsepositive
public class BenchmarkTest10236 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz89224 = new StringBuilder ( param ) ; String bar = sbxyz89224 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest04710 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz59501 = new StringBuilder ( T3 ) ; T5 = sbxyz59501 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest14039 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest12148 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest00926 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest09041 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest15907 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest00881 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest09038 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz72563 = new StringBuilder ( param ) ; String bar = sbxyz72563 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest08985 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz81815 = new StringBuilder ( param ) ; String bar = sbxyz81815 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest07810 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest04109 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest09643 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz10266 = new StringBuilder ( param ) ; String bar = sbxyz10266 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest02767 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest19097 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map50746 = new HashMap < String , Object > ( ) ; map50746 . put ( " STRING " , " STRING " ) ; map50746 . put ( " STRING " , param . toString ( ) ) ; map50746 . put ( " STRING " , " STRING " ) ; bar = ( String ) map50746 . get ( " STRING " ) ; bar = ( String ) map50746 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest16570 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest11552 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07768 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest07726 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09683 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest00906 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest12845 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map24540 = new HashMap < String , Object > ( ) ; map24540 . put ( " STRING " , " STRING " ) ; map24540 . put ( " STRING " , param . toString ( ) ) ; map24540 . put ( " STRING " , " STRING " ) ; bar = ( String ) map24540 . get ( " STRING " ) ; bar = ( String ) map24540 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest16577 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map38644 = new HashMap < String , Object > ( ) ; map38644 . put ( " STRING " , " STRING " ) ; map38644 . put ( " STRING " , param . toString ( ) ) ; map38644 . put ( " STRING " , " STRING " ) ; bar = ( String ) map38644 . get ( " STRING " ) ; bar = ( String ) map38644 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest09069 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10889 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09661 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map47295 = new HashMap < String , Object > ( ) ; map47295 . put ( " STRING " , " STRING " ) ; map47295 . put ( " STRING " , param . toString ( ) ) ; map47295 . put ( " STRING " , " STRING " ) ; bar = ( String ) map47295 . get ( " STRING " ) ; bar = ( String ) map47295 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest14673 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map51793 = new HashMap < String , Object > ( ) ; map51793 . put ( " STRING " , " STRING " ) ; map51793 . put ( " STRING " , param . toString ( ) ) ; map51793 . put ( " STRING " , " STRING " ) ; bar = ( String ) map51793 . get ( " STRING " ) ; bar = ( String ) map51793 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest03381 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a26420 = param ; StringBuilder b26420 = new StringBuilder ( a26420 ) ; b26420 . append ( " STRING " ) ; b26420 . replace ( b26420 . length ( ) - " STRING " . length ( ) , b26420 . length ( ) , " STRING " ) ; HashMap < String , Object > map26420 = new HashMap < String , Object > ( ) ; map26420 . put ( " STRING " , b26420 . toString ( ) ) ; String c26420 = ( String ) map26420 . get ( " STRING " ) ; String d26420 = c26420 . substring ( 0 , c26420 . length ( ) - 1 ) ; String e26420 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d26420 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g26420 = " STRING " ; String taintSrc = thing . doSomething ( g26420 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest01498 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a62490 = param ; StringBuilder b62490 = new StringBuilder ( a62490 ) ; b62490 . append ( " STRING " ) ; b62490 . replace ( b62490 . length ( ) - " STRING " . length ( ) , b62490 . length ( ) , " STRING " ) ; HashMap < String , Object > map62490 = new HashMap < String , Object > ( ) ; map62490 . put ( " STRING " , b62490 . toString ( ) ) ; String c62490 = ( String ) map62490 . get ( " STRING " ) ; String d62490 = c62490 . substring ( 0 , c62490 . length ( ) - 1 ) ; String e62490 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d62490 . getBytes ( ) ) ) ) ; String f62490 = e62490 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f62490 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02204 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a53941 = param ; StringBuilder b53941 = new StringBuilder ( a53941 ) ; b53941 . append ( " STRING " ) ; b53941 . replace ( b53941 . length ( ) - " STRING " . length ( ) , b53941 . length ( ) , " STRING " ) ; HashMap < String , Object > map53941 = new HashMap < String , Object > ( ) ; map53941 . put ( " STRING " , b53941 . toString ( ) ) ; String c53941 = ( String ) map53941 . get ( " STRING " ) ; String d53941 = c53941 . substring ( 0 , c53941 . length ( ) - 1 ) ; String e53941 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d53941 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g53941 = " STRING " ; String taintSrc = thing . doSomething ( g53941 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest08370 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a55316 = param ; StringBuilder b55316 = new StringBuilder ( a55316 ) ; b55316 . append ( " STRING " ) ; b55316 . replace ( b55316 . length ( ) - " STRING " . length ( ) , b55316 . length ( ) , " STRING " ) ; HashMap < String , Object > map55316 = new HashMap < String , Object > ( ) ; map55316 . put ( " STRING " , b55316 . toString ( ) ) ; String c55316 = ( String ) map55316 . get ( " STRING " ) ; String d55316 = c55316 . substring ( 0 , c55316 . length ( ) - 1 ) ; String e55316 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d55316 . getBytes ( ) ) ) ) ; String f55316 = e55316 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f55316 ) ; return bar ; } } } truepositive
public class BenchmarkTest02121 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a42864 = param ; StringBuilder b42864 = new StringBuilder ( a42864 ) ; b42864 . append ( " STRING " ) ; b42864 . replace ( b42864 . length ( ) - " STRING " . length ( ) , b42864 . length ( ) , " STRING " ) ; HashMap < String , Object > map42864 = new HashMap < String , Object > ( ) ; map42864 . put ( " STRING " , b42864 . toString ( ) ) ; String c42864 = ( String ) map42864 . get ( " STRING " ) ; String d42864 = c42864 . substring ( 0 , c42864 . length ( ) - 1 ) ; String e42864 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d42864 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g42864 = " STRING " ; String taintSrc = thing . doSomething ( g42864 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest20976 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a31861 = param ; StringBuilder b31861 = new StringBuilder ( a31861 ) ; b31861 . append ( " STRING " ) ; b31861 . replace ( b31861 . length ( ) - " STRING " . length ( ) , b31861 . length ( ) , " STRING " ) ; HashMap < String , Object > map31861 = new HashMap < String , Object > ( ) ; map31861 . put ( " STRING " , b31861 . toString ( ) ) ; String c31861 = ( String ) map31861 . get ( " STRING " ) ; String d31861 = c31861 . substring ( 0 , c31861 . length ( ) - 1 ) ; String e31861 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d31861 . getBytes ( ) ) ) ) ; String f31861 = e31861 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f31861 ) ; return bar ; } } falsepositive
public class BenchmarkTest09007 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a3163 = param ; StringBuilder b3163 = new StringBuilder ( a3163 ) ; b3163 . append ( " STRING " ) ; b3163 . replace ( b3163 . length ( ) - " STRING " . length ( ) , b3163 . length ( ) , " STRING " ) ; HashMap < String , Object > map3163 = new HashMap < String , Object > ( ) ; map3163 . put ( " STRING " , b3163 . toString ( ) ) ; String c3163 = ( String ) map3163 . get ( " STRING " ) ; String d3163 = c3163 . substring ( 0 , c3163 . length ( ) - 1 ) ; String e3163 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d3163 . getBytes ( ) ) ) ) ; String f3163 = e3163 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f3163 ) ; return bar ; } } } truepositive
public class BenchmarkTest14717 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a65389 = param ; StringBuilder b65389 = new StringBuilder ( a65389 ) ; b65389 . append ( " STRING " ) ; b65389 . replace ( b65389 . length ( ) - " STRING " . length ( ) , b65389 . length ( ) , " STRING " ) ; HashMap < String , Object > map65389 = new HashMap < String , Object > ( ) ; map65389 . put ( " STRING " , b65389 . toString ( ) ) ; String c65389 = ( String ) map65389 . get ( " STRING " ) ; String d65389 = c65389 . substring ( 0 , c65389 . length ( ) - 1 ) ; String e65389 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d65389 . getBytes ( ) ) ) ) ; String f65389 = e65389 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g65389 = " STRING " ; String bar = thing . doSomething ( g65389 ) ; return bar ; } } falsepositive