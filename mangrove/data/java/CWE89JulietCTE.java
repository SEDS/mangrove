public class CWE89_SQL_Injection__connect_tcp_execute_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_execute_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_execute_10 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticTrue ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__connect_tcp_executeBatch_01 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; / * read input from socket * / readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeBatch_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( true ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeBatch_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_11 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; / * read input from socket * / readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__connect_tcp_executeUpdate_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeUpdate_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; / * read input from socket * / readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__connect_tcp_prepareStatement_14 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { socket = new Socket ( " STRING " , N5 ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__connect_tcp_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__console_readLine_execute_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_11 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; / * Initialize data * / { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__console_readLine_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__console_readLine_executeBatch_13 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( STATIC_FINAL_FIVE = = 5 ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeBatch_14 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( staticFive = = 5 ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeBatch_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeBatch_31 extends AbstractTestCase { public void warningMethod ( ) { String dataCopy ; { String taintSrc ; taintSrc = " " ; / * Initialize data * / { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / dataCopy = taintSrc ; } { String taintSrc = dataCopy ; if ( taintSrc ! = null ) { String T3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__console_readLine_executeQuery_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeQuery_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeQuery_10 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticTrue ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__console_readLine_executeUpdate_04 extends AbstractTestCase { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FALSE ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeUpdate_05 extends AbstractTestCase { private boolean privateTrue = true ; public void warningMethod ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFalse ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( privateFalse ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__console_readLine_prepareStatement_01 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; / * Initialize data * / { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } / * NOTE : Tools may report a flaw here because buffread and isr are not closed . Unfortunately , closing those will close System . in , which will cause any future attempts to read from the console to fail and throw an exception * / Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__console_readLine_prepareStatement_15 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; switch ( 6 ) { case 6 : taintSrc = " " ; { InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { readerInputStream = new InputStreamReader ( in , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; default : taintSrc = null ; break ; } switch ( 7 ) { case 7 : Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__console_readLine_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__console_readLine_prepareStatement_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection U3 = null ; PreparedStatement null4 = null ; { U3 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__console_readLine_prepareStatement_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; PreparedStatement taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = dbConnection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__console_readLine_prepareStatement_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection U5 = null ; PreparedStatement null6 = null ; { U5 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__database_execute_04 extends AbstractTestCase { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FALSE ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; Boolean result = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; Boolean result = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; Boolean result = U3 . injectableMethod ( paramTaint ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; Boolean result = U3 . injectableMethod ( paramTaint ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__database_execute_05 extends AbstractTestCase { private boolean privateTrue = true ; public void warningMethod ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFalse ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; Boolean result = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; Boolean result = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( privateFalse ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; Boolean result = U3 . injectableMethod ( paramTaint ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; Boolean result = U3 . injectableMethod ( paramTaint ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__database_execute_17 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; / * We need to have one source outside of a for loop in order * to prevent the Java compiler from generating an error because * data is uninitialized * / taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U4 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__database_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__database_execute_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U4 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__database_execute_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; Boolean taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__database_execute_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U6 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__database_executeBatch_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( true ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__database_executeBatch_03 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( 5 = = 5 ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( 5 = = 5 ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__database_executeBatch_17 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; / * We need to have one source outside of a for loop in order * to prevent the Java compiler from generating an error because * data is uninitialized * / taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { if ( taintSrc ! = null ) { String T3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__database_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__database_executeBatch_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; if ( taintSrc ! = null ) { String U3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__database_executeBatch_68b { public void warningMethod ( ) { String data = data ; if ( data ! = null ) { String taintSrc [ ] = data . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + taintSrc [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__database_executeBatch_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; if ( taintSrc ! = null ) { String U5 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U5 [ i ] + " STRING " ; U8 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__database_executeQuery_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet null4 = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; null4 = preparedStatement . injectableMethod ( paramTaint ) ; taintSrc = null4 . getString ( 1 ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__database_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__database_executeQuery_61a extends AbstractTestCase { public void warningMethod ( ) { String taintSrc = ( new CWE89_SQL_Injection__database_executeQuery_61b ( ) ) . badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } truepositive
public class CWE89_SQL_Injection__database_executeQuery_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; ResultSet null5 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__database_executeQuery_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__database_executeQuery_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; ResultSet null7 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null7 = U6 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } falsepositive
public class CWE89_SQL_Injection__database_executeUpdate_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . prepareStatement ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__database_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__database_executeUpdate_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U4 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__database_executeUpdate_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; int taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__database_executeUpdate_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U6 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__database_prepareStatement_01 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . injectableMethod ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__database_prepareStatement_14 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . injectableMethod ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } } else { taintSrc = null ; } if ( staticFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__database_prepareStatement_15 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; switch ( 6 ) { case 6 : taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . injectableMethod ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } break ; default : taintSrc = null ; break ; } switch ( 7 ) { case 7 : Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__database_prepareStatement_17 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; / * We need to have one source outside of a for loop in order * to prevent the Java compiler from generating an error because * data is uninitialized * / taintSrc = " " ; / * Initialize data * / { Connection connection = null ; PreparedStatement preparedStatement = null ; ResultSet resultSet = null ; { connection = IO . getDBConnection ( ) ; preparedStatement = connection . injectableMethod ( " STRING " ) ; resultSet = preparedStatement . executeQuery ( ) ; taintSrc = resultSet . getString ( 1 ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { Connection U3 = null ; PreparedStatement null4 = null ; { U3 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__database_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__database_prepareStatement_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection U3 = null ; PreparedStatement null4 = null ; { U3 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__database_prepareStatement_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; PreparedStatement taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = dbConnection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__database_prepareStatement_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection U5 = null ; PreparedStatement null6 = null ; { U5 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Environment_executeBatch_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; if ( taintSrc ! = null ) { String U3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeBatch_68b { public void warningMethod ( ) { String data = data ; if ( data ! = null ) { String taintSrc [ ] = data . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + taintSrc [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeBatch_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; if ( taintSrc ! = null ) { String U5 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U5 [ i ] + " STRING " ; U8 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__Environment_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Environment_execute_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U4 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__Environment_execute_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; Boolean taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__Environment_execute_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U6 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Environment_executeQuery_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; ResultSet null5 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeQuery_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeQuery_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; ResultSet null7 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null7 = U6 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Environment_executeUpdate_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U4 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeUpdate_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; int taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__Environment_executeUpdate_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U6 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__Environment_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Environment_prepareStatement_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection U3 = null ; PreparedStatement null4 = null ; { U3 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__Environment_prepareStatement_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; PreparedStatement taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = dbConnection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__Environment_prepareStatement_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection U5 = null ; PreparedStatement null6 = null ; { U5 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__File_execute_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; Boolean result = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; Boolean result = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; Boolean result = U3 . injectableMethod ( paramTaint ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; Boolean result = U3 . injectableMethod ( paramTaint ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__File_execute_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__File_execute_10 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticTrue ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__File_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__File_execute_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U4 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__File_execute_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; Boolean taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__File_execute_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U6 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__File_executeBatch_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__File_executeBatch_11 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__File_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__File_executeBatch_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; if ( taintSrc ! = null ) { String U3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__File_executeBatch_68b { public void warningMethod ( ) { String data = data ; if ( data ! = null ) { String taintSrc [ ] = data . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + taintSrc [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__File_executeBatch_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; if ( taintSrc ! = null ) { String U5 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U5 [ i ] + " STRING " ; U8 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__File_executeQuery_04 extends AbstractTestCase { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FALSE ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__File_executeQuery_05 extends AbstractTestCase { private boolean privateTrue = true ; public void warningMethod ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFalse ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFalse ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateTrue ) { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__File_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__File_executeQuery_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; ResultSet null5 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__File_executeQuery_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__File_executeQuery_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; ResultSet null7 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null7 = U6 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } falsepositive
public class CWE89_SQL_Injection__File_executeUpdate_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__File_executeUpdate_13 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__File_executeUpdate_15 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; switch ( 6 ) { case 6 : taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } break ; default : taintSrc = null ; break ; } switch ( 7 ) { case 7 : Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__File_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__File_executeUpdate_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U4 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__File_executeUpdate_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; int taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__File_executeUpdate_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U6 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__File_prepareStatement_04 extends AbstractTestCase { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FALSE ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__File_prepareStatement_05 extends AbstractTestCase { private boolean privateTrue = true ; public void warningMethod ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateTrue ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFalse ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateTrue ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateTrue ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFalse ) { IO . writeLine ( " STRING " ) ; } else { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateTrue ) { taintSrc = " " ; { File file = new File ( " STRING " ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; { streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a file * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateTrue ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__File_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__File_prepareStatement_67b { public void warningMethod ( Container dataContainer ) { String taintSrc = containerOne ; Connection U3 = null ; PreparedStatement null4 = null ; { U3 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__File_prepareStatement_68b { public void warningMethod ( ) { String data = data ; Connection dbConnection = null ; PreparedStatement taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = dbConnection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__File_prepareStatement_75b { public void warningMethod ( byte [ ] dataSerialized ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection U5 = null ; PreparedStatement null6 = null ; { U5 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_01 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_02 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( true ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } } else { taintSrc = null ; } if ( true ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_15 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; switch ( 6 ) { case 6 : taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } break ; default : taintSrc = null ; break ; } switch ( 7 ) { case 7 : Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_16 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; while ( true ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } break ; } while ( true ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U6 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; Boolean taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_execute_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U8 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeBatch_14 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } } else { taintSrc = null ; } if ( staticFive = = 5 ) { if ( taintSrc ! = null ) { String T4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeBatch_31 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String dataCopy ; { String taintSrc ; taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } dataCopy = taintSrc ; } { String taintSrc = dataCopy ; if ( taintSrc ! = null ) { String T5 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T5 [ i ] + " STRING " ; U8 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeBatch_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeBatch_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; if ( taintSrc ! = null ) { String U5 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U5 [ i ] + " STRING " ; U8 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeBatch_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; if ( data ! = null ) { String taintSrc [ ] = data . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + taintSrc [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeBatch_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; if ( taintSrc ! = null ) { String U7 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U10 = null ; { dbConnection = IO . getDBConnection ( ) ; U10 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U7 [ i ] + " STRING " ; U10 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeQuery_06 extends AbstractTestCaseServlet { private static final int PRIVATE_STATIC_FINAL_FIVE = 5 ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeQuery_10 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( staticTrue ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } } else { taintSrc = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeQuery_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeQuery_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U6 = null ; ResultSet null7 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null7 = U6 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeQuery_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeQuery_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U8 = null ; ResultSet null9 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null9 = U8 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_01 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_15 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; switch ( 6 ) { case 6 : taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } break ; default : taintSrc = null ; break ; } switch ( 7 ) { case 7 : Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_31 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String dataCopy ; { String taintSrc ; taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } dataCopy = taintSrc ; } { String taintSrc = dataCopy ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U6 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U6 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; int taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U8 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_11 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_12 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { taintSrc = cookieSources [ 0 ] . getValue ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_42 extends AbstractTestCaseServlet { private String badSource ( HttpServletRequest request , HttpServletResponse response ) { String data ; data = " " ; / * initialize data in case there are no cookies * / { Cookie cookieSources [ ] = request . getCookies ( ) ; if ( cookieSources ! = null ) { data = cookieSources [ 0 ] . getValue ( ) ; } } return data ; } public void warningMethod ( HttpServletRequest U1 , HttpServletResponse U2 ) { String taintSrc = badSource ( U1 , U2 ) ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_61a extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = ( new CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_61b ( ) ) . badSource ( request , response ) ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection U5 = null ; PreparedStatement null6 = null ; { U5 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; PreparedStatement taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = dbConnection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getCookies_Servlet_prepareStatement_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection U7 = null ; PreparedStatement null8 = null ; { U7 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null8 = U7 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeBatch_13 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( STATIC_FINAL_FIVE = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( STATIC_FINAL_FIVE = = 5 ) { if ( taintSrc ! = null ) { String T4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeBatch_14 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( staticFive = = 5 ) { if ( taintSrc ! = null ) { String T4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeBatch_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeBatch_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; if ( taintSrc ! = null ) { String U5 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U5 [ i ] + " STRING " ; U8 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeBatch_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; if ( data ! = null ) { String taintSrc [ ] = data . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + taintSrc [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeBatch_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; if ( taintSrc ! = null ) { String U7 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U10 = null ; { dbConnection = IO . getDBConnection ( ) ; U10 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U7 [ i ] + " STRING " ; U10 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeQuery_07 extends AbstractTestCaseServlet { private int privateFive = 5 ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeQuery_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeQuery_61a extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = ( new CWE89_SQL_Injection__getParameter_Servlet_executeQuery_61b ( ) ) . badSource ( request , response ) ; Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeQuery_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U6 = null ; ResultSet null7 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null7 = U6 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeQuery_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; ResultSet taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeQuery_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U8 = null ; ResultSet null9 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null9 = U8 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_01 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = request . getParameter ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_02 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( true ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( true ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_04 extends AbstractTestCaseServlet { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FALSE ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; Boolean result = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; Boolean result = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; Boolean result = U5 . injectableMethod ( paramTaint ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; Boolean result = U5 . injectableMethod ( paramTaint ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_15 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; switch ( 6 ) { case 6 : taintSrc = request . getParameter ( " STRING " ) ; break ; default : taintSrc = null ; break ; } switch ( 7 ) { case 7 : Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_16 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; while ( true ) { taintSrc = request . getParameter ( " STRING " ) ; break ; } while ( true ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U6 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; Boolean taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_execute_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U8 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_06 extends AbstractTestCaseServlet { private static final int PRIVATE_STATIC_FINAL_FIVE = 5 ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; int rowCount = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; int rowCount = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; int rowCount = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; int rowCount = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_07 extends AbstractTestCaseServlet { private int privateFive = 5 ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; int rowCount = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; int rowCount = U5 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; int rowCount = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , taintSrc ) ; int rowCount = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_10 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( staticTrue ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_11 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_42 extends AbstractTestCaseServlet { private String badSource ( HttpServletRequest request , HttpServletResponse response ) { String data ; data = request . getParameter ( " STRING " ) ; return data ; } public void warningMethod ( HttpServletRequest U1 , HttpServletResponse U2 ) { String taintSrc = badSource ( U1 , U2 ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U6 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; int taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_executeUpdate_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U8 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_04 extends AbstractTestCaseServlet { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FALSE ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; null5 = U4 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null5 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; null5 = U4 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null5 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; null5 = U4 . injectableMethod ( " STRING " ) ; null5 . setString ( 1 , taintSrc ) ; Boolean result = null5 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = request . getParameter ( " STRING " ) ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; null5 = U4 . injectableMethod ( " STRING " ) ; null5 . setString ( 1 , taintSrc ) ; Boolean result = null5 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_61a extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = ( new CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_61b ( ) ) . badSource ( request , response ) ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection U5 = null ; PreparedStatement null6 = null ; { U5 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; PreparedStatement taintSrc = null ; { dbConnection = IO . getDBConnection ( ) ; String paramTaint = " STRING " + data + " STRING " ; taintSrc = dbConnection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getParameter_Servlet_prepareStatement_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection U7 = null ; PreparedStatement null8 = null ; { U7 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null8 = U7 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_08 extends AbstractTestCaseServlet { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateReturnsTrue ( ) ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_09 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( STATIC_FINAL_TRUE ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_10 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( staticTrue ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_11 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( IO . staticReturnsTrue ( ) ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_42 extends AbstractTestCaseServlet { private String badSource ( HttpServletRequest request , HttpServletResponse response ) { String data ; data = " " ; / * initialize data in case id is not in query string * / { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { data = token . substring ( 3 ) ; break ; / * exit while loop * / } } } return data ; } public void warningMethod ( HttpServletRequest U1 , HttpServletResponse U2 ) { String T3 = badSource ( U1 , U2 ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U6 . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; Connection dbConnection = null ; Statement sqlStatement = null ; { dbConnection = IO . getDBConnection ( ) ; sqlStatement = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + data + " STRING " ; Boolean taintSrc = sqlStatement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_execute_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U8 . injectableMethod ( paramTaint ) ; } } } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_13 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( STATIC_FINAL_FIVE = = 5 ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( STATIC_FINAL_FIVE = = 5 ) { if ( T3 ! = null ) { String T4 [ ] = T3 . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_42 extends AbstractTestCaseServlet { private String badSource ( HttpServletRequest request , HttpServletResponse response ) { String data ; data = " " ; / * initialize data in case id is not in query string * / { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { data = token . substring ( 3 ) ; break ; / * exit while loop * / } } } return data ; } public void warningMethod ( HttpServletRequest U1 , HttpServletResponse U2 ) { String T3 = badSource ( U1 , U2 ) ; if ( T3 ! = null ) { String T4 [ ] = T3 . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U4 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U4 [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_67b { public void warningMethod ( Container dataContainer , HttpServletRequest request , HttpServletResponse response ) { String taintSrc = containerOne ; if ( taintSrc ! = null ) { String U5 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U8 = null ; { dbConnection = IO . getDBConnection ( ) ; U8 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U5 [ i ] + " STRING " ; U8 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_68b { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String data = data ; if ( data ! = null ) { String taintSrc [ ] = data . split ( " STRING " ) ; Connection dbConnection = null ; Statement U7 = null ; { dbConnection = IO . getDBConnection ( ) ; U7 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + taintSrc [ i ] + " STRING " ; U7 . injectableMethod ( paramTaint ) ; } } } } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeBatch_75b { public void warningMethod ( byte [ ] dataSerialized , HttpServletRequest request , HttpServletResponse response ) { ByteArrayInputStream streamByteArrayInput = null ; ObjectInputStream streamObjectInput = null ; { streamByteArrayInput = new ByteArrayInputStream ( dataSerialized ) ; streamObjectInput = new ObjectInputStream ( streamByteArrayInput ) ; String taintSrc = ( String ) streamObjectInput . readObject ( ) ; if ( taintSrc ! = null ) { String U7 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U10 = null ; { dbConnection = IO . getDBConnection ( ) ; U10 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U7 [ i ] + " STRING " ; U10 . injectableMethod ( paramTaint ) ; } } } } } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_04 extends AbstractTestCaseServlet { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( PRIVATE_STATIC_FINAL_FALSE ) { T3 = null ; } else { T3 = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + T3 + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T3 = " STRING " ; } else { T3 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + T3 + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , T3 ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , T3 ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_05 extends AbstractTestCaseServlet { private boolean privateTrue = true ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateTrue ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateFalse ) { T3 = null ; } else { T3 = " STRING " ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + T3 + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateTrue ) { T3 = " STRING " ; } else { T3 = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + T3 + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateTrue ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateFalse ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , T3 ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateTrue ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateTrue ) { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , T3 ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_07 extends AbstractTestCaseServlet { private int privateFive = 5 ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateFive = = 5 ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateFive ! = 5 ) { T3 = null ; } else { T3 = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + T3 + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateFive = = 5 ) { T3 = " STRING " ; } else { T3 = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; null6 = U5 . injectableMethod ( " STRING " + T3 + " STRING " ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateFive = = 5 ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , T3 ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateFive = = 5 ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , T3 ) ; null6 = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( null6 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeQuery_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; ResultSet null6 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null6 = U5 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeUpdate_05 extends AbstractTestCaseServlet { private boolean privateTrue = true ; public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateTrue ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateFalse ) { T3 = null ; } else { T3 = " STRING " ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; int rowCount = U5 . injectableMethod ( " STRING " + T3 + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateTrue ) { T3 = " STRING " ; } else { T3 = null ; } if ( privateTrue ) { Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; int rowCount = U5 . injectableMethod ( " STRING " + T3 + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateTrue ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateFalse ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , T3 ) ; int rowCount = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( privateTrue ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( privateTrue ) { Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; U5 . setString ( 1 , T3 ) ; int rowCount = U5 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_executeUpdate_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U5 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_09 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( STATIC_FINAL_TRUE ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( STATIC_FINAL_TRUE ) { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_11 extends AbstractTestCaseServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 ; if ( IO . staticReturnsTrue ( ) ) { T3 = " " ; / * initialize data in case id is not in query string * / { StringTokenizer taintSrc = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( taintSrc . hasMoreTokens ( ) ) { String token = taintSrc . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { T3 = token . substring ( 3 ) ; break ; / * exit while loop * / } } } } else { T3 = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_42 extends AbstractTestCaseServlet { private String badSource ( HttpServletRequest request , HttpServletResponse response ) { String data ; data = " " ; / * initialize data in case id is not in query string * / { StringTokenizer tokenizer = new StringTokenizer ( request . getQueryString ( ) , " STRING " ) ; while ( tokenizer . hasMoreTokens ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . startsWith ( " STRING " ) ) { data = token . substring ( 3 ) ; break ; / * exit while loop * / } } } return data ; } public void warningMethod ( HttpServletRequest U1 , HttpServletResponse U2 ) { String T3 = badSource ( U1 , U2 ) ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T3 + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__getQueryString_Servlet_prepareStatement_45 extends AbstractTestCaseServlet { private String dataGoodG2B ; private void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = dataGoodG2B ; Connection U4 = null ; PreparedStatement null5 = null ; { U4 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( request , response ) ; } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_execute_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_execute_09 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_execute_12 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrueOrFalse ( ) ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_execute_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; / * read input from socket * / readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_executeBatch_14 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticFive = = 5 ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeBatch_31 extends AbstractTestCase { public void warningMethod ( ) { String dataCopy ; { String taintSrc ; taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; / * read input from socket * / readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } dataCopy = taintSrc ; } { String taintSrc = dataCopy ; if ( taintSrc ! = null ) { String T3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_executeQuery_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeQuery_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeQuery_10 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticTrue ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticTrue ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_executeUpdate_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( true ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeUpdate_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeUpdate_17 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; / * We need to have one source outside of a for loop in order * to prevent the Java compiler from generating an error because * data is uninitialized * / taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; / * read input from socket * / readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; Statement U4 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U4 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_01 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; / * read input from socket * / readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( true ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_04 extends AbstractTestCase { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FALSE ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_TRUE ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_17 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; / * We need to have one source outside of a for loop in order * to prevent the Java compiler from generating an error because * data is uninitialized * / taintSrc = " " ; / * Initialize data * / { ServerSocket listener = null ; Socket socket = null ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { listener = new ServerSocket ( N5 ) ; socket = listener . accept ( ) ; / * read input from socket * / readerInputStream = new InputStreamReader ( socket . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; taintSrc = readerBuffered . readLine ( ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { Connection U3 = null ; PreparedStatement null4 = null ; { U3 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__listen_tcp_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_executeBatch_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive = = 5 ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } private void goodG2B1 ( ) { String T1 ; if ( privateFive ! = 5 ) { T1 = null ; } else { T1 = " STRING " ; } if ( privateFive = = 5 ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { U5 . injectableMethod ( " STRING " + T2 [ i ] + " STRING " ) ; } int resultsArray [ ] = U5 . executeBatch ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + length + " STRING " ) ; } } } } private void goodG2B2 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " STRING " ; } else { T1 = null ; } if ( privateFive = = 5 ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; int successCount = 0 ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { U5 . injectableMethod ( " STRING " + T2 [ i ] + " STRING " ) ; } int resultsArray [ ] = U5 . executeBatch ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + length + " STRING " ) ; } } } } private void goodB2G1 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; for ( int i = 0 ; i < length ; i + + ) { U5 . setString ( 1 , T2 [ i ] ) ; U5 . injectableMethod ( paramTaint ) ; } int resultsArray [ ] = U5 . executeBatch ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + length + " STRING " ) ; } } } } private void goodB2G2 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive = = 5 ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; int successCount = 0 ; Connection dbConnection = null ; PreparedStatement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . prepareStatement ( " STRING " ) ; for ( int i = 0 ; i < length ; i + + ) { U5 . setString ( 1 , T2 [ i ] ) ; U5 . injectableMethod ( paramTaint ) ; } int resultsArray [ ] = U5 . executeBatch ( ) ; for ( int i = 0 ; i < length ; i + + ) { if ( resultsArray [ i ] > 0 ) { successCount + + ; } } IO . writeLine ( " STRING " + successCount + " STRING " + length + " STRING " ) ; } } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeBatch_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String T1 ; if ( privateReturnsTrue ( ) ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateReturnsTrue ( ) ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeBatch_10 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( staticTrue ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( staticTrue ) { if ( T1 ! = null ) { String T2 [ ] = T1 . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_executeQuery_03 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( 5 = = 5 ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( 5 = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeQuery_15 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; switch ( 6 ) { case 6 : T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } break ; default : T1 = null ; break ; } switch ( 7 ) { case 7 : Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeQuery_17 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; / * We need to have one source outside of a for loop in order * to prevent the Java compiler from generating an error because * data is uninitialized * / T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } for ( int j = 0 ; j < 1 ; j + + ) { Connection dbConnection = null ; Statement U4 = null ; ResultSet null5 = null ; { dbConnection = IO . getDBConnection ( ) ; U4 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null5 = U4 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_executeUpdate_04 extends AbstractTestCase { private static final boolean PRIVATE_STATIC_FINAL_TRUE = true ; public void warningMethod ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_FALSE ) { T1 = null ; } else { T1 = " STRING " ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + T1 + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T1 = " STRING " ; } else { T1 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + T1 + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( PRIVATE_STATIC_FINAL_FALSE ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , T1 ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String T1 ; if ( PRIVATE_STATIC_FINAL_TRUE ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( PRIVATE_STATIC_FINAL_TRUE ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , T1 ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_execute_12 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( IO . staticReturnsTrueOrFalse ( ) ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String T1 ; if ( privateFive ! = 5 ) { T1 = null ; } else { T1 = " STRING " ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + T1 + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + T1 + " STRING " ) ; } else { IO . writeLine ( " STRING " + T1 ) ; } } } } private void goodG2B2 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " STRING " ; } else { T1 = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + T1 + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + T1 + " STRING " ) ; } else { IO . writeLine ( " STRING " + T1 ) ; } } } } private void goodB2G1 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , T1 ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + T1 + " STRING " ) ; } else { IO . writeLine ( " STRING " + T1 ) ; } } } } private void goodB2G2 ( ) { String T1 ; if ( privateFive = = 5 ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , T1 ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + T1 + " STRING " ) ; } else { IO . writeLine ( " STRING " + T1 ) ; } } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String T1 ; if ( privateReturnsTrue ( ) ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( privateReturnsTrue ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_11 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( IO . staticReturnsTrue ( ) ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_12 extends AbstractTestCase { public void warningMethod ( ) { String T1 ; if ( IO . staticReturnsTrueOrFalse ( ) ) { T1 = " " ; / * Initialize data * / { Properties taintSrc = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; taintSrc . load ( streamFileInput ) ; T1 = taintSrc . getProperty ( " STRING " ) ; } } } else { T1 = " STRING " ; } if ( IO . staticReturnsTrueOrFalse ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; / * Initialize data * / { Properties properties = new Properties ( ) ; FileInputStream streamFileInput = null ; { streamFileInput = new FileInputStream ( " STRING " ) ; properties . load ( streamFileInput ) ; data = properties . getProperty ( " STRING " ) ; } } return data ; } public void warningMethod ( ) { String T1 = badSource ( ) ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + T1 + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__PropertiesFile_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Property_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Property_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Property_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Property_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__Property_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__URLConnection_execute_01 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__URLConnection_execute_02 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( true ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( true ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_execute_15 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; switch ( 6 ) { case 6 : taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } break ; default : taintSrc = null ; break ; } switch ( 7 ) { case 7 : Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_execute_16 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; while ( true ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } break ; } while ( true ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_execute_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; Boolean result = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__URLConnection_executeBatch_14 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( staticFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( staticFive = = 5 ) { if ( taintSrc ! = null ) { String T2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeBatch_31 extends AbstractTestCase { public void warningMethod ( ) { String dataCopy ; { String taintSrc ; taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } dataCopy = taintSrc ; } { String taintSrc = dataCopy ; if ( taintSrc ! = null ) { String T3 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U6 = null ; { dbConnection = IO . getDBConnection ( ) ; U6 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + T3 [ i ] + " STRING " ; U6 . injectableMethod ( paramTaint ) ; } } } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeBatch_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; if ( taintSrc ! = null ) { String U2 [ ] = taintSrc . split ( " STRING " ) ; Connection dbConnection = null ; Statement U5 = null ; { dbConnection = IO . getDBConnection ( ) ; U5 = dbConnection . createStatement ( ) ; for ( int i = 0 ; i < length ; i + + ) { String paramTaint = " STRING " + U2 [ i ] + " STRING " ; U5 . injectableMethod ( paramTaint ) ; } } } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__URLConnection_executeQuery_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; null4 = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; null4 = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( null4 . getRow ( ) ) ; / * Use ResultSet in some way * / } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeQuery_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeQuery_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__URLConnection_executeQuery_61a extends AbstractTestCase { public void warningMethod ( ) { String taintSrc = ( new CWE89_SQL_Injection__URLConnection_executeQuery_61b ( ) ) . badSource ( ) ; Connection dbConnection = null ; Statement U3 = null ; ResultSet null4 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null4 = U3 . injectableMethod ( paramTaint ) ; / * Use ResultSet in some way * / } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeUpdate_06 extends AbstractTestCase { private static final int PRIVATE_STATIC_FINAL_FIVE = 5 ; public void warningMethod ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( PRIVATE_STATIC_FINAL_FIVE = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeUpdate_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; int rowCount = U3 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection dbConnection = null ; PreparedStatement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . prepareStatement ( " STRING " ) ; U3 . setString ( 1 , taintSrc ) ; int rowCount = U3 . injectableMethod ( paramTaint ) ; IO . writeLine ( " STRING " + rowCount + " STRING " ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_executeUpdate_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection dbConnection = null ; Statement U3 = null ; { dbConnection = IO . getDBConnection ( ) ; U3 = dbConnection . createStatement ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; int rowCount = U3 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_07 extends AbstractTestCase { private int privateFive = 5 ; public void warningMethod ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } private void goodG2B1 ( ) { String taintSrc ; if ( privateFive ! = 5 ) { taintSrc = null ; } else { taintSrc = " STRING " ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodG2B2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " STRING " ; } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " + taintSrc + " STRING " ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G1 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive ! = 5 ) { IO . writeLine ( " STRING " ) ; } else { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } private void goodB2G2 ( ) { String taintSrc ; if ( privateFive = = 5 ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateFive = = 5 ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; null3 = U2 . injectableMethod ( " STRING " ) ; null3 . setString ( 1 , taintSrc ) ; Boolean result = null3 . execute ( ) ; if ( result ) { IO . writeLine ( " STRING " + taintSrc + " STRING " ) ; } else { IO . writeLine ( " STRING " + taintSrc ) ; } } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_08 extends AbstractTestCase { private boolean privateReturnsTrue ( ) { return true ; } public void warningMethod ( ) { String taintSrc ; if ( privateReturnsTrue ( ) ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( privateReturnsTrue ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_11 extends AbstractTestCase { public void warningMethod ( ) { String taintSrc ; if ( IO . staticReturnsTrue ( ) ) { taintSrc = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / taintSrc = readerBuffered . readLine ( ) ; } } } else { taintSrc = null ; } if ( IO . staticReturnsTrue ( ) ) { Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } } truepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_42 extends AbstractTestCase { private String badSource ( ) { String data ; data = " " ; / * Initialize data * / { URLConnection urlConnection = ( new URL ( " STRING " ) ) . openConnection ( ) ; BufferedReader readerBuffered = null ; InputStreamReader readerInputStream = null ; { readerInputStream = new InputStreamReader ( urlConnection . getInputStream ( ) , " STRING " ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; / * POTENTIAL FLAW : Read data from a web server with URLConnection * / data = readerBuffered . readLine ( ) ; } } return data ; } public void warningMethod ( ) { String taintSrc = badSource ( ) ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } } truepositive
public class CWE89_SQL_Injection__URLConnection_prepareStatement_45 extends AbstractTestCase { private String dataGoodG2B ; private void warningMethod ( ) { String taintSrc = dataGoodG2B ; Connection U2 = null ; PreparedStatement null3 = null ; { U2 = IO . getDBConnection ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; null3 = U2 . injectableMethod ( paramTaint ) ; } } private void goodG2B ( ) { String taintSrc ; taintSrc = " STRING " ; dataGoodG2B = taintSrc ; warningMethod ( ) ; } } falsepositive