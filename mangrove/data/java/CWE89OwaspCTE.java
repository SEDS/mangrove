public class BenchmarkTest00026 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00027 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00028 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00029 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00030 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00052 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00053 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00054 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00055 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00078 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest00079 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest00080 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00081 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00082 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00083 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00112 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00113 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00114 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00115 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00116 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00151 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest00152 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00153 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00154 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00155 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00156 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00157 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00187 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest00188 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00189 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00216 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00217 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00218 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String paramTaint = " STRING " + T3 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00240 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest00241 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00242 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00243 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00244 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00266 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00267 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00291 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest00292 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00293 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00321 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest00322 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest00323 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest00324 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest00325 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest00326 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest00839 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 0 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest00840 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest00841 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } StringBuilder T6 = new StringBuilder ( taintSrc ) ; String T7 = T6 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest00842 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = " STRING " ; HashMap < String , Object > T7 = new HashMap < String , Object > ( ) ; T7 . put ( " STRING " , " STRING " ) ; T7 . put ( " STRING " , taintSrc . toString ( ) ) ; T7 . put ( " STRING " , " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest00843 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest00844 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T6 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest00845 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest00846 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = " STRING " ; HashMap < String , Object > T7 = new HashMap < String , Object > ( ) ; T7 . put ( " STRING " , " STRING " ) ; T7 . put ( " STRING " , taintSrc . toString ( ) ) ; T7 . put ( " STRING " , " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00847 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00848 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a82594 = param ; StringBuilder b82594 = new StringBuilder ( a82594 ) ; b82594 . append ( " STRING " ) ; b82594 . replace ( b82594 . length ( ) - " STRING " . length ( ) , b82594 . length ( ) , " STRING " ) ; HashMap < String , Object > map82594 = new HashMap < String , Object > ( ) ; map82594 . put ( " STRING " , b82594 . toString ( ) ) ; String c82594 = ( String ) map82594 . get ( " STRING " ) ; String d82594 = c82594 . substring ( 0 , c82594 . length ( ) - 1 ) ; String e82594 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d82594 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g82594 = " STRING " ; String taintSrc = thing . doSomething ( g82594 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest00849 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest00850 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest00851 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest00852 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 0 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest00853 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest00854 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a56552 = param ; StringBuilder b56552 = new StringBuilder ( a56552 ) ; b56552 . append ( " STRING " ) ; b56552 . replace ( b56552 . length ( ) - " STRING " . length ( ) , b56552 . length ( ) , " STRING " ) ; HashMap < String , Object > map56552 = new HashMap < String , Object > ( ) ; map56552 . put ( " STRING " , b56552 . toString ( ) ) ; String c56552 = ( String ) map56552 . get ( " STRING " ) ; String d56552 = c56552 . substring ( 0 , c56552 . length ( ) - 1 ) ; String e56552 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d56552 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g56552 = " STRING " ; String taintSrc = thing . doSomething ( g56552 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest00855 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } StringBuilder T6 = new StringBuilder ( taintSrc ) ; String T7 = T6 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest00856 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest00857 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = " STRING " ; HashMap < String , Object > T7 = new HashMap < String , Object > ( ) ; T7 . put ( " STRING " , " STRING " ) ; T7 . put ( " STRING " , taintSrc . toString ( ) ) ; T7 . put ( " STRING " , " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00858 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a51993 = param ; StringBuilder b51993 = new StringBuilder ( a51993 ) ; b51993 . append ( " STRING " ) ; b51993 . replace ( b51993 . length ( ) - " STRING " . length ( ) , b51993 . length ( ) , " STRING " ) ; HashMap < String , Object > map51993 = new HashMap < String , Object > ( ) ; map51993 . put ( " STRING " , b51993 . toString ( ) ) ; String c51993 = ( String ) map51993 . get ( " STRING " ) ; String d51993 = c51993 . substring ( 0 , c51993 . length ( ) - 1 ) ; String e51993 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d51993 . getBytes ( ) ) ) ) ; String f51993 = e51993 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f51993 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00859 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 1 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest00860 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00861 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz18470 = new StringBuilder ( taintSrc ) ; T6 = sbxyz18470 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00862 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00863 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 0 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00864 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 1 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest00865 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = " STRING " ; HashMap < String , Object > T7 = new HashMap < String , Object > ( ) ; T7 . put ( " STRING " , " STRING " ) ; T7 . put ( " STRING " , taintSrc . toString ( ) ) ; T7 . put ( " STRING " , " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest00866 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest00867 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } StringBuilder T6 = new StringBuilder ( taintSrc ) ; String T7 = T6 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00868 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 0 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00869 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00870 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a10726 = param ; StringBuilder b10726 = new StringBuilder ( a10726 ) ; b10726 . append ( " STRING " ) ; b10726 . replace ( b10726 . length ( ) - " STRING " . length ( ) , b10726 . length ( ) , " STRING " ) ; HashMap < String , Object > map10726 = new HashMap < String , Object > ( ) ; map10726 . put ( " STRING " , b10726 . toString ( ) ) ; String c10726 = ( String ) map10726 . get ( " STRING " ) ; String d10726 = c10726 . substring ( 0 , c10726 . length ( ) - 1 ) ; String e10726 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d10726 . getBytes ( ) ) ) ) ; String f10726 = e10726 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f10726 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00871 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00872 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00873 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00874 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00875 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00876 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a79578 = param ; StringBuilder b79578 = new StringBuilder ( a79578 ) ; b79578 . append ( " STRING " ) ; b79578 . replace ( b79578 . length ( ) - " STRING " . length ( ) , b79578 . length ( ) , " STRING " ) ; HashMap < String , Object > map79578 = new HashMap < String , Object > ( ) ; map79578 . put ( " STRING " , b79578 . toString ( ) ) ; String c79578 = ( String ) map79578 . get ( " STRING " ) ; String d79578 = c79578 . substring ( 0 , c79578 . length ( ) - 1 ) ; String e79578 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d79578 . getBytes ( ) ) ) ) ; String f79578 = e79578 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f79578 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest00877 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00878 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 1 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest00879 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = " STRING " ; HashMap < String , Object > T7 = new HashMap < String , Object > ( ) ; T7 . put ( " STRING " , " STRING " ) ; T7 . put ( " STRING " , taintSrc . toString ( ) ) ; T7 . put ( " STRING " , " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest00880 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00881 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00882 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00883 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00884 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a99908 = param ; StringBuilder b99908 = new StringBuilder ( a99908 ) ; b99908 . append ( " STRING " ) ; b99908 . replace ( b99908 . length ( ) - " STRING " . length ( ) , b99908 . length ( ) , " STRING " ) ; HashMap < String , Object > map99908 = new HashMap < String , Object > ( ) ; map99908 . put ( " STRING " , b99908 . toString ( ) ) ; String c99908 = ( String ) map99908 . get ( " STRING " ) ; String d99908 = c99908 . substring ( 0 , c99908 . length ( ) - 1 ) ; String e99908 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d99908 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g99908 = " STRING " ; String taintSrc = thing . doSomething ( g99908 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest00885 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest00886 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00887 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00888 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz43956 = new StringBuilder ( taintSrc ) ; T6 = sbxyz43956 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00889 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest00890 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 0 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00891 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00892 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 1 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest00893 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest00894 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } StringBuilder T6 = new StringBuilder ( taintSrc ) ; String T7 = T6 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00895 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T6 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00896 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00897 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00898 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz60262 = new StringBuilder ( taintSrc ) ; T6 = sbxyz60262 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00899 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T6 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00900 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest00901 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 1 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest00902 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00903 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 0 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00904 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00905 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T6 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00906 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest00907 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 0 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00908 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00909 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00910 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a23364 = param ; StringBuilder b23364 = new StringBuilder ( a23364 ) ; b23364 . append ( " STRING " ) ; b23364 . replace ( b23364 . length ( ) - " STRING " . length ( ) , b23364 . length ( ) , " STRING " ) ; HashMap < String , Object > map23364 = new HashMap < String , Object > ( ) ; map23364 . put ( " STRING " , b23364 . toString ( ) ) ; String c23364 = ( String ) map23364 . get ( " STRING " ) ; String d23364 = c23364 . substring ( 0 , c23364 . length ( ) - 1 ) ; String e23364 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d23364 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g23364 = " STRING " ; String taintSrc = thing . doSomething ( g23364 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest00911 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest00912 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = " STRING " ; HashMap < String , Object > T7 = new HashMap < String , Object > ( ) ; T7 . put ( " STRING " , " STRING " ) ; T7 . put ( " STRING " , taintSrc . toString ( ) ) ; T7 . put ( " STRING " , " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00913 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00914 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 1 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest00915 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a24193 = param ; StringBuilder b24193 = new StringBuilder ( a24193 ) ; b24193 . append ( " STRING " ) ; b24193 . replace ( b24193 . length ( ) - " STRING " . length ( ) , b24193 . length ( ) , " STRING " ) ; HashMap < String , Object > map24193 = new HashMap < String , Object > ( ) ; map24193 . put ( " STRING " , b24193 . toString ( ) ) ; String c24193 = ( String ) map24193 . get ( " STRING " ) ; String d24193 = c24193 . substring ( 0 , c24193 . length ( ) - 1 ) ; String e24193 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d24193 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g24193 = " STRING " ; String taintSrc = thing . doSomething ( g24193 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest00916 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00917 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest00918 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest00919 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } List < String > T6 = new ArrayList < String > ( ) ; T6 . add ( " STRING " ) ; T6 . add ( taintSrc ) ; T6 . add ( " STRING " ) ; T6 . remove ( 0 ) ; String T7 = T6 . get ( 0 ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00920 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00921 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00922 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = " STRING " ; HashMap < String , Object > T7 = new HashMap < String , Object > ( ) ; T7 . put ( " STRING " , " STRING " ) ; T7 . put ( " STRING " , taintSrc . toString ( ) ) ; T7 . put ( " STRING " , " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest00923 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest00924 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00925 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00926 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00927 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00928 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } StringBuilder T6 = new StringBuilder ( taintSrc ) ; String T7 = T6 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T7 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00929 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00930 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T6 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest00931 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00932 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a23610 = param ; StringBuilder b23610 = new StringBuilder ( a23610 ) ; b23610 . append ( " STRING " ) ; b23610 . replace ( b23610 . length ( ) - " STRING " . length ( ) , b23610 . length ( ) , " STRING " ) ; HashMap < String , Object > map23610 = new HashMap < String , Object > ( ) ; map23610 . put ( " STRING " , b23610 . toString ( ) ) ; String c23610 = ( String ) map23610 . get ( " STRING " ) ; String d23610 = c23610 . substring ( 0 , c23610 . length ( ) - 1 ) ; String e23610 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d23610 . getBytes ( ) ) ) ) ; String f23610 = e23610 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f23610 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest00933 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = " STRING " ; HashMap < String , Object > T7 = new HashMap < String , Object > ( ) ; T7 . put ( " STRING " , " STRING " ) ; T7 . put ( " STRING " , taintSrc . toString ( ) ) ; T7 . put ( " STRING " , " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; T6 = ( String ) T7 . get ( " STRING " ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest00934 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String a48296 = param ; StringBuilder b48296 = new StringBuilder ( a48296 ) ; b48296 . append ( " STRING " ) ; b48296 . replace ( b48296 . length ( ) - " STRING " . length ( ) , b48296 . length ( ) , " STRING " ) ; HashMap < String , Object > map48296 = new HashMap < String , Object > ( ) ; map48296 . put ( " STRING " , b48296 . toString ( ) ) ; String c48296 = ( String ) map48296 . get ( " STRING " ) ; String d48296 = c48296 . substring ( 0 , c48296 . length ( ) - 1 ) ; String e48296 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d48296 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g48296 = " STRING " ; String taintSrc = thing . doSomething ( g48296 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest00935 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest00936 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz98548 = new StringBuilder ( taintSrc ) ; T6 = sbxyz98548 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01467 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01468 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01469 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a62743 = param ; StringBuilder b62743 = new StringBuilder ( a62743 ) ; b62743 . append ( " STRING " ) ; b62743 . replace ( b62743 . length ( ) - " STRING " . length ( ) , b62743 . length ( ) , " STRING " ) ; HashMap < String , Object > map62743 = new HashMap < String , Object > ( ) ; map62743 . put ( " STRING " , b62743 . toString ( ) ) ; String c62743 = ( String ) map62743 . get ( " STRING " ) ; String d62743 = c62743 . substring ( 0 , c62743 . length ( ) - 1 ) ; String e62743 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d62743 . getBytes ( ) ) ) ) ; String f62743 = e62743 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f62743 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01470 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest01471 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a68820 = param ; StringBuilder b68820 = new StringBuilder ( a68820 ) ; b68820 . append ( " STRING " ) ; b68820 . replace ( b68820 . length ( ) - " STRING " . length ( ) , b68820 . length ( ) , " STRING " ) ; HashMap < String , Object > map68820 = new HashMap < String , Object > ( ) ; map68820 . put ( " STRING " , b68820 . toString ( ) ) ; String c68820 = ( String ) map68820 . get ( " STRING " ) ; String d68820 = c68820 . substring ( 0 , c68820 . length ( ) - 1 ) ; String e68820 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d68820 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g68820 = " STRING " ; String taintSrc = thing . doSomething ( g68820 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest01472 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01473 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01474 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest01475 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest01476 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a56 = param ; StringBuilder b56 = new StringBuilder ( a56 ) ; b56 . append ( " STRING " ) ; b56 . replace ( b56 . length ( ) - " STRING " . length ( ) , b56 . length ( ) , " STRING " ) ; HashMap < String , Object > map56 = new HashMap < String , Object > ( ) ; map56 . put ( " STRING " , b56 . toString ( ) ) ; String c56 = ( String ) map56 . get ( " STRING " ) ; String d56 = c56 . substring ( 0 , c56 . length ( ) - 1 ) ; String e56 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d56 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g56 = " STRING " ; String taintSrc = thing . doSomething ( g56 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest01477 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest01478 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest01479 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest01480 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest01481 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01482 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01483 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01484 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a99990 = param ; StringBuilder b99990 = new StringBuilder ( a99990 ) ; b99990 . append ( " STRING " ) ; b99990 . replace ( b99990 . length ( ) - " STRING " . length ( ) , b99990 . length ( ) , " STRING " ) ; HashMap < String , Object > map99990 = new HashMap < String , Object > ( ) ; map99990 . put ( " STRING " , b99990 . toString ( ) ) ; String c99990 = ( String ) map99990 . get ( " STRING " ) ; String d99990 = c99990 . substring ( 0 , c99990 . length ( ) - 1 ) ; String e99990 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d99990 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g99990 = " STRING " ; String taintSrc = thing . doSomething ( g99990 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest01485 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01486 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01487 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01488 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest01489 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz12520 = new StringBuilder ( taintSrc ) ; T4 = sbxyz12520 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01490 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01491 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01492 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest01493 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest01494 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest01495 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest01496 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest01497 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01498 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a62490 = param ; StringBuilder b62490 = new StringBuilder ( a62490 ) ; b62490 . append ( " STRING " ) ; b62490 . replace ( b62490 . length ( ) - " STRING " . length ( ) , b62490 . length ( ) , " STRING " ) ; HashMap < String , Object > map62490 = new HashMap < String , Object > ( ) ; map62490 . put ( " STRING " , b62490 . toString ( ) ) ; String c62490 = ( String ) map62490 . get ( " STRING " ) ; String d62490 = c62490 . substring ( 0 , c62490 . length ( ) - 1 ) ; String e62490 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d62490 . getBytes ( ) ) ) ) ; String f62490 = e62490 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f62490 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01499 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest01500 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz33238 = new StringBuilder ( taintSrc ) ; T4 = sbxyz33238 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01501 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest01502 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01503 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01504 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a8177 = param ; StringBuilder b8177 = new StringBuilder ( a8177 ) ; b8177 . append ( " STRING " ) ; b8177 . replace ( b8177 . length ( ) - " STRING " . length ( ) , b8177 . length ( ) , " STRING " ) ; HashMap < String , Object > map8177 = new HashMap < String , Object > ( ) ; map8177 . put ( " STRING " , b8177 . toString ( ) ) ; String c8177 = ( String ) map8177 . get ( " STRING " ) ; String d8177 = c8177 . substring ( 0 , c8177 . length ( ) - 1 ) ; String e8177 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d8177 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g8177 = " STRING " ; String taintSrc = thing . doSomething ( g8177 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01505 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01506 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01507 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01508 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01509 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz71155 = new StringBuilder ( taintSrc ) ; T4 = sbxyz71155 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01510 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01511 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01512 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest01513 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest01514 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest01515 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest01516 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest01517 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest01518 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01519 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01520 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01521 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01522 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01523 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz48408 = new StringBuilder ( taintSrc ) ; T4 = sbxyz48408 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01524 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01525 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01526 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01527 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01528 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01529 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01530 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01531 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01532 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a70825 = param ; StringBuilder b70825 = new StringBuilder ( a70825 ) ; b70825 . append ( " STRING " ) ; b70825 . replace ( b70825 . length ( ) - " STRING " . length ( ) , b70825 . length ( ) , " STRING " ) ; HashMap < String , Object > map70825 = new HashMap < String , Object > ( ) ; map70825 . put ( " STRING " , b70825 . toString ( ) ) ; String c70825 = ( String ) map70825 . get ( " STRING " ) ; String d70825 = c70825 . substring ( 0 , c70825 . length ( ) - 1 ) ; String e70825 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d70825 . getBytes ( ) ) ) ) ; String f70825 = e70825 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f70825 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01533 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest01534 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest01535 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01536 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz8428 = new StringBuilder ( taintSrc ) ; T4 = sbxyz8428 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01537 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01538 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01539 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01540 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a71608 = param ; StringBuilder b71608 = new StringBuilder ( a71608 ) ; b71608 . append ( " STRING " ) ; b71608 . replace ( b71608 . length ( ) - " STRING " . length ( ) , b71608 . length ( ) , " STRING " ) ; HashMap < String , Object > map71608 = new HashMap < String , Object > ( ) ; map71608 . put ( " STRING " , b71608 . toString ( ) ) ; String c71608 = ( String ) map71608 . get ( " STRING " ) ; String d71608 = c71608 . substring ( 0 , c71608 . length ( ) - 1 ) ; String e71608 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d71608 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g71608 = " STRING " ; String taintSrc = thing . doSomething ( g71608 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01541 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01542 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01543 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01544 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01545 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest01546 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest01547 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01548 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01549 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01550 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01551 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01552 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01553 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01554 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01555 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01556 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01557 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01558 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01559 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a79291 = param ; StringBuilder b79291 = new StringBuilder ( a79291 ) ; b79291 . append ( " STRING " ) ; b79291 . replace ( b79291 . length ( ) - " STRING " . length ( ) , b79291 . length ( ) , " STRING " ) ; HashMap < String , Object > map79291 = new HashMap < String , Object > ( ) ; map79291 . put ( " STRING " , b79291 . toString ( ) ) ; String c79291 = ( String ) map79291 . get ( " STRING " ) ; String d79291 = c79291 . substring ( 0 , c79291 . length ( ) - 1 ) ; String e79291 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d79291 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g79291 = " STRING " ; String taintSrc = thing . doSomething ( g79291 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest01560 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01561 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01562 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01563 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01564 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01565 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01566 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01567 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01568 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest01569 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01570 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01571 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01572 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest01573 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01574 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01575 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz74087 = new StringBuilder ( taintSrc ) ; T4 = sbxyz74087 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01576 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest01577 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a44845 = param ; StringBuilder b44845 = new StringBuilder ( a44845 ) ; b44845 . append ( " STRING " ) ; b44845 . replace ( b44845 . length ( ) - " STRING " . length ( ) , b44845 . length ( ) , " STRING " ) ; HashMap < String , Object > map44845 = new HashMap < String , Object > ( ) ; map44845 . put ( " STRING " , b44845 . toString ( ) ) ; String c44845 = ( String ) map44845 . get ( " STRING " ) ; String d44845 = c44845 . substring ( 0 , c44845 . length ( ) - 1 ) ; String e44845 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d44845 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g44845 = " STRING " ; String taintSrc = thing . doSomething ( g44845 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest01578 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest01579 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest01580 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz76788 = new StringBuilder ( taintSrc ) ; T4 = sbxyz76788 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest01581 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest01582 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01583 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String a77900 = param ; StringBuilder b77900 = new StringBuilder ( a77900 ) ; b77900 . append ( " STRING " ) ; b77900 . replace ( b77900 . length ( ) - " STRING " . length ( ) , b77900 . length ( ) , " STRING " ) ; HashMap < String , Object > map77900 = new HashMap < String , Object > ( ) ; map77900 . put ( " STRING " , b77900 . toString ( ) ) ; String c77900 = ( String ) map77900 . get ( " STRING " ) ; String d77900 = c77900 . substring ( 0 , c77900 . length ( ) - 1 ) ; String e77900 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d77900 . getBytes ( ) ) ) ) ; String f77900 = e77900 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f77900 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest01584 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01585 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest01586 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest01587 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02118 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a21023 = param ; StringBuilder b21023 = new StringBuilder ( a21023 ) ; b21023 . append ( " STRING " ) ; b21023 . replace ( b21023 . length ( ) - " STRING " . length ( ) , b21023 . length ( ) , " STRING " ) ; HashMap < String , Object > map21023 = new HashMap < String , Object > ( ) ; map21023 . put ( " STRING " , b21023 . toString ( ) ) ; String c21023 = ( String ) map21023 . get ( " STRING " ) ; String d21023 = c21023 . substring ( 0 , c21023 . length ( ) - 1 ) ; String e21023 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d21023 . getBytes ( ) ) ) ) ; String f21023 = e21023 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f21023 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02119 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02120 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02121 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a42864 = param ; StringBuilder b42864 = new StringBuilder ( a42864 ) ; b42864 . append ( " STRING " ) ; b42864 . replace ( b42864 . length ( ) - " STRING " . length ( ) , b42864 . length ( ) , " STRING " ) ; HashMap < String , Object > map42864 = new HashMap < String , Object > ( ) ; map42864 . put ( " STRING " , b42864 . toString ( ) ) ; String c42864 = ( String ) map42864 . get ( " STRING " ) ; String d42864 = c42864 . substring ( 0 , c42864 . length ( ) - 1 ) ; String e42864 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d42864 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g42864 = " STRING " ; String taintSrc = thing . doSomething ( g42864 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest02122 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02123 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02124 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02125 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02126 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a26590 = param ; StringBuilder b26590 = new StringBuilder ( a26590 ) ; b26590 . append ( " STRING " ) ; b26590 . replace ( b26590 . length ( ) - " STRING " . length ( ) , b26590 . length ( ) , " STRING " ) ; HashMap < String , Object > map26590 = new HashMap < String , Object > ( ) ; map26590 . put ( " STRING " , b26590 . toString ( ) ) ; String c26590 = ( String ) map26590 . get ( " STRING " ) ; String d26590 = c26590 . substring ( 0 , c26590 . length ( ) - 1 ) ; String e26590 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d26590 . getBytes ( ) ) ) ) ; String f26590 = e26590 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f26590 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02127 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a73632 = param ; StringBuilder b73632 = new StringBuilder ( a73632 ) ; b73632 . append ( " STRING " ) ; b73632 . replace ( b73632 . length ( ) - " STRING " . length ( ) , b73632 . length ( ) , " STRING " ) ; HashMap < String , Object > map73632 = new HashMap < String , Object > ( ) ; map73632 . put ( " STRING " , b73632 . toString ( ) ) ; String c73632 = ( String ) map73632 . get ( " STRING " ) ; String d73632 = c73632 . substring ( 0 , c73632 . length ( ) - 1 ) ; String e73632 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d73632 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g73632 = " STRING " ; String taintSrc = thing . doSomething ( g73632 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest02128 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02129 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02130 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02131 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a89601 = param ; StringBuilder b89601 = new StringBuilder ( a89601 ) ; b89601 . append ( " STRING " ) ; b89601 . replace ( b89601 . length ( ) - " STRING " . length ( ) , b89601 . length ( ) , " STRING " ) ; HashMap < String , Object > map89601 = new HashMap < String , Object > ( ) ; map89601 . put ( " STRING " , b89601 . toString ( ) ) ; String c89601 = ( String ) map89601 . get ( " STRING " ) ; String d89601 = c89601 . substring ( 0 , c89601 . length ( ) - 1 ) ; String e89601 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d89601 . getBytes ( ) ) ) ) ; String f89601 = e89601 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f89601 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest02132 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02133 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02134 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02135 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02136 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02137 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02138 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02139 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02140 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02141 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02142 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02143 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02144 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02145 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02146 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02147 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02148 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02149 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a16883 = param ; StringBuilder b16883 = new StringBuilder ( a16883 ) ; b16883 . append ( " STRING " ) ; b16883 . replace ( b16883 . length ( ) - " STRING " . length ( ) , b16883 . length ( ) , " STRING " ) ; HashMap < String , Object > map16883 = new HashMap < String , Object > ( ) ; map16883 . put ( " STRING " , b16883 . toString ( ) ) ; String c16883 = ( String ) map16883 . get ( " STRING " ) ; String d16883 = c16883 . substring ( 0 , c16883 . length ( ) - 1 ) ; String e16883 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d16883 . getBytes ( ) ) ) ) ; String f16883 = e16883 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f16883 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02150 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02151 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02152 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a99647 = param ; StringBuilder b99647 = new StringBuilder ( a99647 ) ; b99647 . append ( " STRING " ) ; b99647 . replace ( b99647 . length ( ) - " STRING " . length ( ) , b99647 . length ( ) , " STRING " ) ; HashMap < String , Object > map99647 = new HashMap < String , Object > ( ) ; map99647 . put ( " STRING " , b99647 . toString ( ) ) ; String c99647 = ( String ) map99647 . get ( " STRING " ) ; String d99647 = c99647 . substring ( 0 , c99647 . length ( ) - 1 ) ; String e99647 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d99647 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g99647 = " STRING " ; String taintSrc = thing . doSomething ( g99647 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02153 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02154 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02155 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02156 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02157 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02158 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02159 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02160 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02161 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02162 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02163 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz28504 = new StringBuilder ( T3 ) ; T5 = sbxyz28504 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02164 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02165 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02166 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02167 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02168 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02169 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02170 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02171 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02172 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02173 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02174 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02175 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02176 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02177 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02178 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz3987 = new StringBuilder ( T3 ) ; T5 = sbxyz3987 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02179 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02180 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02181 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02182 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest02183 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02184 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02185 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02186 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02187 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02188 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02189 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02190 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02191 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02192 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02193 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02194 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02195 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02196 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02197 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz29681 = new StringBuilder ( T3 ) ; T5 = sbxyz29681 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02198 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02199 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02200 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02201 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02202 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02203 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a86025 = param ; StringBuilder b86025 = new StringBuilder ( a86025 ) ; b86025 . append ( " STRING " ) ; b86025 . replace ( b86025 . length ( ) - " STRING " . length ( ) , b86025 . length ( ) , " STRING " ) ; HashMap < String , Object > map86025 = new HashMap < String , Object > ( ) ; map86025 . put ( " STRING " , b86025 . toString ( ) ) ; String c86025 = ( String ) map86025 . get ( " STRING " ) ; String d86025 = c86025 . substring ( 0 , c86025 . length ( ) - 1 ) ; String e86025 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d86025 . getBytes ( ) ) ) ) ; String f86025 = e86025 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f86025 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02204 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a53941 = param ; StringBuilder b53941 = new StringBuilder ( a53941 ) ; b53941 . append ( " STRING " ) ; b53941 . replace ( b53941 . length ( ) - " STRING " . length ( ) , b53941 . length ( ) , " STRING " ) ; HashMap < String , Object > map53941 = new HashMap < String , Object > ( ) ; map53941 . put ( " STRING " , b53941 . toString ( ) ) ; String c53941 = ( String ) map53941 . get ( " STRING " ) ; String d53941 = c53941 . substring ( 0 , c53941 . length ( ) - 1 ) ; String e53941 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d53941 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g53941 = " STRING " ; String taintSrc = thing . doSomething ( g53941 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02205 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02206 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02207 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02208 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02209 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String a59305 = param ; StringBuilder b59305 = new StringBuilder ( a59305 ) ; b59305 . append ( " STRING " ) ; b59305 . replace ( b59305 . length ( ) - " STRING " . length ( ) , b59305 . length ( ) , " STRING " ) ; HashMap < String , Object > map59305 = new HashMap < String , Object > ( ) ; map59305 . put ( " STRING " , b59305 . toString ( ) ) ; String c59305 = ( String ) map59305 . get ( " STRING " ) ; String d59305 = c59305 . substring ( 0 , c59305 . length ( ) - 1 ) ; String e59305 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d59305 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g59305 = " STRING " ; String taintSrc = thing . doSomething ( g59305 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest02210 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest02211 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02212 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02213 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02214 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz1711 = new StringBuilder ( T3 ) ; T5 = sbxyz1711 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02215 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02216 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02217 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02218 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02219 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02220 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02733 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02734 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02735 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz13567 = new StringBuilder ( T3 ) ; T5 = sbxyz13567 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02736 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest02737 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a88277 = param ; StringBuilder b88277 = new StringBuilder ( a88277 ) ; b88277 . append ( " STRING " ) ; b88277 . replace ( b88277 . length ( ) - " STRING " . length ( ) , b88277 . length ( ) , " STRING " ) ; HashMap < String , Object > map88277 = new HashMap < String , Object > ( ) ; map88277 . put ( " STRING " , b88277 . toString ( ) ) ; String c88277 = ( String ) map88277 . get ( " STRING " ) ; String d88277 = c88277 . substring ( 0 , c88277 . length ( ) - 1 ) ; String e88277 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d88277 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g88277 = " STRING " ; String taintSrc = thing . doSomething ( g88277 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest02738 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02739 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02740 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02741 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest02742 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02743 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02744 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a10784 = param ; StringBuilder b10784 = new StringBuilder ( a10784 ) ; b10784 . append ( " STRING " ) ; b10784 . replace ( b10784 . length ( ) - " STRING " . length ( ) , b10784 . length ( ) , " STRING " ) ; HashMap < String , Object > map10784 = new HashMap < String , Object > ( ) ; map10784 . put ( " STRING " , b10784 . toString ( ) ) ; String c10784 = ( String ) map10784 . get ( " STRING " ) ; String d10784 = c10784 . substring ( 0 , c10784 . length ( ) - 1 ) ; String e10784 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d10784 . getBytes ( ) ) ) ) ; String f10784 = e10784 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f10784 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest02745 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02746 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02747 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02748 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02749 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz41645 = new StringBuilder ( T3 ) ; T5 = sbxyz41645 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02750 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02751 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02752 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02753 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02754 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02755 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02756 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest02757 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest02758 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest02759 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02760 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest02761 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a58908 = param ; StringBuilder b58908 = new StringBuilder ( a58908 ) ; b58908 . append ( " STRING " ) ; b58908 . replace ( b58908 . length ( ) - " STRING " . length ( ) , b58908 . length ( ) , " STRING " ) ; HashMap < String , Object > map58908 = new HashMap < String , Object > ( ) ; map58908 . put ( " STRING " , b58908 . toString ( ) ) ; String c58908 = ( String ) map58908 . get ( " STRING " ) ; String d58908 = c58908 . substring ( 0 , c58908 . length ( ) - 1 ) ; String e58908 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d58908 . getBytes ( ) ) ) ) ; String f58908 = e58908 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f58908 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02762 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest02763 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest02764 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest02765 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02766 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02767 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02768 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02769 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02770 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02771 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02772 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02773 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02774 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02775 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02776 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02777 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a45538 = param ; StringBuilder b45538 = new StringBuilder ( a45538 ) ; b45538 . append ( " STRING " ) ; b45538 . replace ( b45538 . length ( ) - " STRING " . length ( ) , b45538 . length ( ) , " STRING " ) ; HashMap < String , Object > map45538 = new HashMap < String , Object > ( ) ; map45538 . put ( " STRING " , b45538 . toString ( ) ) ; String c45538 = ( String ) map45538 . get ( " STRING " ) ; String d45538 = c45538 . substring ( 0 , c45538 . length ( ) - 1 ) ; String e45538 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d45538 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g45538 = " STRING " ; String taintSrc = thing . doSomething ( g45538 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02778 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02779 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02780 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02781 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02782 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02783 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest02784 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a73497 = param ; StringBuilder b73497 = new StringBuilder ( a73497 ) ; b73497 . append ( " STRING " ) ; b73497 . replace ( b73497 . length ( ) - " STRING " . length ( ) , b73497 . length ( ) , " STRING " ) ; HashMap < String , Object > map73497 = new HashMap < String , Object > ( ) ; map73497 . put ( " STRING " , b73497 . toString ( ) ) ; String c73497 = ( String ) map73497 . get ( " STRING " ) ; String d73497 = c73497 . substring ( 0 , c73497 . length ( ) - 1 ) ; String e73497 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d73497 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g73497 = " STRING " ; String taintSrc = thing . doSomething ( g73497 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest02785 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest02786 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02787 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02788 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02789 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02790 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02791 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02792 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02793 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02794 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz79845 = new StringBuilder ( T3 ) ; T5 = sbxyz79845 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02795 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02796 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02797 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02798 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02799 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02800 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a19688 = param ; StringBuilder b19688 = new StringBuilder ( a19688 ) ; b19688 . append ( " STRING " ) ; b19688 . replace ( b19688 . length ( ) - " STRING " . length ( ) , b19688 . length ( ) , " STRING " ) ; HashMap < String , Object > map19688 = new HashMap < String , Object > ( ) ; map19688 . put ( " STRING " , b19688 . toString ( ) ) ; String c19688 = ( String ) map19688 . get ( " STRING " ) ; String d19688 = c19688 . substring ( 0 , c19688 . length ( ) - 1 ) ; String e19688 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d19688 . getBytes ( ) ) ) ) ; String f19688 = e19688 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f19688 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02801 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02802 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02803 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a79036 = param ; StringBuilder b79036 = new StringBuilder ( a79036 ) ; b79036 . append ( " STRING " ) ; b79036 . replace ( b79036 . length ( ) - " STRING " . length ( ) , b79036 . length ( ) , " STRING " ) ; HashMap < String , Object > map79036 = new HashMap < String , Object > ( ) ; map79036 . put ( " STRING " , b79036 . toString ( ) ) ; String c79036 = ( String ) map79036 . get ( " STRING " ) ; String d79036 = c79036 . substring ( 0 , c79036 . length ( ) - 1 ) ; String e79036 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d79036 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g79036 = " STRING " ; String taintSrc = thing . doSomething ( g79036 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02804 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02805 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02806 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02807 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02808 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02809 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02810 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02811 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02812 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02813 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02814 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02815 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest02816 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02817 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02818 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02819 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02820 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02821 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02822 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02823 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02824 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02825 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02826 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a86474 = param ; StringBuilder b86474 = new StringBuilder ( a86474 ) ; b86474 . append ( " STRING " ) ; b86474 . replace ( b86474 . length ( ) - " STRING " . length ( ) , b86474 . length ( ) , " STRING " ) ; HashMap < String , Object > map86474 = new HashMap < String , Object > ( ) ; map86474 . put ( " STRING " , b86474 . toString ( ) ) ; String c86474 = ( String ) map86474 . get ( " STRING " ) ; String d86474 = c86474 . substring ( 0 , c86474 . length ( ) - 1 ) ; String e86474 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d86474 . getBytes ( ) ) ) ) ; String f86474 = e86474 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f86474 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest02827 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02828 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02829 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02830 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02831 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02832 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a30480 = param ; StringBuilder b30480 = new StringBuilder ( a30480 ) ; b30480 . append ( " STRING " ) ; b30480 . replace ( b30480 . length ( ) - " STRING " . length ( ) , b30480 . length ( ) , " STRING " ) ; HashMap < String , Object > map30480 = new HashMap < String , Object > ( ) ; map30480 . put ( " STRING " , b30480 . toString ( ) ) ; String c30480 = ( String ) map30480 . get ( " STRING " ) ; String d30480 = c30480 . substring ( 0 , c30480 . length ( ) - 1 ) ; String e30480 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d30480 . getBytes ( ) ) ) ) ; String f30480 = e30480 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f30480 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02833 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02834 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest02835 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02836 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest02837 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02838 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a56998 = param ; StringBuilder b56998 = new StringBuilder ( a56998 ) ; b56998 . append ( " STRING " ) ; b56998 . replace ( b56998 . length ( ) - " STRING " . length ( ) , b56998 . length ( ) , " STRING " ) ; HashMap < String , Object > map56998 = new HashMap < String , Object > ( ) ; map56998 . put ( " STRING " , b56998 . toString ( ) ) ; String c56998 = ( String ) map56998 . get ( " STRING " ) ; String d56998 = c56998 . substring ( 0 , c56998 . length ( ) - 1 ) ; String e56998 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d56998 . getBytes ( ) ) ) ) ; String f56998 = e56998 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f56998 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest02839 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02840 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest02841 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02842 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02843 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02844 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02845 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest02846 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02847 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest02848 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02849 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02850 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02851 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest02852 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String a91551 = param ; StringBuilder b91551 = new StringBuilder ( a91551 ) ; b91551 . append ( " STRING " ) ; b91551 . replace ( b91551 . length ( ) - " STRING " . length ( ) , b91551 . length ( ) , " STRING " ) ; HashMap < String , Object > map91551 = new HashMap < String , Object > ( ) ; map91551 . put ( " STRING " , b91551 . toString ( ) ) ; String c91551 = ( String ) map91551 . get ( " STRING " ) ; String d91551 = c91551 . substring ( 0 , c91551 . length ( ) - 1 ) ; String e91551 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d91551 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g91551 = " STRING " ; String taintSrc = thing . doSomething ( g91551 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest02853 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02854 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02855 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02856 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02857 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest02858 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03377 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest03378 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest03379 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest03380 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest03381 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a26420 = param ; StringBuilder b26420 = new StringBuilder ( a26420 ) ; b26420 . append ( " STRING " ) ; b26420 . replace ( b26420 . length ( ) - " STRING " . length ( ) , b26420 . length ( ) , " STRING " ) ; HashMap < String , Object > map26420 = new HashMap < String , Object > ( ) ; map26420 . put ( " STRING " , b26420 . toString ( ) ) ; String c26420 = ( String ) map26420 . get ( " STRING " ) ; String d26420 = c26420 . substring ( 0 , c26420 . length ( ) - 1 ) ; String e26420 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d26420 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g26420 = " STRING " ; String taintSrc = thing . doSomething ( g26420 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest03382 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest03383 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest03384 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest03385 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03386 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03387 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03388 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03389 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03390 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest03391 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest03392 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest03393 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest03394 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest03395 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest03396 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest03397 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03398 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a2878 = param ; StringBuilder b2878 = new StringBuilder ( a2878 ) ; b2878 . append ( " STRING " ) ; b2878 . replace ( b2878 . length ( ) - " STRING " . length ( ) , b2878 . length ( ) , " STRING " ) ; HashMap < String , Object > map2878 = new HashMap < String , Object > ( ) ; map2878 . put ( " STRING " , b2878 . toString ( ) ) ; String c2878 = ( String ) map2878 . get ( " STRING " ) ; String d2878 = c2878 . substring ( 0 , c2878 . length ( ) - 1 ) ; String e2878 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d2878 . getBytes ( ) ) ) ) ; String f2878 = e2878 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f2878 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03399 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03400 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a79619 = param ; StringBuilder b79619 = new StringBuilder ( a79619 ) ; b79619 . append ( " STRING " ) ; b79619 . replace ( b79619 . length ( ) - " STRING " . length ( ) , b79619 . length ( ) , " STRING " ) ; HashMap < String , Object > map79619 = new HashMap < String , Object > ( ) ; map79619 . put ( " STRING " , b79619 . toString ( ) ) ; String c79619 = ( String ) map79619 . get ( " STRING " ) ; String d79619 = c79619 . substring ( 0 , c79619 . length ( ) - 1 ) ; String e79619 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d79619 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g79619 = " STRING " ; String taintSrc = thing . doSomething ( g79619 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest03401 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest03402 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03403 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03404 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03405 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03406 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03407 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03408 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03409 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03410 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03411 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a40527 = param ; StringBuilder b40527 = new StringBuilder ( a40527 ) ; b40527 . append ( " STRING " ) ; b40527 . replace ( b40527 . length ( ) - " STRING " . length ( ) , b40527 . length ( ) , " STRING " ) ; HashMap < String , Object > map40527 = new HashMap < String , Object > ( ) ; map40527 . put ( " STRING " , b40527 . toString ( ) ) ; String c40527 = ( String ) map40527 . get ( " STRING " ) ; String d40527 = c40527 . substring ( 0 , c40527 . length ( ) - 1 ) ; String e40527 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d40527 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g40527 = " STRING " ; String taintSrc = thing . doSomething ( g40527 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest03412 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest03413 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03414 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03415 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz86251 = new StringBuilder ( taintSrc ) ; T4 = sbxyz86251 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03416 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03417 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest03418 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz88339 = new StringBuilder ( taintSrc ) ; T4 = sbxyz88339 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest03419 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest03420 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest03421 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03422 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03423 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a40099 = param ; StringBuilder b40099 = new StringBuilder ( a40099 ) ; b40099 . append ( " STRING " ) ; b40099 . replace ( b40099 . length ( ) - " STRING " . length ( ) , b40099 . length ( ) , " STRING " ) ; HashMap < String , Object > map40099 = new HashMap < String , Object > ( ) ; map40099 . put ( " STRING " , b40099 . toString ( ) ) ; String c40099 = ( String ) map40099 . get ( " STRING " ) ; String d40099 = c40099 . substring ( 0 , c40099 . length ( ) - 1 ) ; String e40099 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d40099 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g40099 = " STRING " ; String taintSrc = thing . doSomething ( g40099 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest03424 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03425 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03426 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03427 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03428 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03429 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03430 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03431 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a83724 = param ; StringBuilder b83724 = new StringBuilder ( a83724 ) ; b83724 . append ( " STRING " ) ; b83724 . replace ( b83724 . length ( ) - " STRING " . length ( ) , b83724 . length ( ) , " STRING " ) ; HashMap < String , Object > map83724 = new HashMap < String , Object > ( ) ; map83724 . put ( " STRING " , b83724 . toString ( ) ) ; String c83724 = ( String ) map83724 . get ( " STRING " ) ; String d83724 = c83724 . substring ( 0 , c83724 . length ( ) - 1 ) ; String e83724 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d83724 . getBytes ( ) ) ) ) ; String f83724 = e83724 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f83724 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest03432 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03433 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03434 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03435 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03436 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest03437 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03438 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03439 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03440 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03441 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest03442 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest03443 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03444 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03445 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03446 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest03447 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest03448 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest03449 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a17678 = param ; StringBuilder b17678 = new StringBuilder ( a17678 ) ; b17678 . append ( " STRING " ) ; b17678 . replace ( b17678 . length ( ) - " STRING " . length ( ) , b17678 . length ( ) , " STRING " ) ; HashMap < String , Object > map17678 = new HashMap < String , Object > ( ) ; map17678 . put ( " STRING " , b17678 . toString ( ) ) ; String c17678 = ( String ) map17678 . get ( " STRING " ) ; String d17678 = c17678 . substring ( 0 , c17678 . length ( ) - 1 ) ; String e17678 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d17678 . getBytes ( ) ) ) ) ; String f17678 = e17678 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f17678 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest03450 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03451 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03452 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03453 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03454 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03455 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03456 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03457 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest03458 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03459 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz90288 = new StringBuilder ( taintSrc ) ; T4 = sbxyz90288 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest03460 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03461 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a69055 = param ; StringBuilder b69055 = new StringBuilder ( a69055 ) ; b69055 . append ( " STRING " ) ; b69055 . replace ( b69055 . length ( ) - " STRING " . length ( ) , b69055 . length ( ) , " STRING " ) ; HashMap < String , Object > map69055 = new HashMap < String , Object > ( ) ; map69055 . put ( " STRING " , b69055 . toString ( ) ) ; String c69055 = ( String ) map69055 . get ( " STRING " ) ; String d69055 = c69055 . substring ( 0 , c69055 . length ( ) - 1 ) ; String e69055 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d69055 . getBytes ( ) ) ) ) ; String f69055 = e69055 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f69055 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03462 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest03463 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest03464 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a35411 = param ; StringBuilder b35411 = new StringBuilder ( a35411 ) ; b35411 . append ( " STRING " ) ; b35411 . replace ( b35411 . length ( ) - " STRING " . length ( ) , b35411 . length ( ) , " STRING " ) ; HashMap < String , Object > map35411 = new HashMap < String , Object > ( ) ; map35411 . put ( " STRING " , b35411 . toString ( ) ) ; String c35411 = ( String ) map35411 . get ( " STRING " ) ; String d35411 = c35411 . substring ( 0 , c35411 . length ( ) - 1 ) ; String e35411 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d35411 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g35411 = " STRING " ; String taintSrc = thing . doSomething ( g35411 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest03465 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03466 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03467 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest03468 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest03469 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest03470 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest03471 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest03472 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03473 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03474 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest03475 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String a70379 = param ; StringBuilder b70379 = new StringBuilder ( a70379 ) ; b70379 . append ( " STRING " ) ; b70379 . replace ( b70379 . length ( ) - " STRING " . length ( ) , b70379 . length ( ) , " STRING " ) ; HashMap < String , Object > map70379 = new HashMap < String , Object > ( ) ; map70379 . put ( " STRING " , b70379 . toString ( ) ) ; String c70379 = ( String ) map70379 . get ( " STRING " ) ; String d70379 = c70379 . substring ( 0 , c70379 . length ( ) - 1 ) ; String e70379 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d70379 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g70379 = " STRING " ; String taintSrc = thing . doSomething ( g70379 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest03476 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest03477 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04016 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest04017 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = HtmlUtils . htmlEscape ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04018 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04019 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar = T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04020 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04021 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04022 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest04023 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest04024 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest04025 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T4 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T4 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04026 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04027 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } StringBuilder T5 = new StringBuilder ( T4 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04028 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar = T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04029 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04030 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04031 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04032 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { StringBuilder sbxyz41048 = new StringBuilder ( T4 ) ; T5 = sbxyz41048 . replace ( T4 . length ( ) - " STRING " . length ( ) , T4 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04033 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { T5 = T4 . substring ( 0 , T4 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04034 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T4 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04035 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04036 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = HtmlUtils . htmlEscape ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04037 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } StringBuilder T5 = new StringBuilder ( T4 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04038 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T4 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04039 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04040 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest04041 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { StringBuilder sbxyz15040 = new StringBuilder ( T4 ) ; T5 = sbxyz15040 . replace ( T4 . length ( ) - " STRING " . length ( ) , T4 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04042 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { T5 = T4 . substring ( 0 , T4 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04043 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T4 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04044 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a23943 = param ; StringBuilder b23943 = new StringBuilder ( a23943 ) ; b23943 . append ( " STRING " ) ; b23943 . replace ( b23943 . length ( ) - " STRING " . length ( ) , b23943 . length ( ) , " STRING " ) ; HashMap < String , Object > map23943 = new HashMap < String , Object > ( ) ; map23943 . put ( " STRING " , b23943 . toString ( ) ) ; String c23943 = ( String ) map23943 . get ( " STRING " ) ; String d23943 = c23943 . substring ( 0 , c23943 . length ( ) - 1 ) ; String e23943 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d23943 . getBytes ( ) ) ) ) ; String f23943 = e23943 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f23943 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04045 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04046 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04047 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04048 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04049 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = HtmlUtils . htmlEscape ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04050 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { StringBuilder sbxyz28242 = new StringBuilder ( T4 ) ; T5 = sbxyz28242 . replace ( T4 . length ( ) - " STRING " . length ( ) , T4 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04051 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = StringEscapeUtils . escapeHtml ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04052 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T4 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T4 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04053 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04054 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a29076 = param ; StringBuilder b29076 = new StringBuilder ( a29076 ) ; b29076 . append ( " STRING " ) ; b29076 . replace ( b29076 . length ( ) - " STRING " . length ( ) , b29076 . length ( ) , " STRING " ) ; HashMap < String , Object > map29076 = new HashMap < String , Object > ( ) ; map29076 . put ( " STRING " , b29076 . toString ( ) ) ; String c29076 = ( String ) map29076 . get ( " STRING " ) ; String d29076 = c29076 . substring ( 0 , c29076 . length ( ) - 1 ) ; String e29076 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d29076 . getBytes ( ) ) ) ) ; String f29076 = e29076 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f29076 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04055 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04056 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04057 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04058 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { StringBuilder sbxyz65250 = new StringBuilder ( T4 ) ; T5 = sbxyz65250 . replace ( T4 . length ( ) - " STRING " . length ( ) , T4 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04059 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04060 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04061 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = HtmlUtils . htmlEscape ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04062 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } StringBuilder T5 = new StringBuilder ( T4 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04063 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T4 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T4 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest04064 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04065 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04066 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a43769 = param ; StringBuilder b43769 = new StringBuilder ( a43769 ) ; b43769 . append ( " STRING " ) ; b43769 . replace ( b43769 . length ( ) - " STRING " . length ( ) , b43769 . length ( ) , " STRING " ) ; HashMap < String , Object > map43769 = new HashMap < String , Object > ( ) ; map43769 . put ( " STRING " , b43769 . toString ( ) ) ; String c43769 = ( String ) map43769 . get ( " STRING " ) ; String d43769 = c43769 . substring ( 0 , c43769 . length ( ) - 1 ) ; String e43769 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d43769 . getBytes ( ) ) ) ) ; String f43769 = e43769 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f43769 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest04067 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T4 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T4 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04068 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = HtmlUtils . htmlEscape ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04069 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } StringBuilder T5 = new StringBuilder ( T4 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04070 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { StringBuilder sbxyz48145 = new StringBuilder ( T4 ) ; T5 = sbxyz48145 . replace ( T4 . length ( ) - " STRING " . length ( ) , T4 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04071 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = StringEscapeUtils . escapeHtml ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04072 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04073 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04074 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a40600 = param ; StringBuilder b40600 = new StringBuilder ( a40600 ) ; b40600 . append ( " STRING " ) ; b40600 . replace ( b40600 . length ( ) - " STRING " . length ( ) , b40600 . length ( ) , " STRING " ) ; HashMap < String , Object > map40600 = new HashMap < String , Object > ( ) ; map40600 . put ( " STRING " , b40600 . toString ( ) ) ; String c40600 = ( String ) map40600 . get ( " STRING " ) ; String d40600 = c40600 . substring ( 0 , c40600 . length ( ) - 1 ) ; String e40600 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d40600 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g40600 = " STRING " ; String taintSrc = thing . doSomething ( g40600 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest04075 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04076 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = StringEscapeUtils . escapeHtml ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04077 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { T5 = T4 . substring ( 0 , T4 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04078 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T4 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T4 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04079 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T4 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04080 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04081 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a13727 = param ; StringBuilder b13727 = new StringBuilder ( a13727 ) ; b13727 . append ( " STRING " ) ; b13727 . replace ( b13727 . length ( ) - " STRING " . length ( ) , b13727 . length ( ) , " STRING " ) ; HashMap < String , Object > map13727 = new HashMap < String , Object > ( ) ; map13727 . put ( " STRING " , b13727 . toString ( ) ) ; String c13727 = ( String ) map13727 . get ( " STRING " ) ; String d13727 = c13727 . substring ( 0 , c13727 . length ( ) - 1 ) ; String e13727 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d13727 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g13727 = " STRING " ; String taintSrc = thing . doSomething ( g13727 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04082 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } StringBuilder T5 = new StringBuilder ( T4 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04083 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04084 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04085 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a59631 = param ; StringBuilder b59631 = new StringBuilder ( a59631 ) ; b59631 . append ( " STRING " ) ; b59631 . replace ( b59631 . length ( ) - " STRING " . length ( ) , b59631 . length ( ) , " STRING " ) ; HashMap < String , Object > map59631 = new HashMap < String , Object > ( ) ; map59631 . put ( " STRING " , b59631 . toString ( ) ) ; String c59631 = ( String ) map59631 . get ( " STRING " ) ; String d59631 = c59631 . substring ( 0 , c59631 . length ( ) - 1 ) ; String e59631 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d59631 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g59631 = " STRING " ; String taintSrc = thing . doSomething ( g59631 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04086 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04087 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { T5 = T4 . substring ( 0 , T4 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04088 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04089 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04090 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest04091 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04092 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = HtmlUtils . htmlEscape ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04093 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T4 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T4 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest04094 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04095 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04096 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = StringEscapeUtils . escapeHtml ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04097 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { T5 = T4 . substring ( 0 , T4 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04098 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T4 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04099 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a56988 = param ; StringBuilder b56988 = new StringBuilder ( a56988 ) ; b56988 . append ( " STRING " ) ; b56988 . replace ( b56988 . length ( ) - " STRING " . length ( ) , b56988 . length ( ) , " STRING " ) ; HashMap < String , Object > map56988 = new HashMap < String , Object > ( ) ; map56988 . put ( " STRING " , b56988 . toString ( ) ) ; String c56988 = ( String ) map56988 . get ( " STRING " ) ; String d56988 = c56988 . substring ( 0 , c56988 . length ( ) - 1 ) ; String e56988 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d56988 . getBytes ( ) ) ) ) ; String f56988 = e56988 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f56988 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest04100 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04101 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04102 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04103 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a86675 = param ; StringBuilder b86675 = new StringBuilder ( a86675 ) ; b86675 . append ( " STRING " ) ; b86675 . replace ( b86675 . length ( ) - " STRING " . length ( ) , b86675 . length ( ) , " STRING " ) ; HashMap < String , Object > map86675 = new HashMap < String , Object > ( ) ; map86675 . put ( " STRING " , b86675 . toString ( ) ) ; String c86675 = ( String ) map86675 . get ( " STRING " ) ; String d86675 = c86675 . substring ( 0 , c86675 . length ( ) - 1 ) ; String e86675 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d86675 . getBytes ( ) ) ) ) ; String f86675 = e86675 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f86675 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04104 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T4 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04105 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04106 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 ; if ( T4 . length ( ) > 1 ) { StringBuilder sbxyz93652 = new StringBuilder ( T4 ) ; T5 = sbxyz93652 . replace ( T4 . length ( ) - " STRING " . length ( ) , T4 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04107 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T4 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T4 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04108 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04109 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04110 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a45486 = param ; StringBuilder b45486 = new StringBuilder ( a45486 ) ; b45486 . append ( " STRING " ) ; b45486 . replace ( b45486 . length ( ) - " STRING " . length ( ) , b45486 . length ( ) , " STRING " ) ; HashMap < String , Object > map45486 = new HashMap < String , Object > ( ) ; map45486 . put ( " STRING " , b45486 . toString ( ) ) ; String c45486 = ( String ) map45486 . get ( " STRING " ) ; String d45486 = c45486 . substring ( 0 , c45486 . length ( ) - 1 ) ; String e45486 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d45486 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g45486 = " STRING " ; String taintSrc = thing . doSomething ( g45486 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04111 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = T4 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04112 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = HtmlUtils . htmlEscape ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04113 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T4 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04114 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T4 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04115 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04116 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04117 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04118 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T4 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T4 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest04119 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04120 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T4 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04121 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String a16056 = param ; StringBuilder b16056 = new StringBuilder ( a16056 ) ; b16056 . append ( " STRING " ) ; b16056 . replace ( b16056 . length ( ) - " STRING " . length ( ) , b16056 . length ( ) , " STRING " ) ; HashMap < String , Object > map16056 = new HashMap < String , Object > ( ) ; map16056 . put ( " STRING " , b16056 . toString ( ) ) ; String c16056 = ( String ) map16056 . get ( " STRING " ) ; String d16056 = c16056 . substring ( 0 , c16056 . length ( ) - 1 ) ; String e16056 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d16056 . getBytes ( ) ) ) ) ; String f16056 = e16056 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f16056 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest04122 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04628 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04629 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04630 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04631 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz18639 = new StringBuilder ( T3 ) ; T5 = sbxyz18639 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04632 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest04633 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04634 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04635 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04636 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz52930 = new StringBuilder ( T3 ) ; T5 = sbxyz52930 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04637 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04638 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04639 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04640 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04641 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String a46979 = param ; StringBuilder b46979 = new StringBuilder ( a46979 ) ; b46979 . append ( " STRING " ) ; b46979 . replace ( b46979 . length ( ) - " STRING " . length ( ) , b46979 . length ( ) , " STRING " ) ; HashMap < String , Object > map46979 = new HashMap < String , Object > ( ) ; map46979 . put ( " STRING " , b46979 . toString ( ) ) ; String c46979 = ( String ) map46979 . get ( " STRING " ) ; String d46979 = c46979 . substring ( 0 , c46979 . length ( ) - 1 ) ; String e46979 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d46979 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g46979 = " STRING " ; String taintSrc = thing . doSomething ( g46979 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest04642 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04643 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04644 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest04645 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest04646 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest04647 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04648 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04649 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04650 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04651 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04652 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04653 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04654 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04655 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04656 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04657 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04658 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04659 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = ESAPI . encoder ( ) . encodeForHTML ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04660 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04661 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04662 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest04663 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest04664 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04665 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04666 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04667 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String a58989 = param ; StringBuilder b58989 = new StringBuilder ( a58989 ) ; b58989 . append ( " STRING " ) ; b58989 . replace ( b58989 . length ( ) - " STRING " . length ( ) , b58989 . length ( ) , " STRING " ) ; HashMap < String , Object > map58989 = new HashMap < String , Object > ( ) ; map58989 . put ( " STRING " , b58989 . toString ( ) ) ; String c58989 = ( String ) map58989 . get ( " STRING " ) ; String d58989 = c58989 . substring ( 0 , c58989 . length ( ) - 1 ) ; String e58989 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d58989 . getBytes ( ) ) ) ) ; String f58989 = e58989 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f58989 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest04668 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04669 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04670 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz37171 = new StringBuilder ( T3 ) ; T5 = sbxyz37171 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04671 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04672 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04673 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04674 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04675 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04676 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04677 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04678 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04679 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04680 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04681 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04682 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04683 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04684 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04685 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04686 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04687 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04688 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04689 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04690 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest04691 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04692 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04693 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04694 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String a44389 = param ; StringBuilder b44389 = new StringBuilder ( a44389 ) ; b44389 . append ( " STRING " ) ; b44389 . replace ( b44389 . length ( ) - " STRING " . length ( ) , b44389 . length ( ) , " STRING " ) ; HashMap < String , Object > map44389 = new HashMap < String , Object > ( ) ; map44389 . put ( " STRING " , b44389 . toString ( ) ) ; String c44389 = ( String ) map44389 . get ( " STRING " ) ; String d44389 = c44389 . substring ( 0 , c44389 . length ( ) - 1 ) ; String e44389 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d44389 . getBytes ( ) ) ) ) ; String f44389 = e44389 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f44389 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest04695 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04696 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04697 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04698 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04699 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04700 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04701 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04702 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04703 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04704 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04705 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04706 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04707 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04708 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04709 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04710 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { StringBuilder sbxyz59501 = new StringBuilder ( T3 ) ; T5 = sbxyz59501 . replace ( T3 . length ( ) - " STRING " . length ( ) , T3 . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest04711 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest04712 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04713 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar = T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04714 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04715 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String a86409 = param ; StringBuilder b86409 = new StringBuilder ( a86409 ) ; b86409 . append ( " STRING " ) ; b86409 . replace ( b86409 . length ( ) - " STRING " . length ( ) , b86409 . length ( ) , " STRING " ) ; HashMap < String , Object > map86409 = new HashMap < String , Object > ( ) ; map86409 . put ( " STRING " , b86409 . toString ( ) ) ; String c86409 = ( String ) map86409 . get ( " STRING " ) ; String d86409 = c86409 . substring ( 0 , c86409 . length ( ) - 1 ) ; String e86409 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d86409 . getBytes ( ) ) ) ) ; String f86409 = e86409 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f86409 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04716 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest04717 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = T3 ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = T3 ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest04718 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04719 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , T3 . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04720 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( T3 ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest04721 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest04722 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04723 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04724 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : T3 ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest04725 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = HtmlUtils . htmlEscape ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04726 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } StringBuilder T5 = new StringBuilder ( T3 ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04727 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = StringEscapeUtils . escapeHtml ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04728 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = T3 ; if ( T3 . length ( ) > 1 ) { T5 = T3 . substring ( 0 , T3 . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest04729 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = T3 ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05239 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05240 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05241 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05242 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05243 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05244 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05245 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05246 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest05247 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05248 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz87274 = new StringBuilder ( taintSrc ) ; U5 = sbxyz87274 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05249 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05250 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05251 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05252 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 1 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05253 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05254 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String a54251 = param ; StringBuilder b54251 = new StringBuilder ( a54251 ) ; b54251 . append ( " STRING " ) ; b54251 . replace ( b54251 . length ( ) - " STRING " . length ( ) , b54251 . length ( ) , " STRING " ) ; HashMap < String , Object > map54251 = new HashMap < String , Object > ( ) ; map54251 . put ( " STRING " , b54251 . toString ( ) ) ; String c54251 = ( String ) map54251 . get ( " STRING " ) ; String d54251 = c54251 . substring ( 0 , c54251 . length ( ) - 1 ) ; String e54251 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d54251 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g54251 = " STRING " ; String taintSrc = thing . doSomething ( g54251 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest05255 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz29277 = new StringBuilder ( taintSrc ) ; U5 = sbxyz29277 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05256 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05257 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05258 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05259 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05260 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05261 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String a30705 = param ; StringBuilder b30705 = new StringBuilder ( a30705 ) ; b30705 . append ( " STRING " ) ; b30705 . replace ( b30705 . length ( ) - " STRING " . length ( ) , b30705 . length ( ) , " STRING " ) ; HashMap < String , Object > map30705 = new HashMap < String , Object > ( ) ; map30705 . put ( " STRING " , b30705 . toString ( ) ) ; String c30705 = ( String ) map30705 . get ( " STRING " ) ; String d30705 = c30705 . substring ( 0 , c30705 . length ( ) - 1 ) ; String e30705 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d30705 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g30705 = " STRING " ; String taintSrc = thing . doSomething ( g30705 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest05262 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05263 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05264 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05265 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 1 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05266 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05267 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05268 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05269 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05270 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05271 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05272 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05273 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05274 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05275 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05276 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 1 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest05277 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05278 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05279 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05280 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05281 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05282 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String a46085 = param ; StringBuilder b46085 = new StringBuilder ( a46085 ) ; b46085 . append ( " STRING " ) ; b46085 . replace ( b46085 . length ( ) - " STRING " . length ( ) , b46085 . length ( ) , " STRING " ) ; HashMap < String , Object > map46085 = new HashMap < String , Object > ( ) ; map46085 . put ( " STRING " , b46085 . toString ( ) ) ; String c46085 = ( String ) map46085 . get ( " STRING " ) ; String d46085 = c46085 . substring ( 0 , c46085 . length ( ) - 1 ) ; String e46085 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d46085 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g46085 = " STRING " ; String taintSrc = thing . doSomething ( g46085 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest05283 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05284 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz56502 = new StringBuilder ( taintSrc ) ; U5 = sbxyz56502 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05285 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05286 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05287 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05288 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String a44046 = param ; StringBuilder b44046 = new StringBuilder ( a44046 ) ; b44046 . append ( " STRING " ) ; b44046 . replace ( b44046 . length ( ) - " STRING " . length ( ) , b44046 . length ( ) , " STRING " ) ; HashMap < String , Object > map44046 = new HashMap < String , Object > ( ) ; map44046 . put ( " STRING " , b44046 . toString ( ) ) ; String c44046 = ( String ) map44046 . get ( " STRING " ) ; String d44046 = c44046 . substring ( 0 , c44046 . length ( ) - 1 ) ; String e44046 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d44046 . getBytes ( ) ) ) ) ; String f44046 = e44046 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f44046 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest05289 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05290 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05291 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05292 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05293 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05294 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05295 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 1 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05296 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05297 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05298 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05299 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05300 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05301 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05302 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05303 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05304 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05305 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05306 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest05307 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05308 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05309 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05310 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05311 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz11508 = new StringBuilder ( taintSrc ) ; U5 = sbxyz11508 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05312 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05313 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05314 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 1 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05315 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05316 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05317 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String a30088 = param ; StringBuilder b30088 = new StringBuilder ( a30088 ) ; b30088 . append ( " STRING " ) ; b30088 . replace ( b30088 . length ( ) - " STRING " . length ( ) , b30088 . length ( ) , " STRING " ) ; HashMap < String , Object > map30088 = new HashMap < String , Object > ( ) ; map30088 . put ( " STRING " , b30088 . toString ( ) ) ; String c30088 = ( String ) map30088 . get ( " STRING " ) ; String d30088 = c30088 . substring ( 0 , c30088 . length ( ) - 1 ) ; String e30088 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d30088 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g30088 = " STRING " ; String taintSrc = thing . doSomething ( g30088 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest05318 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05319 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05320 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05321 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05322 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05323 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String a26507 = param ; StringBuilder b26507 = new StringBuilder ( a26507 ) ; b26507 . append ( " STRING " ) ; b26507 . replace ( b26507 . length ( ) - " STRING " . length ( ) , b26507 . length ( ) , " STRING " ) ; HashMap < String , Object > map26507 = new HashMap < String , Object > ( ) ; map26507 . put ( " STRING " , b26507 . toString ( ) ) ; String c26507 = ( String ) map26507 . get ( " STRING " ) ; String d26507 = c26507 . substring ( 0 , c26507 . length ( ) - 1 ) ; String e26507 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d26507 . getBytes ( ) ) ) ) ; String f26507 = e26507 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f26507 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05324 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String a19644 = param ; StringBuilder b19644 = new StringBuilder ( a19644 ) ; b19644 . append ( " STRING " ) ; b19644 . replace ( b19644 . length ( ) - " STRING " . length ( ) , b19644 . length ( ) , " STRING " ) ; HashMap < String , Object > map19644 = new HashMap < String , Object > ( ) ; map19644 . put ( " STRING " , b19644 . toString ( ) ) ; String c19644 = ( String ) map19644 . get ( " STRING " ) ; String d19644 = c19644 . substring ( 0 , c19644 . length ( ) - 1 ) ; String e19644 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d19644 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g19644 = " STRING " ; String taintSrc = thing . doSomething ( g19644 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05325 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05326 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05327 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05328 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String a40140 = param ; StringBuilder b40140 = new StringBuilder ( a40140 ) ; b40140 . append ( " STRING " ) ; b40140 . replace ( b40140 . length ( ) - " STRING " . length ( ) , b40140 . length ( ) , " STRING " ) ; HashMap < String , Object > map40140 = new HashMap < String , Object > ( ) ; map40140 . put ( " STRING " , b40140 . toString ( ) ) ; String c40140 = ( String ) map40140 . get ( " STRING " ) ; String d40140 = c40140 . substring ( 0 , c40140 . length ( ) - 1 ) ; String e40140 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d40140 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g40140 = " STRING " ; String taintSrc = thing . doSomething ( g40140 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05329 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05330 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05331 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05332 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05333 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05334 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05854 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05855 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05856 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05857 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05858 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05859 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05860 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest05861 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; StringBuilder T5 = new StringBuilder ( taintSrc ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05862 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest05863 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05864 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05865 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05866 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( taintSrc ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05867 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05868 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( taintSrc ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest05869 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05870 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T5 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest05871 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest05872 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05873 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05874 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05875 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest05876 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05877 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05878 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05879 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05880 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T5 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05881 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05882 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05883 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( taintSrc ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05884 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05885 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05886 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05887 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05888 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05889 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( taintSrc ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05890 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05891 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05892 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05893 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05894 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; StringBuilder T5 = new StringBuilder ( taintSrc ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05895 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz2231 = new StringBuilder ( taintSrc ) ; T5 = sbxyz2231 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05896 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T5 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05897 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05898 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05899 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05900 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05901 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05902 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05903 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05904 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05905 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05906 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05907 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05908 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; StringBuilder T5 = new StringBuilder ( taintSrc ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05909 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( taintSrc ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05910 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05911 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05912 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05913 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05914 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( taintSrc ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 0 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05915 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05916 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05917 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String a12635 = param ; StringBuilder b12635 = new StringBuilder ( a12635 ) ; b12635 . append ( " STRING " ) ; b12635 . replace ( b12635 . length ( ) - " STRING " . length ( ) , b12635 . length ( ) , " STRING " ) ; HashMap < String , Object > map12635 = new HashMap < String , Object > ( ) ; map12635 . put ( " STRING " , b12635 . toString ( ) ) ; String c12635 = ( String ) map12635 . get ( " STRING " ) ; String d12635 = c12635 . substring ( 0 , c12635 . length ( ) - 1 ) ; String e12635 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d12635 . getBytes ( ) ) ) ) ; String f12635 = e12635 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f12635 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest05918 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; List < String > T5 = new ArrayList < String > ( ) ; T5 . add ( " STRING " ) ; T5 . add ( taintSrc ) ; T5 . add ( " STRING " ) ; T5 . remove ( 0 ) ; String T6 = T5 . get ( 1 ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05919 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05920 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05921 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05922 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05923 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05924 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05925 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05926 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05927 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String a44666 = param ; StringBuilder b44666 = new StringBuilder ( a44666 ) ; b44666 . append ( " STRING " ) ; b44666 . replace ( b44666 . length ( ) - " STRING " . length ( ) , b44666 . length ( ) , " STRING " ) ; HashMap < String , Object > map44666 = new HashMap < String , Object > ( ) ; map44666 . put ( " STRING " , b44666 . toString ( ) ) ; String c44666 = ( String ) map44666 . get ( " STRING " ) ; String d44666 = c44666 . substring ( 0 , c44666 . length ( ) - 1 ) ; String e44666 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d44666 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g44666 = " STRING " ; String taintSrc = thing . doSomething ( g44666 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest05928 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05929 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05930 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; StringBuilder T5 = new StringBuilder ( taintSrc ) ; String T6 = T5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05931 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest05932 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05933 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = " STRING " ; HashMap < String , Object > T6 = new HashMap < String , Object > ( ) ; T6 . put ( " STRING " , " STRING " ) ; T6 . put ( " STRING " , taintSrc . toString ( ) ) ; T6 . put ( " STRING " , " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; T5 = ( String ) T6 . get ( " STRING " ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05934 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String a91594 = param ; StringBuilder b91594 = new StringBuilder ( a91594 ) ; b91594 . append ( " STRING " ) ; b91594 . replace ( b91594 . length ( ) - " STRING " . length ( ) , b91594 . length ( ) , " STRING " ) ; HashMap < String , Object > map91594 = new HashMap < String , Object > ( ) ; map91594 . put ( " STRING " , b91594 . toString ( ) ) ; String c91594 = ( String ) map91594 . get ( " STRING " ) ; String d91594 = c91594 . substring ( 0 , c91594 . length ( ) - 1 ) ; String e91594 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d91594 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g91594 = " STRING " ; String taintSrc = thing . doSomething ( g91594 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest05935 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz96095 = new StringBuilder ( taintSrc ) ; T5 = sbxyz96095 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05936 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest05937 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest05938 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05939 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest05940 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest05941 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String a80607 = param ; StringBuilder b80607 = new StringBuilder ( a80607 ) ; b80607 . append ( " STRING " ) ; b80607 . replace ( b80607 . length ( ) - " STRING " . length ( ) , b80607 . length ( ) , " STRING " ) ; HashMap < String , Object > map80607 = new HashMap < String , Object > ( ) ; map80607 . put ( " STRING " , b80607 . toString ( ) ) ; String c80607 = ( String ) map80607 . get ( " STRING " ) ; String d80607 = c80607 . substring ( 0 , c80607 . length ( ) - 1 ) ; String e80607 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d80607 . getBytes ( ) ) ) ) ; String f80607 = e80607 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f80607 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql ) ; } } } truepositive
public class BenchmarkTest05942 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05943 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05944 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz92279 = new StringBuilder ( taintSrc ) ; T5 = sbxyz92279 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest05945 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest05946 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06454 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest06455 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest06456 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest06457 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz9606 = new StringBuilder ( taintSrc ) ; T4 = sbxyz9606 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest06458 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06459 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06460 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06461 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06462 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06463 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest06464 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06465 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz51667 = new StringBuilder ( taintSrc ) ; T4 = sbxyz51667 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06466 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06467 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06468 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest06469 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a2689 = param ; StringBuilder b2689 = new StringBuilder ( a2689 ) ; b2689 . append ( " STRING " ) ; b2689 . replace ( b2689 . length ( ) - " STRING " . length ( ) , b2689 . length ( ) , " STRING " ) ; HashMap < String , Object > map2689 = new HashMap < String , Object > ( ) ; map2689 . put ( " STRING " , b2689 . toString ( ) ) ; String c2689 = ( String ) map2689 . get ( " STRING " ) ; String d2689 = c2689 . substring ( 0 , c2689 . length ( ) - 1 ) ; String e2689 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d2689 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g2689 = " STRING " ; String taintSrc = thing . doSomething ( g2689 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest06470 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest06471 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06472 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06473 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06474 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest06475 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest06476 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } truepositive
public class BenchmarkTest06477 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest06478 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06479 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06480 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06481 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest06482 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a85181 = param ; StringBuilder b85181 = new StringBuilder ( a85181 ) ; b85181 . append ( " STRING " ) ; b85181 . replace ( b85181 . length ( ) - " STRING " . length ( ) , b85181 . length ( ) , " STRING " ) ; HashMap < String , Object > map85181 = new HashMap < String , Object > ( ) ; map85181 . put ( " STRING " , b85181 . toString ( ) ) ; String c85181 = ( String ) map85181 . get ( " STRING " ) ; String d85181 = c85181 . substring ( 0 , c85181 . length ( ) - 1 ) ; String e85181 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d85181 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g85181 = " STRING " ; String taintSrc = thing . doSomething ( g85181 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest06483 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest06484 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz61278 = new StringBuilder ( taintSrc ) ; T4 = sbxyz61278 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } truepositive
public class BenchmarkTest06485 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06486 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06487 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06488 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06489 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest06490 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest06491 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a98578 = param ; StringBuilder b98578 = new StringBuilder ( a98578 ) ; b98578 . append ( " STRING " ) ; b98578 . replace ( b98578 . length ( ) - " STRING " . length ( ) , b98578 . length ( ) , " STRING " ) ; HashMap < String , Object > map98578 = new HashMap < String , Object > ( ) ; map98578 . put ( " STRING " , b98578 . toString ( ) ) ; String c98578 = ( String ) map98578 . get ( " STRING " ) ; String d98578 = c98578 . substring ( 0 , c98578 . length ( ) - 1 ) ; String e98578 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d98578 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g98578 = " STRING " ; String taintSrc = thing . doSomething ( g98578 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest06492 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06493 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06494 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a98313 = param ; StringBuilder b98313 = new StringBuilder ( a98313 ) ; b98313 . append ( " STRING " ) ; b98313 . replace ( b98313 . length ( ) - " STRING " . length ( ) , b98313 . length ( ) , " STRING " ) ; HashMap < String , Object > map98313 = new HashMap < String , Object > ( ) ; map98313 . put ( " STRING " , b98313 . toString ( ) ) ; String c98313 = ( String ) map98313 . get ( " STRING " ) ; String d98313 = c98313 . substring ( 0 , c98313 . length ( ) - 1 ) ; String e98313 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d98313 . getBytes ( ) ) ) ) ; String f98313 = e98313 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f98313 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06495 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06496 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest06497 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a54743 = param ; StringBuilder b54743 = new StringBuilder ( a54743 ) ; b54743 . append ( " STRING " ) ; b54743 . replace ( b54743 . length ( ) - " STRING " . length ( ) , b54743 . length ( ) , " STRING " ) ; HashMap < String , Object > map54743 = new HashMap < String , Object > ( ) ; map54743 . put ( " STRING " , b54743 . toString ( ) ) ; String c54743 = ( String ) map54743 . get ( " STRING " ) ; String d54743 = c54743 . substring ( 0 , c54743 . length ( ) - 1 ) ; String e54743 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d54743 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g54743 = " STRING " ; String taintSrc = thing . doSomething ( g54743 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest06498 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz60468 = new StringBuilder ( taintSrc ) ; T4 = sbxyz60468 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06499 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06500 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06501 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06502 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest06503 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest06504 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06505 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest06506 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06507 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06508 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest06509 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest06510 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06511 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06512 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06513 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06514 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06515 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest06516 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a64767 = param ; StringBuilder b64767 = new StringBuilder ( a64767 ) ; b64767 . append ( " STRING " ) ; b64767 . replace ( b64767 . length ( ) - " STRING " . length ( ) , b64767 . length ( ) , " STRING " ) ; HashMap < String , Object > map64767 = new HashMap < String , Object > ( ) ; map64767 . put ( " STRING " , b64767 . toString ( ) ) ; String c64767 = ( String ) map64767 . get ( " STRING " ) ; String d64767 = c64767 . substring ( 0 , c64767 . length ( ) - 1 ) ; String e64767 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d64767 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g64767 = " STRING " ; String taintSrc = thing . doSomething ( g64767 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest06517 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06518 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz22543 = new StringBuilder ( taintSrc ) ; T4 = sbxyz22543 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06519 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06520 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06521 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06522 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06523 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a21125 = param ; StringBuilder b21125 = new StringBuilder ( a21125 ) ; b21125 . append ( " STRING " ) ; b21125 . replace ( b21125 . length ( ) - " STRING " . length ( ) , b21125 . length ( ) , " STRING " ) ; HashMap < String , Object > map21125 = new HashMap < String , Object > ( ) ; map21125 . put ( " STRING " , b21125 . toString ( ) ) ; String c21125 = ( String ) map21125 . get ( " STRING " ) ; String d21125 = c21125 . substring ( 0 , c21125 . length ( ) - 1 ) ; String e21125 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d21125 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g21125 = " STRING " ; String taintSrc = thing . doSomething ( g21125 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest06524 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest06525 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06526 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06527 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest06528 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06529 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06530 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a18156 = param ; StringBuilder b18156 = new StringBuilder ( a18156 ) ; b18156 . append ( " STRING " ) ; b18156 . replace ( b18156 . length ( ) - " STRING " . length ( ) , b18156 . length ( ) , " STRING " ) ; HashMap < String , Object > map18156 = new HashMap < String , Object > ( ) ; map18156 . put ( " STRING " , b18156 . toString ( ) ) ; String c18156 = ( String ) map18156 . get ( " STRING " ) ; String d18156 = c18156 . substring ( 0 , c18156 . length ( ) - 1 ) ; String e18156 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d18156 . getBytes ( ) ) ) ) ; String f18156 = e18156 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f18156 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06531 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest06532 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06533 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06534 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06535 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06536 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a2510 = param ; StringBuilder b2510 = new StringBuilder ( a2510 ) ; b2510 . append ( " STRING " ) ; b2510 . replace ( b2510 . length ( ) - " STRING " . length ( ) , b2510 . length ( ) , " STRING " ) ; HashMap < String , Object > map2510 = new HashMap < String , Object > ( ) ; map2510 . put ( " STRING " , b2510 . toString ( ) ) ; String c2510 = ( String ) map2510 . get ( " STRING " ) ; String d2510 = c2510 . substring ( 0 , c2510 . length ( ) - 1 ) ; String e2510 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d2510 . getBytes ( ) ) ) ) ; String f2510 = e2510 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f2510 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06537 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest06538 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = " STRING " ; HashMap < String , Object > T5 = new HashMap < String , Object > ( ) ; T5 . put ( " STRING " , " STRING " ) ; T5 . put ( " STRING " , taintSrc . toString ( ) ) ; T5 . put ( " STRING " , " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; T4 = ( String ) T5 . get ( " STRING " ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest06539 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06540 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06541 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06542 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06543 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 0 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06544 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06545 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String a50829 = param ; StringBuilder b50829 = new StringBuilder ( a50829 ) ; b50829 . append ( " STRING " ) ; b50829 . replace ( b50829 . length ( ) - " STRING " . length ( ) , b50829 . length ( ) , " STRING " ) ; HashMap < String , Object > map50829 = new HashMap < String , Object > ( ) ; map50829 . put ( " STRING " , b50829 . toString ( ) ) ; String c50829 = ( String ) map50829 . get ( " STRING " ) ; String d50829 = c50829 . substring ( 0 , c50829 . length ( ) - 1 ) ; String e50829 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d50829 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g50829 = " STRING " ; String taintSrc = thing . doSomething ( g50829 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest06546 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest06547 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; StringBuilder T4 = new StringBuilder ( taintSrc ) ; String T5 = T4 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06548 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest06549 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06550 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest06551 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest06552 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06553 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06554 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } truepositive
public class BenchmarkTest06555 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06556 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest06557 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06558 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06559 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } truepositive
public class BenchmarkTest06560 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06561 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest06562 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest06563 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest06564 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06565 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { T4 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06566 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } truepositive
public class BenchmarkTest06567 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06568 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; List < String > T4 = new ArrayList < String > ( ) ; T4 . add ( " STRING " ) ; T4 . add ( taintSrc ) ; T4 . add ( " STRING " ) ; T4 . remove ( 0 ) ; String T5 = T4 . get ( 1 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest06569 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz69927 = new StringBuilder ( taintSrc ) ; T4 = sbxyz69927 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } truepositive
public class BenchmarkTest06570 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07086 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest07095 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07101 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest07102 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest07103 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } } falsepositive
public class BenchmarkTest07104 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest07105 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest07106 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest07107 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 1 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest07108 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest07109 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest07110 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz89690 = new StringBuilder ( taintSrc ) ; U5 = sbxyz89690 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest07111 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } } falsepositive
public class BenchmarkTest07112 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07113 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a20381 = param ; StringBuilder b20381 = new StringBuilder ( a20381 ) ; b20381 . append ( " STRING " ) ; b20381 . replace ( b20381 . length ( ) - " STRING " . length ( ) , b20381 . length ( ) , " STRING " ) ; HashMap < String , Object > map20381 = new HashMap < String , Object > ( ) ; map20381 . put ( " STRING " , b20381 . toString ( ) ) ; String c20381 = ( String ) map20381 . get ( " STRING " ) ; String d20381 = c20381 . substring ( 0 , c20381 . length ( ) - 1 ) ; String e20381 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d20381 . getBytes ( ) ) ) ) ; String f20381 = e20381 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f20381 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07114 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07115 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a70658 = param ; StringBuilder b70658 = new StringBuilder ( a70658 ) ; b70658 . append ( " STRING " ) ; b70658 . replace ( b70658 . length ( ) - " STRING " . length ( ) , b70658 . length ( ) , " STRING " ) ; HashMap < String , Object > map70658 = new HashMap < String , Object > ( ) ; map70658 . put ( " STRING " , b70658 . toString ( ) ) ; String c70658 = ( String ) map70658 . get ( " STRING " ) ; String d70658 = c70658 . substring ( 0 , c70658 . length ( ) - 1 ) ; String e70658 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d70658 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g70658 = " STRING " ; String taintSrc = thing . doSomething ( g70658 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07116 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07117 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07118 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { U5 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07119 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07120 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07121 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07122 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a98102 = param ; StringBuilder b98102 = new StringBuilder ( a98102 ) ; b98102 . append ( " STRING " ) ; b98102 . replace ( b98102 . length ( ) - " STRING " . length ( ) , b98102 . length ( ) , " STRING " ) ; HashMap < String , Object > map98102 = new HashMap < String , Object > ( ) ; map98102 . put ( " STRING " , b98102 . toString ( ) ) ; String c98102 = ( String ) map98102 . get ( " STRING " ) ; String d98102 = c98102 . substring ( 0 , c98102 . length ( ) - 1 ) ; String e98102 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d98102 . getBytes ( ) ) ) ) ; String f98102 = e98102 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f98102 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07123 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07124 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 1 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07125 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07126 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07127 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07128 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07129 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07130 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07131 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07132 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07133 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07134 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07135 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07136 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07137 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07138 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07139 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07140 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07141 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07142 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07143 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07144 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a16785 = param ; StringBuilder b16785 = new StringBuilder ( a16785 ) ; b16785 . append ( " STRING " ) ; b16785 . replace ( b16785 . length ( ) - " STRING " . length ( ) , b16785 . length ( ) , " STRING " ) ; HashMap < String , Object > map16785 = new HashMap < String , Object > ( ) ; map16785 . put ( " STRING " , b16785 . toString ( ) ) ; String c16785 = ( String ) map16785 . get ( " STRING " ) ; String d16785 = c16785 . substring ( 0 , c16785 . length ( ) - 1 ) ; String e16785 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d16785 . getBytes ( ) ) ) ) ; String f16785 = e16785 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f16785 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07145 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07146 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07147 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07148 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07149 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07150 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07151 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07152 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07153 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a60490 = param ; StringBuilder b60490 = new StringBuilder ( a60490 ) ; b60490 . append ( " STRING " ) ; b60490 . replace ( b60490 . length ( ) - " STRING " . length ( ) , b60490 . length ( ) , " STRING " ) ; HashMap < String , Object > map60490 = new HashMap < String , Object > ( ) ; map60490 . put ( " STRING " , b60490 . toString ( ) ) ; String c60490 = ( String ) map60490 . get ( " STRING " ) ; String d60490 = c60490 . substring ( 0 , c60490 . length ( ) - 1 ) ; String e60490 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d60490 . getBytes ( ) ) ) ) ; String f60490 = e60490 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f60490 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07154 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07155 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a70585 = param ; StringBuilder b70585 = new StringBuilder ( a70585 ) ; b70585 . append ( " STRING " ) ; b70585 . replace ( b70585 . length ( ) - " STRING " . length ( ) , b70585 . length ( ) , " STRING " ) ; HashMap < String , Object > map70585 = new HashMap < String , Object > ( ) ; map70585 . put ( " STRING " , b70585 . toString ( ) ) ; String c70585 = ( String ) map70585 . get ( " STRING " ) ; String d70585 = c70585 . substring ( 0 , c70585 . length ( ) - 1 ) ; String e70585 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d70585 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g70585 = " STRING " ; String taintSrc = thing . doSomething ( g70585 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( sql , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07156 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07157 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz57895 = new StringBuilder ( taintSrc ) ; U5 = sbxyz57895 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07158 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { U5 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07159 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07160 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07161 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07162 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07163 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07164 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07165 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07166 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07167 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07168 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07169 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07170 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07171 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07172 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07173 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07174 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07175 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07176 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a18874 = param ; StringBuilder b18874 = new StringBuilder ( a18874 ) ; b18874 . append ( " STRING " ) ; b18874 . replace ( b18874 . length ( ) - " STRING " . length ( ) , b18874 . length ( ) , " STRING " ) ; HashMap < String , Object > map18874 = new HashMap < String , Object > ( ) ; map18874 . put ( " STRING " , b18874 . toString ( ) ) ; String c18874 = ( String ) map18874 . get ( " STRING " ) ; String d18874 = c18874 . substring ( 0 , c18874 . length ( ) - 1 ) ; String e18874 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d18874 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g18874 = " STRING " ; String taintSrc = thing . doSomething ( g18874 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest07177 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07178 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = taintSrc ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = taintSrc ; break ; default : bar = " STRING " ; break ; } String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07179 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07180 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07181 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a60796 = param ; StringBuilder b60796 = new StringBuilder ( a60796 ) ; b60796 . append ( " STRING " ) ; b60796 . replace ( b60796 . length ( ) - " STRING " . length ( ) , b60796 . length ( ) , " STRING " ) ; HashMap < String , Object > map60796 = new HashMap < String , Object > ( ) ; map60796 . put ( " STRING " , b60796 . toString ( ) ) ; String c60796 = ( String ) map60796 . get ( " STRING " ) ; String d60796 = c60796 . substring ( 0 , c60796 . length ( ) - 1 ) ; String e60796 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d60796 . getBytes ( ) ) ) ) ; ThingInterface thing = ThingFactory . createThing ( ) ; String g60796 = " STRING " ; String taintSrc = thing . doSomething ( g60796 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07182 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { StringBuilder sbxyz86789 = new StringBuilder ( taintSrc ) ; U5 = sbxyz86789 . replace ( taintSrc . length ( ) - " STRING " . length ( ) , taintSrc . length ( ) , " STRING " ) . toString ( ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07183 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07184 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc ; if ( taintSrc . length ( ) > 1 ) { U5 = taintSrc . substring ( 0 , taintSrc . length ( ) - 1 ) ; } String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07185 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = taintSrc ; else bar = " STRING " ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } } falsepositive
public class BenchmarkTest07186 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; List < String > U5 = new ArrayList < String > ( ) ; U5 . add ( " STRING " ) ; U5 . add ( taintSrc ) ; U5 . add ( " STRING " ) ; U5 . remove ( 0 ) ; String U6 = U5 . get ( 0 ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07187 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07188 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07189 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07190 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = HtmlUtils . htmlEscape ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } } falsepositive
public class BenchmarkTest07191 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String bar = taintSrc ; String paramTaint = " STRING " + bar + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07192 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = ESAPI . encoder ( ) . encodeForHTML ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07193 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = " STRING " ; HashMap < String , Object > U6 = new HashMap < String , Object > ( ) ; U6 . put ( " STRING " , " STRING " ) ; U6 . put ( " STRING " , taintSrc . toString ( ) ) ; U6 . put ( " STRING " , " STRING " ) ; U5 = ( String ) U6 . get ( " STRING " ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07194 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = taintSrc . split ( " STRING " ) [ 0 ] ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07195 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07196 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = StringEscapeUtils . escapeHtml ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } } falsepositive
public class BenchmarkTest07197 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String a85012 = param ; StringBuilder b85012 = new StringBuilder ( a85012 ) ; b85012 . append ( " STRING " ) ; b85012 . replace ( b85012 . length ( ) - " STRING " . length ( ) , b85012 . length ( ) , " STRING " ) ; HashMap < String , Object > map85012 = new HashMap < String , Object > ( ) ; map85012 . put ( " STRING " , b85012 . toString ( ) ) ; String c85012 = ( String ) map85012 . get ( " STRING " ) ; String d85012 = c85012 . substring ( 0 , c85012 . length ( ) - 1 ) ; String e85012 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d85012 . getBytes ( ) ) ) ) ; String f85012 = e85012 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String taintSrc = thing . doSomething ( f85012 ) ; String sql = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( sql ) ; } } } falsepositive
public class BenchmarkTest07198 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; StringBuilder U5 = new StringBuilder ( taintSrc ) ; String U6 = U5 . append ( " STRING " ) . toString ( ) ; String paramTaint = " STRING " + U6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } } falsepositive
public class BenchmarkTest07714 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest07715 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest07716 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07717 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest07718 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map99481 = new HashMap < String , Object > ( ) ; map99481 . put ( " STRING " , " STRING " ) ; map99481 . put ( " STRING " , param . toString ( ) ) ; map99481 . put ( " STRING " , " STRING " ) ; bar = ( String ) map99481 . get ( " STRING " ) ; bar = ( String ) map99481 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest07719 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest07720 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest07721 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map40318 = new HashMap < String , Object > ( ) ; map40318 . put ( " STRING " , " STRING " ) ; map40318 . put ( " STRING " , param . toString ( ) ) ; map40318 . put ( " STRING " , " STRING " ) ; bar = ( String ) map40318 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest07722 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07723 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest07724 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest07725 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest07726 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest07727 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest07728 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest07729 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String a85305 = param ; StringBuilder b85305 = new StringBuilder ( a85305 ) ; b85305 . append ( " STRING " ) ; b85305 . replace ( b85305 . length ( ) - " STRING " . length ( ) , b85305 . length ( ) , " STRING " ) ; HashMap < String , Object > map85305 = new HashMap < String , Object > ( ) ; map85305 . put ( " STRING " , b85305 . toString ( ) ) ; String c85305 = ( String ) map85305 . get ( " STRING " ) ; String d85305 = c85305 . substring ( 0 , c85305 . length ( ) - 1 ) ; String e85305 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d85305 . getBytes ( ) ) ) ) ; String f85305 = e85305 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g85305 = " STRING " ; String bar = thing . doSomething ( g85305 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07730 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest07731 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07732 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest07733 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest07734 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz53738 = new StringBuilder ( param ) ; bar = sbxyz53738 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest07735 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07736 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest07737 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07738 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a2652 = param ; StringBuilder b2652 = new StringBuilder ( a2652 ) ; b2652 . append ( " STRING " ) ; b2652 . replace ( b2652 . length ( ) - " STRING " . length ( ) , b2652 . length ( ) , " STRING " ) ; HashMap < String , Object > map2652 = new HashMap < String , Object > ( ) ; map2652 . put ( " STRING " , b2652 . toString ( ) ) ; String c2652 = ( String ) map2652 . get ( " STRING " ) ; String d2652 = c2652 . substring ( 0 , c2652 . length ( ) - 1 ) ; String e2652 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d2652 . getBytes ( ) ) ) ) ; String f2652 = e2652 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f2652 ) ; return bar ; } } } truepositive
public class BenchmarkTest07739 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest07740 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a34325 = param ; StringBuilder b34325 = new StringBuilder ( a34325 ) ; b34325 . append ( " STRING " ) ; b34325 . replace ( b34325 . length ( ) - " STRING " . length ( ) , b34325 . length ( ) , " STRING " ) ; HashMap < String , Object > map34325 = new HashMap < String , Object > ( ) ; map34325 . put ( " STRING " , b34325 . toString ( ) ) ; String c34325 = ( String ) map34325 . get ( " STRING " ) ; String d34325 = c34325 . substring ( 0 , c34325 . length ( ) - 1 ) ; String e34325 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d34325 . getBytes ( ) ) ) ) ; String f34325 = e34325 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g34325 = " STRING " ; String bar = thing . doSomething ( g34325 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07741 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz76567 = new StringBuilder ( param ) ; String bar = sbxyz76567 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest07742 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest07743 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07744 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07745 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest07746 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07747 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz98123 = new StringBuilder ( param ) ; bar = sbxyz98123 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest07748 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07749 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest07750 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest07751 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a72844 = param ; StringBuilder b72844 = new StringBuilder ( a72844 ) ; b72844 . append ( " STRING " ) ; b72844 . replace ( b72844 . length ( ) - " STRING " . length ( ) , b72844 . length ( ) , " STRING " ) ; HashMap < String , Object > map72844 = new HashMap < String , Object > ( ) ; map72844 . put ( " STRING " , b72844 . toString ( ) ) ; String c72844 = ( String ) map72844 . get ( " STRING " ) ; String d72844 = c72844 . substring ( 0 , c72844 . length ( ) - 1 ) ; String e72844 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d72844 . getBytes ( ) ) ) ) ; String f72844 = e72844 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f72844 ) ; return bar ; } } } truepositive
public class BenchmarkTest07752 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07753 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest07754 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest07755 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest07756 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest07757 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a64073 = param ; StringBuilder b64073 = new StringBuilder ( a64073 ) ; b64073 . append ( " STRING " ) ; b64073 . replace ( b64073 . length ( ) - " STRING " . length ( ) , b64073 . length ( ) , " STRING " ) ; HashMap < String , Object > map64073 = new HashMap < String , Object > ( ) ; map64073 . put ( " STRING " , b64073 . toString ( ) ) ; String c64073 = ( String ) map64073 . get ( " STRING " ) ; String d64073 = c64073 . substring ( 0 , c64073 . length ( ) - 1 ) ; String e64073 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d64073 . getBytes ( ) ) ) ) ; String f64073 = e64073 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f64073 ) ; return bar ; } } } truepositive
public class BenchmarkTest07758 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest07759 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07760 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest07761 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07762 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest07763 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07764 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a39246 = param ; StringBuilder b39246 = new StringBuilder ( a39246 ) ; b39246 . append ( " STRING " ) ; b39246 . replace ( b39246 . length ( ) - " STRING " . length ( ) , b39246 . length ( ) , " STRING " ) ; HashMap < String , Object > map39246 = new HashMap < String , Object > ( ) ; map39246 . put ( " STRING " , b39246 . toString ( ) ) ; String c39246 = ( String ) map39246 . get ( " STRING " ) ; String d39246 = c39246 . substring ( 0 , c39246 . length ( ) - 1 ) ; String e39246 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d39246 . getBytes ( ) ) ) ) ; String f39246 = e39246 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g39246 = " STRING " ; String bar = thing . doSomething ( g39246 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07765 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest07766 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz66897 = new StringBuilder ( param ) ; String bar = sbxyz66897 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest07767 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07768 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest07769 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map88444 = new HashMap < String , Object > ( ) ; map88444 . put ( " STRING " , " STRING " ) ; map88444 . put ( " STRING " , param . toString ( ) ) ; map88444 . put ( " STRING " , " STRING " ) ; bar = ( String ) map88444 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest07770 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07771 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest07772 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a30341 = param ; StringBuilder b30341 = new StringBuilder ( a30341 ) ; b30341 . append ( " STRING " ) ; b30341 . replace ( b30341 . length ( ) - " STRING " . length ( ) , b30341 . length ( ) , " STRING " ) ; HashMap < String , Object > map30341 = new HashMap < String , Object > ( ) ; map30341 . put ( " STRING " , b30341 . toString ( ) ) ; String c30341 = ( String ) map30341 . get ( " STRING " ) ; String d30341 = c30341 . substring ( 0 , c30341 . length ( ) - 1 ) ; String e30341 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d30341 . getBytes ( ) ) ) ) ; String f30341 = e30341 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g30341 = " STRING " ; String bar = thing . doSomething ( g30341 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07773 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07774 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz50236 = new StringBuilder ( param ) ; String bar = sbxyz50236 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest07775 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest07776 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map43853 = new HashMap < String , Object > ( ) ; map43853 . put ( " STRING " , " STRING " ) ; map43853 . put ( " STRING " , param . toString ( ) ) ; map43853 . put ( " STRING " , " STRING " ) ; bar = ( String ) map43853 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest07777 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07778 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest07779 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest07780 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07781 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest07782 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest07783 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07784 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map8888 = new HashMap < String , Object > ( ) ; map8888 . put ( " STRING " , " STRING " ) ; map8888 . put ( " STRING " , param . toString ( ) ) ; map8888 . put ( " STRING " , " STRING " ) ; bar = ( String ) map8888 . get ( " STRING " ) ; bar = ( String ) map8888 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest07785 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest07786 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz99022 = new StringBuilder ( param ) ; String bar = sbxyz99022 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest07787 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a55985 = param ; StringBuilder b55985 = new StringBuilder ( a55985 ) ; b55985 . append ( " STRING " ) ; b55985 . replace ( b55985 . length ( ) - " STRING " . length ( ) , b55985 . length ( ) , " STRING " ) ; HashMap < String , Object > map55985 = new HashMap < String , Object > ( ) ; map55985 . put ( " STRING " , b55985 . toString ( ) ) ; String c55985 = ( String ) map55985 . get ( " STRING " ) ; String d55985 = c55985 . substring ( 0 , c55985 . length ( ) - 1 ) ; String e55985 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d55985 . getBytes ( ) ) ) ) ; String f55985 = e55985 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f55985 ) ; return bar ; } } } truepositive
public class BenchmarkTest07788 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07789 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map13345 = new HashMap < String , Object > ( ) ; map13345 . put ( " STRING " , " STRING " ) ; map13345 . put ( " STRING " , param . toString ( ) ) ; map13345 . put ( " STRING " , " STRING " ) ; bar = ( String ) map13345 . get ( " STRING " ) ; bar = ( String ) map13345 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest07790 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest07791 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07792 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz20268 = new StringBuilder ( param ) ; String bar = sbxyz20268 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest07793 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07794 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a54326 = param ; StringBuilder b54326 = new StringBuilder ( a54326 ) ; b54326 . append ( " STRING " ) ; b54326 . replace ( b54326 . length ( ) - " STRING " . length ( ) , b54326 . length ( ) , " STRING " ) ; HashMap < String , Object > map54326 = new HashMap < String , Object > ( ) ; map54326 . put ( " STRING " , b54326 . toString ( ) ) ; String c54326 = ( String ) map54326 . get ( " STRING " ) ; String d54326 = c54326 . substring ( 0 , c54326 . length ( ) - 1 ) ; String e54326 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d54326 . getBytes ( ) ) ) ) ; String f54326 = e54326 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f54326 ) ; return bar ; } } } truepositive
public class BenchmarkTest07795 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest07796 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest07797 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz75959 = new StringBuilder ( param ) ; bar = sbxyz75959 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest07798 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07799 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest07800 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a34244 = param ; StringBuilder b34244 = new StringBuilder ( a34244 ) ; b34244 . append ( " STRING " ) ; b34244 . replace ( b34244 . length ( ) - " STRING " . length ( ) , b34244 . length ( ) , " STRING " ) ; HashMap < String , Object > map34244 = new HashMap < String , Object > ( ) ; map34244 . put ( " STRING " , b34244 . toString ( ) ) ; String c34244 = ( String ) map34244 . get ( " STRING " ) ; String d34244 = c34244 . substring ( 0 , c34244 . length ( ) - 1 ) ; String e34244 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d34244 . getBytes ( ) ) ) ) ; String f34244 = e34244 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f34244 ) ; return bar ; } } } truepositive
public class BenchmarkTest07801 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest07802 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07803 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07804 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest07805 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07806 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest07807 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map19459 = new HashMap < String , Object > ( ) ; map19459 . put ( " STRING " , " STRING " ) ; map19459 . put ( " STRING " , param . toString ( ) ) ; map19459 . put ( " STRING " , " STRING " ) ; bar = ( String ) map19459 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest07808 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07809 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz67052 = new StringBuilder ( param ) ; bar = sbxyz67052 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest07810 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest07811 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map16774 = new HashMap < String , Object > ( ) ; map16774 . put ( " STRING " , " STRING " ) ; map16774 . put ( " STRING " , param . toString ( ) ) ; map16774 . put ( " STRING " , " STRING " ) ; bar = ( String ) map16774 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest07812 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07813 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest07814 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest07815 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest07816 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08361 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a60442 = param ; StringBuilder b60442 = new StringBuilder ( a60442 ) ; b60442 . append ( " STRING " ) ; b60442 . replace ( b60442 . length ( ) - " STRING " . length ( ) , b60442 . length ( ) , " STRING " ) ; HashMap < String , Object > map60442 = new HashMap < String , Object > ( ) ; map60442 . put ( " STRING " , b60442 . toString ( ) ) ; String c60442 = ( String ) map60442 . get ( " STRING " ) ; String d60442 = c60442 . substring ( 0 , c60442 . length ( ) - 1 ) ; String e60442 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d60442 . getBytes ( ) ) ) ) ; String f60442 = e60442 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f60442 ) ; return bar ; } } } truepositive
public class BenchmarkTest08362 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08363 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a59131 = param ; StringBuilder b59131 = new StringBuilder ( a59131 ) ; b59131 . append ( " STRING " ) ; b59131 . replace ( b59131 . length ( ) - " STRING " . length ( ) , b59131 . length ( ) , " STRING " ) ; HashMap < String , Object > map59131 = new HashMap < String , Object > ( ) ; map59131 . put ( " STRING " , b59131 . toString ( ) ) ; String c59131 = ( String ) map59131 . get ( " STRING " ) ; String d59131 = c59131 . substring ( 0 , c59131 . length ( ) - 1 ) ; String e59131 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d59131 . getBytes ( ) ) ) ) ; String f59131 = e59131 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g59131 = " STRING " ; String bar = thing . doSomething ( g59131 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08364 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest08365 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08366 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08367 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz31027 = new StringBuilder ( param ) ; String bar = sbxyz31027 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest08368 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08369 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map11970 = new HashMap < String , Object > ( ) ; map11970 . put ( " STRING " , " STRING " ) ; map11970 . put ( " STRING " , param . toString ( ) ) ; map11970 . put ( " STRING " , " STRING " ) ; bar = ( String ) map11970 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest08370 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a55316 = param ; StringBuilder b55316 = new StringBuilder ( a55316 ) ; b55316 . append ( " STRING " ) ; b55316 . replace ( b55316 . length ( ) - " STRING " . length ( ) , b55316 . length ( ) , " STRING " ) ; HashMap < String , Object > map55316 = new HashMap < String , Object > ( ) ; map55316 . put ( " STRING " , b55316 . toString ( ) ) ; String c55316 = ( String ) map55316 . get ( " STRING " ) ; String d55316 = c55316 . substring ( 0 , c55316 . length ( ) - 1 ) ; String e55316 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d55316 . getBytes ( ) ) ) ) ; String f55316 = e55316 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f55316 ) ; return bar ; } } } truepositive
public class BenchmarkTest08371 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08372 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08373 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest08374 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest08375 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest08376 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest08377 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map47392 = new HashMap < String , Object > ( ) ; map47392 . put ( " STRING " , " STRING " ) ; map47392 . put ( " STRING " , param . toString ( ) ) ; map47392 . put ( " STRING " , " STRING " ) ; bar = ( String ) map47392 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest08378 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a53278 = param ; StringBuilder b53278 = new StringBuilder ( a53278 ) ; b53278 . append ( " STRING " ) ; b53278 . replace ( b53278 . length ( ) - " STRING " . length ( ) , b53278 . length ( ) , " STRING " ) ; HashMap < String , Object > map53278 = new HashMap < String , Object > ( ) ; map53278 . put ( " STRING " , b53278 . toString ( ) ) ; String c53278 = ( String ) map53278 . get ( " STRING " ) ; String d53278 = c53278 . substring ( 0 , c53278 . length ( ) - 1 ) ; String e53278 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d53278 . getBytes ( ) ) ) ) ; String f53278 = e53278 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f53278 ) ; return bar ; } } } truepositive
public class BenchmarkTest08379 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08380 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08381 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest08382 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08383 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08384 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest08385 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest08386 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest08387 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08388 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08389 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz16329 = new StringBuilder ( param ) ; String bar = sbxyz16329 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest08390 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest08391 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map50924 = new HashMap < String , Object > ( ) ; map50924 . put ( " STRING " , " STRING " ) ; map50924 . put ( " STRING " , param . toString ( ) ) ; map50924 . put ( " STRING " , " STRING " ) ; bar = ( String ) map50924 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest08392 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a61885 = param ; StringBuilder b61885 = new StringBuilder ( a61885 ) ; b61885 . append ( " STRING " ) ; b61885 . replace ( b61885 . length ( ) - " STRING " . length ( ) , b61885 . length ( ) , " STRING " ) ; HashMap < String , Object > map61885 = new HashMap < String , Object > ( ) ; map61885 . put ( " STRING " , b61885 . toString ( ) ) ; String c61885 = ( String ) map61885 . get ( " STRING " ) ; String d61885 = c61885 . substring ( 0 , c61885 . length ( ) - 1 ) ; String e61885 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d61885 . getBytes ( ) ) ) ) ; String f61885 = e61885 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f61885 ) ; return bar ; } } } truepositive
public class BenchmarkTest08393 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map38525 = new HashMap < String , Object > ( ) ; map38525 . put ( " STRING " , " STRING " ) ; map38525 . put ( " STRING " , param . toString ( ) ) ; map38525 . put ( " STRING " , " STRING " ) ; bar = ( String ) map38525 . get ( " STRING " ) ; bar = ( String ) map38525 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest08394 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest08395 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08396 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08397 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08398 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08399 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map40639 = new HashMap < String , Object > ( ) ; map40639 . put ( " STRING " , " STRING " ) ; map40639 . put ( " STRING " , param . toString ( ) ) ; map40639 . put ( " STRING " , " STRING " ) ; bar = ( String ) map40639 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest08400 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest08401 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest08402 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz96136 = new StringBuilder ( param ) ; String bar = sbxyz96136 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest08403 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08404 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a36407 = param ; StringBuilder b36407 = new StringBuilder ( a36407 ) ; b36407 . append ( " STRING " ) ; b36407 . replace ( b36407 . length ( ) - " STRING " . length ( ) , b36407 . length ( ) , " STRING " ) ; HashMap < String , Object > map36407 = new HashMap < String , Object > ( ) ; map36407 . put ( " STRING " , b36407 . toString ( ) ) ; String c36407 = ( String ) map36407 . get ( " STRING " ) ; String d36407 = c36407 . substring ( 0 , c36407 . length ( ) - 1 ) ; String e36407 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d36407 . getBytes ( ) ) ) ) ; String f36407 = e36407 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f36407 ) ; return bar ; } } } truepositive
public class BenchmarkTest08405 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08406 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest08407 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08408 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a5629 = param ; StringBuilder b5629 = new StringBuilder ( a5629 ) ; b5629 . append ( " STRING " ) ; b5629 . replace ( b5629 . length ( ) - " STRING " . length ( ) , b5629 . length ( ) , " STRING " ) ; HashMap < String , Object > map5629 = new HashMap < String , Object > ( ) ; map5629 . put ( " STRING " , b5629 . toString ( ) ) ; String c5629 = ( String ) map5629 . get ( " STRING " ) ; String d5629 = c5629 . substring ( 0 , c5629 . length ( ) - 1 ) ; String e5629 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d5629 . getBytes ( ) ) ) ) ; String f5629 = e5629 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g5629 = " STRING " ; String bar = thing . doSomething ( g5629 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08409 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08410 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08411 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest08412 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08413 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08414 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map97113 = new HashMap < String , Object > ( ) ; map97113 . put ( " STRING " , " STRING " ) ; map97113 . put ( " STRING " , param . toString ( ) ) ; map97113 . put ( " STRING " , " STRING " ) ; bar = ( String ) map97113 . get ( " STRING " ) ; bar = ( String ) map97113 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest08415 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08416 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08417 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08418 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest08419 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest08420 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08421 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08422 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest08423 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08424 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz96953 = new StringBuilder ( param ) ; bar = sbxyz96953 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest08425 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest08426 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a72016 = param ; StringBuilder b72016 = new StringBuilder ( a72016 ) ; b72016 . append ( " STRING " ) ; b72016 . replace ( b72016 . length ( ) - " STRING " . length ( ) , b72016 . length ( ) , " STRING " ) ; HashMap < String , Object > map72016 = new HashMap < String , Object > ( ) ; map72016 . put ( " STRING " , b72016 . toString ( ) ) ; String c72016 = ( String ) map72016 . get ( " STRING " ) ; String d72016 = c72016 . substring ( 0 , c72016 . length ( ) - 1 ) ; String e72016 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d72016 . getBytes ( ) ) ) ) ; String f72016 = e72016 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f72016 ) ; return bar ; } } } truepositive
public class BenchmarkTest08427 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map90503 = new HashMap < String , Object > ( ) ; map90503 . put ( " STRING " , " STRING " ) ; map90503 . put ( " STRING " , param . toString ( ) ) ; map90503 . put ( " STRING " , " STRING " ) ; bar = ( String ) map90503 . get ( " STRING " ) ; bar = ( String ) map90503 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest08428 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest08429 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a1836 = param ; StringBuilder b1836 = new StringBuilder ( a1836 ) ; b1836 . append ( " STRING " ) ; b1836 . replace ( b1836 . length ( ) - " STRING " . length ( ) , b1836 . length ( ) , " STRING " ) ; HashMap < String , Object > map1836 = new HashMap < String , Object > ( ) ; map1836 . put ( " STRING " , b1836 . toString ( ) ) ; String c1836 = ( String ) map1836 . get ( " STRING " ) ; String d1836 = c1836 . substring ( 0 , c1836 . length ( ) - 1 ) ; String e1836 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d1836 . getBytes ( ) ) ) ) ; String f1836 = e1836 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g1836 = " STRING " ; String bar = thing . doSomething ( g1836 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08430 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz50469 = new StringBuilder ( param ) ; bar = sbxyz50469 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest08431 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08432 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest08433 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08434 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest08435 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a31781 = param ; StringBuilder b31781 = new StringBuilder ( a31781 ) ; b31781 . append ( " STRING " ) ; b31781 . replace ( b31781 . length ( ) - " STRING " . length ( ) , b31781 . length ( ) , " STRING " ) ; HashMap < String , Object > map31781 = new HashMap < String , Object > ( ) ; map31781 . put ( " STRING " , b31781 . toString ( ) ) ; String c31781 = ( String ) map31781 . get ( " STRING " ) ; String d31781 = c31781 . substring ( 0 , c31781 . length ( ) - 1 ) ; String e31781 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d31781 . getBytes ( ) ) ) ) ; String f31781 = e31781 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g31781 = " STRING " ; String bar = thing . doSomething ( g31781 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08436 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz37786 = new StringBuilder ( param ) ; String bar = sbxyz37786 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest08437 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08438 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a11794 = param ; StringBuilder b11794 = new StringBuilder ( a11794 ) ; b11794 . append ( " STRING " ) ; b11794 . replace ( b11794 . length ( ) - " STRING " . length ( ) , b11794 . length ( ) , " STRING " ) ; HashMap < String , Object > map11794 = new HashMap < String , Object > ( ) ; map11794 . put ( " STRING " , b11794 . toString ( ) ) ; String c11794 = ( String ) map11794 . get ( " STRING " ) ; String d11794 = c11794 . substring ( 0 , c11794 . length ( ) - 1 ) ; String e11794 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d11794 . getBytes ( ) ) ) ) ; String f11794 = e11794 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f11794 ) ; return bar ; } } } truepositive
public class BenchmarkTest08439 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest08440 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08441 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest08442 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08443 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map28592 = new HashMap < String , Object > ( ) ; map28592 . put ( " STRING " , " STRING " ) ; map28592 . put ( " STRING " , param . toString ( ) ) ; map28592 . put ( " STRING " , " STRING " ) ; bar = ( String ) map28592 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest08444 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a4087 = param ; StringBuilder b4087 = new StringBuilder ( a4087 ) ; b4087 . append ( " STRING " ) ; b4087 . replace ( b4087 . length ( ) - " STRING " . length ( ) , b4087 . length ( ) , " STRING " ) ; HashMap < String , Object > map4087 = new HashMap < String , Object > ( ) ; map4087 . put ( " STRING " , b4087 . toString ( ) ) ; String c4087 = ( String ) map4087 . get ( " STRING " ) ; String d4087 = c4087 . substring ( 0 , c4087 . length ( ) - 1 ) ; String e4087 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d4087 . getBytes ( ) ) ) ) ; String f4087 = e4087 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f4087 ) ; return bar ; } } } truepositive
public class BenchmarkTest08445 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map91609 = new HashMap < String , Object > ( ) ; map91609 . put ( " STRING " , " STRING " ) ; map91609 . put ( " STRING " , param . toString ( ) ) ; map91609 . put ( " STRING " , " STRING " ) ; bar = ( String ) map91609 . get ( " STRING " ) ; bar = ( String ) map91609 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest08446 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08447 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08448 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest08449 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a97751 = param ; StringBuilder b97751 = new StringBuilder ( a97751 ) ; b97751 . append ( " STRING " ) ; b97751 . replace ( b97751 . length ( ) - " STRING " . length ( ) , b97751 . length ( ) , " STRING " ) ; HashMap < String , Object > map97751 = new HashMap < String , Object > ( ) ; map97751 . put ( " STRING " , b97751 . toString ( ) ) ; String c97751 = ( String ) map97751 . get ( " STRING " ) ; String d97751 = c97751 . substring ( 0 , c97751 . length ( ) - 1 ) ; String e97751 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d97751 . getBytes ( ) ) ) ) ; String f97751 = e97751 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g97751 = " STRING " ; String bar = thing . doSomething ( g97751 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08450 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08451 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08452 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest08949 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest08950 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a65738 = param ; StringBuilder b65738 = new StringBuilder ( a65738 ) ; b65738 . append ( " STRING " ) ; b65738 . replace ( b65738 . length ( ) - " STRING " . length ( ) , b65738 . length ( ) , " STRING " ) ; HashMap < String , Object > map65738 = new HashMap < String , Object > ( ) ; map65738 . put ( " STRING " , b65738 . toString ( ) ) ; String c65738 = ( String ) map65738 . get ( " STRING " ) ; String d65738 = c65738 . substring ( 0 , c65738 . length ( ) - 1 ) ; String e65738 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d65738 . getBytes ( ) ) ) ) ; String f65738 = e65738 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f65738 ) ; return bar ; } } } truepositive
public class BenchmarkTest08951 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map97740 = new HashMap < String , Object > ( ) ; map97740 . put ( " STRING " , " STRING " ) ; map97740 . put ( " STRING " , param . toString ( ) ) ; map97740 . put ( " STRING " , " STRING " ) ; bar = ( String ) map97740 . get ( " STRING " ) ; bar = ( String ) map97740 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest08952 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest08953 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08954 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest08955 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest08956 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest08957 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08958 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz58246 = new StringBuilder ( param ) ; String bar = sbxyz58246 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest08959 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz35709 = new StringBuilder ( param ) ; bar = sbxyz35709 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest08960 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08961 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest08962 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest08963 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08964 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest08965 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a97672 = param ; StringBuilder b97672 = new StringBuilder ( a97672 ) ; b97672 . append ( " STRING " ) ; b97672 . replace ( b97672 . length ( ) - " STRING " . length ( ) , b97672 . length ( ) , " STRING " ) ; HashMap < String , Object > map97672 = new HashMap < String , Object > ( ) ; map97672 . put ( " STRING " , b97672 . toString ( ) ) ; String c97672 = ( String ) map97672 . get ( " STRING " ) ; String d97672 = c97672 . substring ( 0 , c97672 . length ( ) - 1 ) ; String e97672 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d97672 . getBytes ( ) ) ) ) ; String f97672 = e97672 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f97672 ) ; return bar ; } } } truepositive
public class BenchmarkTest08966 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08967 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08968 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08969 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08970 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08971 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest08972 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08973 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String a50743 = param ; StringBuilder b50743 = new StringBuilder ( a50743 ) ; b50743 . append ( " STRING " ) ; b50743 . replace ( b50743 . length ( ) - " STRING " . length ( ) , b50743 . length ( ) , " STRING " ) ; HashMap < String , Object > map50743 = new HashMap < String , Object > ( ) ; map50743 . put ( " STRING " , b50743 . toString ( ) ) ; String c50743 = ( String ) map50743 . get ( " STRING " ) ; String d50743 = c50743 . substring ( 0 , c50743 . length ( ) - 1 ) ; String e50743 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d50743 . getBytes ( ) ) ) ) ; String f50743 = e50743 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f50743 ) ; return bar ; } } } truepositive
public class BenchmarkTest08974 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest08975 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08976 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String a45292 = param ; StringBuilder b45292 = new StringBuilder ( a45292 ) ; b45292 . append ( " STRING " ) ; b45292 . replace ( b45292 . length ( ) - " STRING " . length ( ) , b45292 . length ( ) , " STRING " ) ; HashMap < String , Object > map45292 = new HashMap < String , Object > ( ) ; map45292 . put ( " STRING " , b45292 . toString ( ) ) ; String c45292 = ( String ) map45292 . get ( " STRING " ) ; String d45292 = c45292 . substring ( 0 , c45292 . length ( ) - 1 ) ; String e45292 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d45292 . getBytes ( ) ) ) ) ; String f45292 = e45292 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g45292 = " STRING " ; String bar = thing . doSomething ( g45292 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08977 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest08978 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08979 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08980 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest08981 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08982 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a36702 = param ; StringBuilder b36702 = new StringBuilder ( a36702 ) ; b36702 . append ( " STRING " ) ; b36702 . replace ( b36702 . length ( ) - " STRING " . length ( ) , b36702 . length ( ) , " STRING " ) ; HashMap < String , Object > map36702 = new HashMap < String , Object > ( ) ; map36702 . put ( " STRING " , b36702 . toString ( ) ) ; String c36702 = ( String ) map36702 . get ( " STRING " ) ; String d36702 = c36702 . substring ( 0 , c36702 . length ( ) - 1 ) ; String e36702 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d36702 . getBytes ( ) ) ) ) ; String f36702 = e36702 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f36702 ) ; return bar ; } } } truepositive
public class BenchmarkTest08983 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08984 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08985 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz81815 = new StringBuilder ( param ) ; String bar = sbxyz81815 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest08986 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest08987 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a22814 = param ; StringBuilder b22814 = new StringBuilder ( a22814 ) ; b22814 . append ( " STRING " ) ; b22814 . replace ( b22814 . length ( ) - " STRING " . length ( ) , b22814 . length ( ) , " STRING " ) ; HashMap < String , Object > map22814 = new HashMap < String , Object > ( ) ; map22814 . put ( " STRING " , b22814 . toString ( ) ) ; String c22814 = ( String ) map22814 . get ( " STRING " ) ; String d22814 = c22814 . substring ( 0 , c22814 . length ( ) - 1 ) ; String e22814 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d22814 . getBytes ( ) ) ) ) ; String f22814 = e22814 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f22814 ) ; return bar ; } } } truepositive
public class BenchmarkTest08988 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest08989 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08990 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest08991 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a13889 = param ; StringBuilder b13889 = new StringBuilder ( a13889 ) ; b13889 . append ( " STRING " ) ; b13889 . replace ( b13889 . length ( ) - " STRING " . length ( ) , b13889 . length ( ) , " STRING " ) ; HashMap < String , Object > map13889 = new HashMap < String , Object > ( ) ; map13889 . put ( " STRING " , b13889 . toString ( ) ) ; String c13889 = ( String ) map13889 . get ( " STRING " ) ; String d13889 = c13889 . substring ( 0 , c13889 . length ( ) - 1 ) ; String e13889 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d13889 . getBytes ( ) ) ) ) ; String f13889 = e13889 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g13889 = " STRING " ; String bar = thing . doSomething ( g13889 ) ; return bar ; } } } falsepositive
public class BenchmarkTest08992 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest08993 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest08994 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest08995 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz42208 = new StringBuilder ( param ) ; bar = sbxyz42208 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest08996 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest08997 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest08998 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest08999 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09000 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a63271 = param ; StringBuilder b63271 = new StringBuilder ( a63271 ) ; b63271 . append ( " STRING " ) ; b63271 . replace ( b63271 . length ( ) - " STRING " . length ( ) , b63271 . length ( ) , " STRING " ) ; HashMap < String , Object > map63271 = new HashMap < String , Object > ( ) ; map63271 . put ( " STRING " , b63271 . toString ( ) ) ; String c63271 = ( String ) map63271 . get ( " STRING " ) ; String d63271 = c63271 . substring ( 0 , c63271 . length ( ) - 1 ) ; String e63271 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d63271 . getBytes ( ) ) ) ) ; String f63271 = e63271 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f63271 ) ; return bar ; } } } truepositive
public class BenchmarkTest09001 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest09002 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09003 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz69906 = new StringBuilder ( param ) ; String bar = sbxyz69906 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09004 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest09005 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09006 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09007 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a3163 = param ; StringBuilder b3163 = new StringBuilder ( a3163 ) ; b3163 . append ( " STRING " ) ; b3163 . replace ( b3163 . length ( ) - " STRING " . length ( ) , b3163 . length ( ) , " STRING " ) ; HashMap < String , Object > map3163 = new HashMap < String , Object > ( ) ; map3163 . put ( " STRING " , b3163 . toString ( ) ) ; String c3163 = ( String ) map3163 . get ( " STRING " ) ; String d3163 = c3163 . substring ( 0 , c3163 . length ( ) - 1 ) ; String e3163 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d3163 . getBytes ( ) ) ) ) ; String f3163 = e3163 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f3163 ) ; return bar ; } } } truepositive
public class BenchmarkTest09008 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09009 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09010 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz6190 = new StringBuilder ( param ) ; String bar = sbxyz6190 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09011 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09012 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09013 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09014 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map91291 = new HashMap < String , Object > ( ) ; map91291 . put ( " STRING " , " STRING " ) ; map91291 . put ( " STRING " , param . toString ( ) ) ; map91291 . put ( " STRING " , " STRING " ) ; bar = ( String ) map91291 . get ( " STRING " ) ; bar = ( String ) map91291 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09015 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09016 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a885 = param ; StringBuilder b885 = new StringBuilder ( a885 ) ; b885 . append ( " STRING " ) ; b885 . replace ( b885 . length ( ) - " STRING " . length ( ) , b885 . length ( ) , " STRING " ) ; HashMap < String , Object > map885 = new HashMap < String , Object > ( ) ; map885 . put ( " STRING " , b885 . toString ( ) ) ; String c885 = ( String ) map885 . get ( " STRING " ) ; String d885 = c885 . substring ( 0 , c885 . length ( ) - 1 ) ; String e885 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d885 . getBytes ( ) ) ) ) ; String f885 = e885 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g885 = " STRING " ; String bar = thing . doSomething ( g885 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09017 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09018 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09019 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest09020 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09021 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map98277 = new HashMap < String , Object > ( ) ; map98277 . put ( " STRING " , " STRING " ) ; map98277 . put ( " STRING " , param . toString ( ) ) ; map98277 . put ( " STRING " , " STRING " ) ; bar = ( String ) map98277 . get ( " STRING " ) ; bar = ( String ) map98277 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09022 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a20258 = param ; StringBuilder b20258 = new StringBuilder ( a20258 ) ; b20258 . append ( " STRING " ) ; b20258 . replace ( b20258 . length ( ) - " STRING " . length ( ) , b20258 . length ( ) , " STRING " ) ; HashMap < String , Object > map20258 = new HashMap < String , Object > ( ) ; map20258 . put ( " STRING " , b20258 . toString ( ) ) ; String c20258 = ( String ) map20258 . get ( " STRING " ) ; String d20258 = c20258 . substring ( 0 , c20258 . length ( ) - 1 ) ; String e20258 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d20258 . getBytes ( ) ) ) ) ; String f20258 = e20258 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g20258 = " STRING " ; String bar = thing . doSomething ( g20258 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09023 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09024 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest09025 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09026 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest09027 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09028 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09029 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest09030 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09031 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map80994 = new HashMap < String , Object > ( ) ; map80994 . put ( " STRING " , " STRING " ) ; map80994 . put ( " STRING " , param . toString ( ) ) ; map80994 . put ( " STRING " , " STRING " ) ; bar = ( String ) map80994 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest09032 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a15923 = param ; StringBuilder b15923 = new StringBuilder ( a15923 ) ; b15923 . append ( " STRING " ) ; b15923 . replace ( b15923 . length ( ) - " STRING " . length ( ) , b15923 . length ( ) , " STRING " ) ; HashMap < String , Object > map15923 = new HashMap < String , Object > ( ) ; map15923 . put ( " STRING " , b15923 . toString ( ) ) ; String c15923 = ( String ) map15923 . get ( " STRING " ) ; String d15923 = c15923 . substring ( 0 , c15923 . length ( ) - 1 ) ; String e15923 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d15923 . getBytes ( ) ) ) ) ; String f15923 = e15923 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f15923 ) ; return bar ; } } } truepositive
public class BenchmarkTest09033 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09034 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09035 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest09036 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest09037 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09038 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz72563 = new StringBuilder ( param ) ; String bar = sbxyz72563 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09039 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09040 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09041 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09042 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map36331 = new HashMap < String , Object > ( ) ; map36331 . put ( " STRING " , " STRING " ) ; map36331 . put ( " STRING " , param . toString ( ) ) ; map36331 . put ( " STRING " , " STRING " ) ; bar = ( String ) map36331 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest09043 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map53380 = new HashMap < String , Object > ( ) ; map53380 . put ( " STRING " , " STRING " ) ; map53380 . put ( " STRING " , param . toString ( ) ) ; map53380 . put ( " STRING " , " STRING " ) ; bar = ( String ) map53380 . get ( " STRING " ) ; bar = ( String ) map53380 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09044 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09045 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09046 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest09047 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map80875 = new HashMap < String , Object > ( ) ; map80875 . put ( " STRING " , " STRING " ) ; map80875 . put ( " STRING " , param . toString ( ) ) ; map80875 . put ( " STRING " , " STRING " ) ; bar = ( String ) map80875 . get ( " STRING " ) ; bar = ( String ) map80875 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09048 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09049 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz13956 = new StringBuilder ( param ) ; bar = sbxyz13956 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest09050 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09051 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09052 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map61676 = new HashMap < String , Object > ( ) ; map61676 . put ( " STRING " , " STRING " ) ; map61676 . put ( " STRING " , param . toString ( ) ) ; map61676 . put ( " STRING " , " STRING " ) ; bar = ( String ) map61676 . get ( " STRING " ) ; bar = ( String ) map61676 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09053 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest09054 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09055 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz33880 = new StringBuilder ( param ) ; String bar = sbxyz33880 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09056 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09057 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest09058 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest09059 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09060 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09061 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest09062 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09063 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09064 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09065 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09066 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09067 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest09068 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09069 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09070 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09071 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09072 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map67634 = new HashMap < String , Object > ( ) ; map67634 . put ( " STRING " , " STRING " ) ; map67634 . put ( " STRING " , param . toString ( ) ) ; map67634 . put ( " STRING " , " STRING " ) ; bar = ( String ) map67634 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest09073 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09074 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09623 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09624 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a51324 = param ; StringBuilder b51324 = new StringBuilder ( a51324 ) ; b51324 . append ( " STRING " ) ; b51324 . replace ( b51324 . length ( ) - " STRING " . length ( ) , b51324 . length ( ) , " STRING " ) ; HashMap < String , Object > map51324 = new HashMap < String , Object > ( ) ; map51324 . put ( " STRING " , b51324 . toString ( ) ) ; String c51324 = ( String ) map51324 . get ( " STRING " ) ; String d51324 = c51324 . substring ( 0 , c51324 . length ( ) - 1 ) ; String e51324 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d51324 . getBytes ( ) ) ) ) ; String f51324 = e51324 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f51324 ) ; return bar ; } } } truepositive
public class BenchmarkTest09625 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map43903 = new HashMap < String , Object > ( ) ; map43903 . put ( " STRING " , " STRING " ) ; map43903 . put ( " STRING " , param . toString ( ) ) ; map43903 . put ( " STRING " , " STRING " ) ; bar = ( String ) map43903 . get ( " STRING " ) ; bar = ( String ) map43903 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09626 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz14010 = new StringBuilder ( param ) ; String bar = sbxyz14010 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09627 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09628 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest09629 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09630 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09631 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map39101 = new HashMap < String , Object > ( ) ; map39101 . put ( " STRING " , " STRING " ) ; map39101 . put ( " STRING " , param . toString ( ) ) ; map39101 . put ( " STRING " , " STRING " ) ; bar = ( String ) map39101 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest09632 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest09633 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz35465 = new StringBuilder ( param ) ; String bar = sbxyz35465 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09634 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest09635 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest09636 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09637 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09638 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09639 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09640 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09641 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest09642 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09643 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz10266 = new StringBuilder ( param ) ; String bar = sbxyz10266 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09644 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz79756 = new StringBuilder ( param ) ; bar = sbxyz79756 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest09645 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest09646 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest09647 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a95442 = param ; StringBuilder b95442 = new StringBuilder ( a95442 ) ; b95442 . append ( " STRING " ) ; b95442 . replace ( b95442 . length ( ) - " STRING " . length ( ) , b95442 . length ( ) , " STRING " ) ; HashMap < String , Object > map95442 = new HashMap < String , Object > ( ) ; map95442 . put ( " STRING " , b95442 . toString ( ) ) ; String c95442 = ( String ) map95442 . get ( " STRING " ) ; String d95442 = c95442 . substring ( 0 , c95442 . length ( ) - 1 ) ; String e95442 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d95442 . getBytes ( ) ) ) ) ; String f95442 = e95442 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f95442 ) ; return bar ; } } } truepositive
public class BenchmarkTest09648 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09649 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest09650 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz92487 = new StringBuilder ( param ) ; String bar = sbxyz92487 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09651 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz71437 = new StringBuilder ( param ) ; bar = sbxyz71437 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest09652 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09653 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09654 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest09655 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a15774 = param ; StringBuilder b15774 = new StringBuilder ( a15774 ) ; b15774 . append ( " STRING " ) ; b15774 . replace ( b15774 . length ( ) - " STRING " . length ( ) , b15774 . length ( ) , " STRING " ) ; HashMap < String , Object > map15774 = new HashMap < String , Object > ( ) ; map15774 . put ( " STRING " , b15774 . toString ( ) ) ; String c15774 = ( String ) map15774 . get ( " STRING " ) ; String d15774 = c15774 . substring ( 0 , c15774 . length ( ) - 1 ) ; String e15774 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d15774 . getBytes ( ) ) ) ) ; String f15774 = e15774 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g15774 = " STRING " ; String bar = thing . doSomething ( g15774 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09656 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz92507 = new StringBuilder ( param ) ; String bar = sbxyz92507 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09657 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz91881 = new StringBuilder ( param ) ; bar = sbxyz91881 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest09658 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09659 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09660 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09661 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map47295 = new HashMap < String , Object > ( ) ; map47295 . put ( " STRING " , " STRING " ) ; map47295 . put ( " STRING " , param . toString ( ) ) ; map47295 . put ( " STRING " , " STRING " ) ; bar = ( String ) map47295 . get ( " STRING " ) ; bar = ( String ) map47295 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09662 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09663 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz54257 = new StringBuilder ( param ) ; String bar = sbxyz54257 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09664 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09665 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09666 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09667 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map9621 = new HashMap < String , Object > ( ) ; map9621 . put ( " STRING " , " STRING " ) ; map9621 . put ( " STRING " , param . toString ( ) ) ; map9621 . put ( " STRING " , " STRING " ) ; bar = ( String ) map9621 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest09668 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map48111 = new HashMap < String , Object > ( ) ; map48111 . put ( " STRING " , " STRING " ) ; map48111 . put ( " STRING " , param . toString ( ) ) ; map48111 . put ( " STRING " , " STRING " ) ; bar = ( String ) map48111 . get ( " STRING " ) ; bar = ( String ) map48111 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09669 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a56926 = param ; StringBuilder b56926 = new StringBuilder ( a56926 ) ; b56926 . append ( " STRING " ) ; b56926 . replace ( b56926 . length ( ) - " STRING " . length ( ) , b56926 . length ( ) , " STRING " ) ; HashMap < String , Object > map56926 = new HashMap < String , Object > ( ) ; map56926 . put ( " STRING " , b56926 . toString ( ) ) ; String c56926 = ( String ) map56926 . get ( " STRING " ) ; String d56926 = c56926 . substring ( 0 , c56926 . length ( ) - 1 ) ; String e56926 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d56926 . getBytes ( ) ) ) ) ; String f56926 = e56926 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f56926 ) ; return bar ; } } } truepositive
public class BenchmarkTest09670 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a98907 = param ; StringBuilder b98907 = new StringBuilder ( a98907 ) ; b98907 . append ( " STRING " ) ; b98907 . replace ( b98907 . length ( ) - " STRING " . length ( ) , b98907 . length ( ) , " STRING " ) ; HashMap < String , Object > map98907 = new HashMap < String , Object > ( ) ; map98907 . put ( " STRING " , b98907 . toString ( ) ) ; String c98907 = ( String ) map98907 . get ( " STRING " ) ; String d98907 = c98907 . substring ( 0 , c98907 . length ( ) - 1 ) ; String e98907 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d98907 . getBytes ( ) ) ) ) ; String f98907 = e98907 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g98907 = " STRING " ; String bar = thing . doSomething ( g98907 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09671 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz60613 = new StringBuilder ( param ) ; bar = sbxyz60613 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest09672 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09673 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09674 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09675 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a10823 = param ; StringBuilder b10823 = new StringBuilder ( a10823 ) ; b10823 . append ( " STRING " ) ; b10823 . replace ( b10823 . length ( ) - " STRING " . length ( ) , b10823 . length ( ) , " STRING " ) ; HashMap < String , Object > map10823 = new HashMap < String , Object > ( ) ; map10823 . put ( " STRING " , b10823 . toString ( ) ) ; String c10823 = ( String ) map10823 . get ( " STRING " ) ; String d10823 = c10823 . substring ( 0 , c10823 . length ( ) - 1 ) ; String e10823 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d10823 . getBytes ( ) ) ) ) ; String f10823 = e10823 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g10823 = " STRING " ; String bar = thing . doSomething ( g10823 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09676 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09677 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a27498 = param ; StringBuilder b27498 = new StringBuilder ( a27498 ) ; b27498 . append ( " STRING " ) ; b27498 . replace ( b27498 . length ( ) - " STRING " . length ( ) , b27498 . length ( ) , " STRING " ) ; HashMap < String , Object > map27498 = new HashMap < String , Object > ( ) ; map27498 . put ( " STRING " , b27498 . toString ( ) ) ; String c27498 = ( String ) map27498 . get ( " STRING " ) ; String d27498 = c27498 . substring ( 0 , c27498 . length ( ) - 1 ) ; String e27498 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d27498 . getBytes ( ) ) ) ) ; String f27498 = e27498 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f27498 ) ; return bar ; } } } truepositive
public class BenchmarkTest09678 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09679 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09680 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09681 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz20045 = new StringBuilder ( param ) ; bar = sbxyz20045 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest09682 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09683 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09684 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09685 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09686 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a15585 = param ; StringBuilder b15585 = new StringBuilder ( a15585 ) ; b15585 . append ( " STRING " ) ; b15585 . replace ( b15585 . length ( ) - " STRING " . length ( ) , b15585 . length ( ) , " STRING " ) ; HashMap < String , Object > map15585 = new HashMap < String , Object > ( ) ; map15585 . put ( " STRING " , b15585 . toString ( ) ) ; String c15585 = ( String ) map15585 . get ( " STRING " ) ; String d15585 = c15585 . substring ( 0 , c15585 . length ( ) - 1 ) ; String e15585 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d15585 . getBytes ( ) ) ) ) ; String f15585 = e15585 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f15585 ) ; return bar ; } } } truepositive
public class BenchmarkTest09687 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09688 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map61738 = new HashMap < String , Object > ( ) ; map61738 . put ( " STRING " , " STRING " ) ; map61738 . put ( " STRING " , param . toString ( ) ) ; map61738 . put ( " STRING " , " STRING " ) ; bar = ( String ) map61738 . get ( " STRING " ) ; bar = ( String ) map61738 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09689 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09690 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a62790 = param ; StringBuilder b62790 = new StringBuilder ( a62790 ) ; b62790 . append ( " STRING " ) ; b62790 . replace ( b62790 . length ( ) - " STRING " . length ( ) , b62790 . length ( ) , " STRING " ) ; HashMap < String , Object > map62790 = new HashMap < String , Object > ( ) ; map62790 . put ( " STRING " , b62790 . toString ( ) ) ; String c62790 = ( String ) map62790 . get ( " STRING " ) ; String d62790 = c62790 . substring ( 0 , c62790 . length ( ) - 1 ) ; String e62790 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d62790 . getBytes ( ) ) ) ) ; String f62790 = e62790 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g62790 = " STRING " ; String bar = thing . doSomething ( g62790 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09691 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09692 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09693 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09694 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest09695 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09696 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09697 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09698 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map38557 = new HashMap < String , Object > ( ) ; map38557 . put ( " STRING " , " STRING " ) ; map38557 . put ( " STRING " , param . toString ( ) ) ; map38557 . put ( " STRING " , " STRING " ) ; bar = ( String ) map38557 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest09699 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map61345 = new HashMap < String , Object > ( ) ; map61345 . put ( " STRING " , " STRING " ) ; map61345 . put ( " STRING " , param . toString ( ) ) ; map61345 . put ( " STRING " , " STRING " ) ; bar = ( String ) map61345 . get ( " STRING " ) ; bar = ( String ) map61345 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest09700 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest09701 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest09702 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09703 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09704 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09705 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a45106 = param ; StringBuilder b45106 = new StringBuilder ( a45106 ) ; b45106 . append ( " STRING " ) ; b45106 . replace ( b45106 . length ( ) - " STRING " . length ( ) , b45106 . length ( ) , " STRING " ) ; HashMap < String , Object > map45106 = new HashMap < String , Object > ( ) ; map45106 . put ( " STRING " , b45106 . toString ( ) ) ; String c45106 = ( String ) map45106 . get ( " STRING " ) ; String d45106 = c45106 . substring ( 0 , c45106 . length ( ) - 1 ) ; String e45106 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d45106 . getBytes ( ) ) ) ) ; String f45106 = e45106 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f45106 ) ; return bar ; } } } truepositive
public class BenchmarkTest09706 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest09707 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz26447 = new StringBuilder ( param ) ; String bar = sbxyz26447 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09708 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest09709 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest09710 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09711 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest09712 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a50589 = param ; StringBuilder b50589 = new StringBuilder ( a50589 ) ; b50589 . append ( " STRING " ) ; b50589 . replace ( b50589 . length ( ) - " STRING " . length ( ) , b50589 . length ( ) , " STRING " ) ; HashMap < String , Object > map50589 = new HashMap < String , Object > ( ) ; map50589 . put ( " STRING " , b50589 . toString ( ) ) ; String c50589 = ( String ) map50589 . get ( " STRING " ) ; String d50589 = c50589 . substring ( 0 , c50589 . length ( ) - 1 ) ; String e50589 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d50589 . getBytes ( ) ) ) ) ; String f50589 = e50589 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f50589 ) ; return bar ; } } } truepositive
public class BenchmarkTest09713 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09714 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a18312 = param ; StringBuilder b18312 = new StringBuilder ( a18312 ) ; b18312 . append ( " STRING " ) ; b18312 . replace ( b18312 . length ( ) - " STRING " . length ( ) , b18312 . length ( ) , " STRING " ) ; HashMap < String , Object > map18312 = new HashMap < String , Object > ( ) ; map18312 . put ( " STRING " , b18312 . toString ( ) ) ; String c18312 = ( String ) map18312 . get ( " STRING " ) ; String d18312 = c18312 . substring ( 0 , c18312 . length ( ) - 1 ) ; String e18312 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d18312 . getBytes ( ) ) ) ) ; String f18312 = e18312 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g18312 = " STRING " ; String bar = thing . doSomething ( g18312 ) ; return bar ; } } } falsepositive
public class BenchmarkTest09715 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest09716 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest09717 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a11409 = param ; StringBuilder b11409 = new StringBuilder ( a11409 ) ; b11409 . append ( " STRING " ) ; b11409 . replace ( b11409 . length ( ) - " STRING " . length ( ) , b11409 . length ( ) , " STRING " ) ; HashMap < String , Object > map11409 = new HashMap < String , Object > ( ) ; map11409 . put ( " STRING " , b11409 . toString ( ) ) ; String c11409 = ( String ) map11409 . get ( " STRING " ) ; String d11409 = c11409 . substring ( 0 , c11409 . length ( ) - 1 ) ; String e11409 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d11409 . getBytes ( ) ) ) ) ; String f11409 = e11409 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f11409 ) ; return bar ; } } } truepositive
public class BenchmarkTest09718 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz5102 = new StringBuilder ( param ) ; String bar = sbxyz5102 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest09719 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest09720 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest09721 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest09722 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz93042 = new StringBuilder ( param ) ; bar = sbxyz93042 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest10207 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest10208 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest10209 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10210 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a13180 = param ; StringBuilder b13180 = new StringBuilder ( a13180 ) ; b13180 . append ( " STRING " ) ; b13180 . replace ( b13180 . length ( ) - " STRING " . length ( ) , b13180 . length ( ) , " STRING " ) ; HashMap < String , Object > map13180 = new HashMap < String , Object > ( ) ; map13180 . put ( " STRING " , b13180 . toString ( ) ) ; String c13180 = ( String ) map13180 . get ( " STRING " ) ; String d13180 = c13180 . substring ( 0 , c13180 . length ( ) - 1 ) ; String e13180 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d13180 . getBytes ( ) ) ) ) ; String f13180 = e13180 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f13180 ) ; return bar ; } } } truepositive
public class BenchmarkTest10211 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map6165 = new HashMap < String , Object > ( ) ; map6165 . put ( " STRING " , " STRING " ) ; map6165 . put ( " STRING " , param . toString ( ) ) ; map6165 . put ( " STRING " , " STRING " ) ; bar = ( String ) map6165 . get ( " STRING " ) ; bar = ( String ) map6165 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10212 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a55371 = param ; StringBuilder b55371 = new StringBuilder ( a55371 ) ; b55371 . append ( " STRING " ) ; b55371 . replace ( b55371 . length ( ) - " STRING " . length ( ) , b55371 . length ( ) , " STRING " ) ; HashMap < String , Object > map55371 = new HashMap < String , Object > ( ) ; map55371 . put ( " STRING " , b55371 . toString ( ) ) ; String c55371 = ( String ) map55371 . get ( " STRING " ) ; String d55371 = c55371 . substring ( 0 , c55371 . length ( ) - 1 ) ; String e55371 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d55371 . getBytes ( ) ) ) ) ; String f55371 = e55371 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g55371 = " STRING " ; String bar = thing . doSomething ( g55371 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10213 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest10214 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String a16664 = param ; StringBuilder b16664 = new StringBuilder ( a16664 ) ; b16664 . append ( " STRING " ) ; b16664 . replace ( b16664 . length ( ) - " STRING " . length ( ) , b16664 . length ( ) , " STRING " ) ; HashMap < String , Object > map16664 = new HashMap < String , Object > ( ) ; map16664 . put ( " STRING " , b16664 . toString ( ) ) ; String c16664 = ( String ) map16664 . get ( " STRING " ) ; String d16664 = c16664 . substring ( 0 , c16664 . length ( ) - 1 ) ; String e16664 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d16664 . getBytes ( ) ) ) ) ; String f16664 = e16664 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g16664 = " STRING " ; String bar = thing . doSomething ( g16664 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10215 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10216 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10217 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz65223 = new StringBuilder ( param ) ; String bar = sbxyz65223 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest10218 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10219 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest10220 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10221 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz60879 = new StringBuilder ( param ) ; String bar = sbxyz60879 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest10222 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10223 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest10224 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest10225 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map99265 = new HashMap < String , Object > ( ) ; map99265 . put ( " STRING " , " STRING " ) ; map99265 . put ( " STRING " , param . toString ( ) ) ; map99265 . put ( " STRING " , " STRING " ) ; bar = ( String ) map99265 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest10226 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map59059 = new HashMap < String , Object > ( ) ; map59059 . put ( " STRING " , " STRING " ) ; map59059 . put ( " STRING " , param . toString ( ) ) ; map59059 . put ( " STRING " , " STRING " ) ; bar = ( String ) map59059 . get ( " STRING " ) ; bar = ( String ) map59059 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10227 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a42255 = param ; StringBuilder b42255 = new StringBuilder ( a42255 ) ; b42255 . append ( " STRING " ) ; b42255 . replace ( b42255 . length ( ) - " STRING " . length ( ) , b42255 . length ( ) , " STRING " ) ; HashMap < String , Object > map42255 = new HashMap < String , Object > ( ) ; map42255 . put ( " STRING " , b42255 . toString ( ) ) ; String c42255 = ( String ) map42255 . get ( " STRING " ) ; String d42255 = c42255 . substring ( 0 , c42255 . length ( ) - 1 ) ; String e42255 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d42255 . getBytes ( ) ) ) ) ; String f42255 = e42255 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g42255 = " STRING " ; String bar = thing . doSomething ( g42255 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10228 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10229 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10230 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10231 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest10232 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest10233 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10234 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10235 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String a51465 = param ; StringBuilder b51465 = new StringBuilder ( a51465 ) ; b51465 . append ( " STRING " ) ; b51465 . replace ( b51465 . length ( ) - " STRING " . length ( ) , b51465 . length ( ) , " STRING " ) ; HashMap < String , Object > map51465 = new HashMap < String , Object > ( ) ; map51465 . put ( " STRING " , b51465 . toString ( ) ) ; String c51465 = ( String ) map51465 . get ( " STRING " ) ; String d51465 = c51465 . substring ( 0 , c51465 . length ( ) - 1 ) ; String e51465 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d51465 . getBytes ( ) ) ) ) ; String f51465 = e51465 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g51465 = " STRING " ; String bar = thing . doSomething ( g51465 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10236 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz89224 = new StringBuilder ( param ) ; String bar = sbxyz89224 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest10237 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz57948 = new StringBuilder ( param ) ; bar = sbxyz57948 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest10238 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest10239 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest10240 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest10241 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest10242 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map1709 = new HashMap < String , Object > ( ) ; map1709 . put ( " STRING " , " STRING " ) ; map1709 . put ( " STRING " , param . toString ( ) ) ; map1709 . put ( " STRING " , " STRING " ) ; bar = ( String ) map1709 . get ( " STRING " ) ; bar = ( String ) map1709 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10243 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a79548 = param ; StringBuilder b79548 = new StringBuilder ( a79548 ) ; b79548 . append ( " STRING " ) ; b79548 . replace ( b79548 . length ( ) - " STRING " . length ( ) , b79548 . length ( ) , " STRING " ) ; HashMap < String , Object > map79548 = new HashMap < String , Object > ( ) ; map79548 . put ( " STRING " , b79548 . toString ( ) ) ; String c79548 = ( String ) map79548 . get ( " STRING " ) ; String d79548 = c79548 . substring ( 0 , c79548 . length ( ) - 1 ) ; String e79548 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d79548 . getBytes ( ) ) ) ) ; String f79548 = e79548 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g79548 = " STRING " ; String bar = thing . doSomething ( g79548 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10244 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest10245 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10246 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest10247 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10248 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10249 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map87042 = new HashMap < String , Object > ( ) ; map87042 . put ( " STRING " , " STRING " ) ; map87042 . put ( " STRING " , param . toString ( ) ) ; map87042 . put ( " STRING " , " STRING " ) ; bar = ( String ) map87042 . get ( " STRING " ) ; bar = ( String ) map87042 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10250 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10251 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz41975 = new StringBuilder ( param ) ; bar = sbxyz41975 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest10252 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest10253 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10254 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a57233 = param ; StringBuilder b57233 = new StringBuilder ( a57233 ) ; b57233 . append ( " STRING " ) ; b57233 . replace ( b57233 . length ( ) - " STRING " . length ( ) , b57233 . length ( ) , " STRING " ) ; HashMap < String , Object > map57233 = new HashMap < String , Object > ( ) ; map57233 . put ( " STRING " , b57233 . toString ( ) ) ; String c57233 = ( String ) map57233 . get ( " STRING " ) ; String d57233 = c57233 . substring ( 0 , c57233 . length ( ) - 1 ) ; String e57233 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d57233 . getBytes ( ) ) ) ) ; String f57233 = e57233 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g57233 = " STRING " ; String bar = thing . doSomething ( g57233 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10255 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10256 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest10257 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10258 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest10259 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz39480 = new StringBuilder ( param ) ; bar = sbxyz39480 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } truepositive
public class BenchmarkTest10260 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10261 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10262 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10263 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz59164 = new StringBuilder ( param ) ; String bar = sbxyz59164 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest10264 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest10265 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10266 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest10267 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest10268 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } truepositive
public class BenchmarkTest10269 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10270 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a85942 = param ; StringBuilder b85942 = new StringBuilder ( a85942 ) ; b85942 . append ( " STRING " ) ; b85942 . replace ( b85942 . length ( ) - " STRING " . length ( ) , b85942 . length ( ) , " STRING " ) ; HashMap < String , Object > map85942 = new HashMap < String , Object > ( ) ; map85942 . put ( " STRING " , b85942 . toString ( ) ) ; String c85942 = ( String ) map85942 . get ( " STRING " ) ; String d85942 = c85942 . substring ( 0 , c85942 . length ( ) - 1 ) ; String e85942 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d85942 . getBytes ( ) ) ) ) ; String f85942 = e85942 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f85942 ) ; return bar ; } } } truepositive
public class BenchmarkTest10271 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest10272 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest10273 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10274 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest10275 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map93878 = new HashMap < String , Object > ( ) ; map93878 . put ( " STRING " , " STRING " ) ; map93878 . put ( " STRING " , param . toString ( ) ) ; map93878 . put ( " STRING " , " STRING " ) ; bar = ( String ) map93878 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest10276 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest10277 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest10278 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map35079 = new HashMap < String , Object > ( ) ; map35079 . put ( " STRING " , " STRING " ) ; map35079 . put ( " STRING " , param . toString ( ) ) ; map35079 . put ( " STRING " , " STRING " ) ; bar = ( String ) map35079 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest10279 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map43388 = new HashMap < String , Object > ( ) ; map43388 . put ( " STRING " , " STRING " ) ; map43388 . put ( " STRING " , param . toString ( ) ) ; map43388 . put ( " STRING " , " STRING " ) ; bar = ( String ) map43388 . get ( " STRING " ) ; bar = ( String ) map43388 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10280 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } truepositive
public class BenchmarkTest10281 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10282 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map92007 = new HashMap < String , Object > ( ) ; map92007 . put ( " STRING " , " STRING " ) ; map92007 . put ( " STRING " , param . toString ( ) ) ; map92007 . put ( " STRING " , " STRING " ) ; bar = ( String ) map92007 . get ( " STRING " ) ; return bar ; } } } truepositive
public class BenchmarkTest10283 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest10284 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10285 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10286 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10287 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } truepositive
public class BenchmarkTest10288 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10289 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10290 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10291 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } truepositive
public class BenchmarkTest10292 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz43977 = new StringBuilder ( param ) ; String bar = sbxyz43977 . append ( " STRING " ) . toString ( ) ; return bar ; } } } truepositive
public class BenchmarkTest10293 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } truepositive
public class BenchmarkTest10294 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10295 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } truepositive
public class BenchmarkTest10296 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } truepositive
public class BenchmarkTest10297 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } truepositive
public class BenchmarkTest10298 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10299 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a3308 = param ; StringBuilder b3308 = new StringBuilder ( a3308 ) ; b3308 . append ( " STRING " ) ; b3308 . replace ( b3308 . length ( ) - " STRING " . length ( ) , b3308 . length ( ) , " STRING " ) ; HashMap < String , Object > map3308 = new HashMap < String , Object > ( ) ; map3308 . put ( " STRING " , b3308 . toString ( ) ) ; String c3308 = ( String ) map3308 . get ( " STRING " ) ; String d3308 = c3308 . substring ( 0 , c3308 . length ( ) - 1 ) ; String e3308 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d3308 . getBytes ( ) ) ) ) ; String f3308 = e3308 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g3308 = " STRING " ; String bar = thing . doSomething ( g3308 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10300 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } truepositive
public class BenchmarkTest10308 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10847 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10854 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10856 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10857 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map6682 = new HashMap < String , Object > ( ) ; map6682 . put ( " STRING " , " STRING " ) ; map6682 . put ( " STRING " , param . toString ( ) ) ; map6682 . put ( " STRING " , " STRING " ) ; bar = ( String ) map6682 . get ( " STRING " ) ; bar = ( String ) map6682 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10864 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10871 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10872 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10880 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10884 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a33902 = param ; StringBuilder b33902 = new StringBuilder ( a33902 ) ; b33902 . append ( " STRING " ) ; b33902 . replace ( b33902 . length ( ) - " STRING " . length ( ) , b33902 . length ( ) , " STRING " ) ; HashMap < String , Object > map33902 = new HashMap < String , Object > ( ) ; map33902 . put ( " STRING " , b33902 . toString ( ) ) ; String c33902 = ( String ) map33902 . get ( " STRING " ) ; String d33902 = c33902 . substring ( 0 , c33902 . length ( ) - 1 ) ; String e33902 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d33902 . getBytes ( ) ) ) ) ; String f33902 = e33902 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g33902 = " STRING " ; String bar = thing . doSomething ( g33902 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10889 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10893 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a83401 = param ; StringBuilder b83401 = new StringBuilder ( a83401 ) ; b83401 . append ( " STRING " ) ; b83401 . replace ( b83401 . length ( ) - " STRING " . length ( ) , b83401 . length ( ) , " STRING " ) ; HashMap < String , Object > map83401 = new HashMap < String , Object > ( ) ; map83401 . put ( " STRING " , b83401 . toString ( ) ) ; String c83401 = ( String ) map83401 . get ( " STRING " ) ; String d83401 = c83401 . substring ( 0 , c83401 . length ( ) - 1 ) ; String e83401 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d83401 . getBytes ( ) ) ) ) ; String f83401 = e83401 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g83401 = " STRING " ; String bar = thing . doSomething ( g83401 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10897 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10898 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a8695 = param ; StringBuilder b8695 = new StringBuilder ( a8695 ) ; b8695 . append ( " STRING " ) ; b8695 . replace ( b8695 . length ( ) - " STRING " . length ( ) , b8695 . length ( ) , " STRING " ) ; HashMap < String , Object > map8695 = new HashMap < String , Object > ( ) ; map8695 . put ( " STRING " , b8695 . toString ( ) ) ; String c8695 = ( String ) map8695 . get ( " STRING " ) ; String d8695 = c8695 . substring ( 0 , c8695 . length ( ) - 1 ) ; String e8695 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d8695 . getBytes ( ) ) ) ) ; String f8695 = e8695 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g8695 = " STRING " ; String bar = thing . doSomething ( g8695 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10904 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map93028 = new HashMap < String , Object > ( ) ; map93028 . put ( " STRING " , " STRING " ) ; map93028 . put ( " STRING " , param . toString ( ) ) ; map93028 . put ( " STRING " , " STRING " ) ; bar = ( String ) map93028 . get ( " STRING " ) ; bar = ( String ) map93028 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10908 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map7804 = new HashMap < String , Object > ( ) ; map7804 . put ( " STRING " , " STRING " ) ; map7804 . put ( " STRING " , param . toString ( ) ) ; map7804 . put ( " STRING " , " STRING " ) ; bar = ( String ) map7804 . get ( " STRING " ) ; bar = ( String ) map7804 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10909 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10910 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10917 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10920 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10925 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest10929 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest10930 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10934 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map70568 = new HashMap < String , Object > ( ) ; map70568 . put ( " STRING " , " STRING " ) ; map70568 . put ( " STRING " , param . toString ( ) ) ; map70568 . put ( " STRING " , " STRING " ) ; bar = ( String ) map70568 . get ( " STRING " ) ; bar = ( String ) map70568 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest10935 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest10942 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10950 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest10951 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest11490 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest11493 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest11496 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest11503 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest11508 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest11510 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest11515 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11516 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map19853 = new HashMap < String , Object > ( ) ; map19853 . put ( " STRING " , " STRING " ) ; map19853 . put ( " STRING " , param . toString ( ) ) ; map19853 . put ( " STRING " , " STRING " ) ; bar = ( String ) map19853 . get ( " STRING " ) ; bar = ( String ) map19853 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest11517 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest11518 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a60139 = param ; StringBuilder b60139 = new StringBuilder ( a60139 ) ; b60139 . append ( " STRING " ) ; b60139 . replace ( b60139 . length ( ) - " STRING " . length ( ) , b60139 . length ( ) , " STRING " ) ; HashMap < String , Object > map60139 = new HashMap < String , Object > ( ) ; map60139 . put ( " STRING " , b60139 . toString ( ) ) ; String c60139 = ( String ) map60139 . get ( " STRING " ) ; String d60139 = c60139 . substring ( 0 , c60139 . length ( ) - 1 ) ; String e60139 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d60139 . getBytes ( ) ) ) ) ; String f60139 = e60139 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g60139 = " STRING " ; String bar = thing . doSomething ( g60139 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11520 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map17231 = new HashMap < String , Object > ( ) ; map17231 . put ( " STRING " , " STRING " ) ; map17231 . put ( " STRING " , param . toString ( ) ) ; map17231 . put ( " STRING " , " STRING " ) ; bar = ( String ) map17231 . get ( " STRING " ) ; bar = ( String ) map17231 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest11521 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest11526 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11527 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest11528 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a77761 = param ; StringBuilder b77761 = new StringBuilder ( a77761 ) ; b77761 . append ( " STRING " ) ; b77761 . replace ( b77761 . length ( ) - " STRING " . length ( ) , b77761 . length ( ) , " STRING " ) ; HashMap < String , Object > map77761 = new HashMap < String , Object > ( ) ; map77761 . put ( " STRING " , b77761 . toString ( ) ) ; String c77761 = ( String ) map77761 . get ( " STRING " ) ; String d77761 = c77761 . substring ( 0 , c77761 . length ( ) - 1 ) ; String e77761 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d77761 . getBytes ( ) ) ) ) ; String f77761 = e77761 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g77761 = " STRING " ; String bar = thing . doSomething ( g77761 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11533 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11535 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map49729 = new HashMap < String , Object > ( ) ; map49729 . put ( " STRING " , " STRING " ) ; map49729 . put ( " STRING " , param . toString ( ) ) ; map49729 . put ( " STRING " , " STRING " ) ; bar = ( String ) map49729 . get ( " STRING " ) ; bar = ( String ) map49729 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest11542 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest11545 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest11552 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11553 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest11555 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest11558 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map64722 = new HashMap < String , Object > ( ) ; map64722 . put ( " STRING " , " STRING " ) ; map64722 . put ( " STRING " , param . toString ( ) ) ; map64722 . put ( " STRING " , " STRING " ) ; bar = ( String ) map64722 . get ( " STRING " ) ; bar = ( String ) map64722 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest11566 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a7887 = param ; StringBuilder b7887 = new StringBuilder ( a7887 ) ; b7887 . append ( " STRING " ) ; b7887 . replace ( b7887 . length ( ) - " STRING " . length ( ) , b7887 . length ( ) , " STRING " ) ; HashMap < String , Object > map7887 = new HashMap < String , Object > ( ) ; map7887 . put ( " STRING " , b7887 . toString ( ) ) ; String c7887 = ( String ) map7887 . get ( " STRING " ) ; String d7887 = c7887 . substring ( 0 , c7887 . length ( ) - 1 ) ; String e7887 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d7887 . getBytes ( ) ) ) ) ; String f7887 = e7887 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g7887 = " STRING " ; String bar = thing . doSomething ( g7887 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11571 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a59231 = param ; StringBuilder b59231 = new StringBuilder ( a59231 ) ; b59231 . append ( " STRING " ) ; b59231 . replace ( b59231 . length ( ) - " STRING " . length ( ) , b59231 . length ( ) , " STRING " ) ; HashMap < String , Object > map59231 = new HashMap < String , Object > ( ) ; map59231 . put ( " STRING " , b59231 . toString ( ) ) ; String c59231 = ( String ) map59231 . get ( " STRING " ) ; String d59231 = c59231 . substring ( 0 , c59231 . length ( ) - 1 ) ; String e59231 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d59231 . getBytes ( ) ) ) ) ; String f59231 = e59231 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g59231 = " STRING " ; String bar = thing . doSomething ( g59231 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11576 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest11577 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a34627 = param ; StringBuilder b34627 = new StringBuilder ( a34627 ) ; b34627 . append ( " STRING " ) ; b34627 . replace ( b34627 . length ( ) - " STRING " . length ( ) , b34627 . length ( ) , " STRING " ) ; HashMap < String , Object > map34627 = new HashMap < String , Object > ( ) ; map34627 . put ( " STRING " , b34627 . toString ( ) ) ; String c34627 = ( String ) map34627 . get ( " STRING " ) ; String d34627 = c34627 . substring ( 0 , c34627 . length ( ) - 1 ) ; String e34627 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d34627 . getBytes ( ) ) ) ) ; String f34627 = e34627 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g34627 = " STRING " ; String bar = thing . doSomething ( g34627 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11578 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest11584 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest11586 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest11587 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map58635 = new HashMap < String , Object > ( ) ; map58635 . put ( " STRING " , " STRING " ) ; map58635 . put ( " STRING " , param . toString ( ) ) ; map58635 . put ( " STRING " , " STRING " ) ; bar = ( String ) map58635 . get ( " STRING " ) ; bar = ( String ) map58635 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12147 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12148 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12155 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12156 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map20843 = new HashMap < String , Object > ( ) ; map20843 . put ( " STRING " , " STRING " ) ; map20843 . put ( " STRING " , param . toString ( ) ) ; map20843 . put ( " STRING " , " STRING " ) ; bar = ( String ) map20843 . get ( " STRING " ) ; bar = ( String ) map20843 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12157 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12162 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest12166 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12167 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12175 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest12176 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12179 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest12181 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12182 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a98089 = param ; StringBuilder b98089 = new StringBuilder ( a98089 ) ; b98089 . append ( " STRING " ) ; b98089 . replace ( b98089 . length ( ) - " STRING " . length ( ) , b98089 . length ( ) , " STRING " ) ; HashMap < String , Object > map98089 = new HashMap < String , Object > ( ) ; map98089 . put ( " STRING " , b98089 . toString ( ) ) ; String c98089 = ( String ) map98089 . get ( " STRING " ) ; String d98089 = c98089 . substring ( 0 , c98089 . length ( ) - 1 ) ; String e98089 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d98089 . getBytes ( ) ) ) ) ; String f98089 = e98089 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g98089 = " STRING " ; String bar = thing . doSomething ( g98089 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12183 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12191 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map8447 = new HashMap < String , Object > ( ) ; map8447 . put ( " STRING " , " STRING " ) ; map8447 . put ( " STRING " , param . toString ( ) ) ; map8447 . put ( " STRING " , " STRING " ) ; bar = ( String ) map8447 . get ( " STRING " ) ; bar = ( String ) map8447 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12192 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a84965 = param ; StringBuilder b84965 = new StringBuilder ( a84965 ) ; b84965 . append ( " STRING " ) ; b84965 . replace ( b84965 . length ( ) - " STRING " . length ( ) , b84965 . length ( ) , " STRING " ) ; HashMap < String , Object > map84965 = new HashMap < String , Object > ( ) ; map84965 . put ( " STRING " , b84965 . toString ( ) ) ; String c84965 = ( String ) map84965 . get ( " STRING " ) ; String d84965 = c84965 . substring ( 0 , c84965 . length ( ) - 1 ) ; String e84965 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d84965 . getBytes ( ) ) ) ) ; String f84965 = e84965 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g84965 = " STRING " ; String bar = thing . doSomething ( g84965 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12196 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest12197 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a66460 = param ; StringBuilder b66460 = new StringBuilder ( a66460 ) ; b66460 . append ( " STRING " ) ; b66460 . replace ( b66460 . length ( ) - " STRING " . length ( ) , b66460 . length ( ) , " STRING " ) ; HashMap < String , Object > map66460 = new HashMap < String , Object > ( ) ; map66460 . put ( " STRING " , b66460 . toString ( ) ) ; String c66460 = ( String ) map66460 . get ( " STRING " ) ; String d66460 = c66460 . substring ( 0 , c66460 . length ( ) - 1 ) ; String e66460 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d66460 . getBytes ( ) ) ) ) ; String f66460 = e66460 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g66460 = " STRING " ; String bar = thing . doSomething ( g66460 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12201 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map39638 = new HashMap < String , Object > ( ) ; map39638 . put ( " STRING " , " STRING " ) ; map39638 . put ( " STRING " , param . toString ( ) ) ; map39638 . put ( " STRING " , " STRING " ) ; bar = ( String ) map39638 . get ( " STRING " ) ; bar = ( String ) map39638 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12206 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest12210 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map29314 = new HashMap < String , Object > ( ) ; map29314 . put ( " STRING " , " STRING " ) ; map29314 . put ( " STRING " , param . toString ( ) ) ; map29314 . put ( " STRING " , " STRING " ) ; bar = ( String ) map29314 . get ( " STRING " ) ; bar = ( String ) map29314 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12214 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12217 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest12223 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest12226 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map18628 = new HashMap < String , Object > ( ) ; map18628 . put ( " STRING " , " STRING " ) ; map18628 . put ( " STRING " , param . toString ( ) ) ; map18628 . put ( " STRING " , " STRING " ) ; bar = ( String ) map18628 . get ( " STRING " ) ; bar = ( String ) map18628 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12234 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12242 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12244 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12250 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map688 = new HashMap < String , Object > ( ) ; map688 . put ( " STRING " , " STRING " ) ; map688 . put ( " STRING " , param . toString ( ) ) ; map688 . put ( " STRING " , " STRING " ) ; bar = ( String ) map688 . get ( " STRING " ) ; bar = ( String ) map688 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12766 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12772 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map65585 = new HashMap < String , Object > ( ) ; map65585 . put ( " STRING " , " STRING " ) ; map65585 . put ( " STRING " , param . toString ( ) ) ; map65585 . put ( " STRING " , " STRING " ) ; bar = ( String ) map65585 . get ( " STRING " ) ; bar = ( String ) map65585 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12773 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest12775 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map37166 = new HashMap < String , Object > ( ) ; map37166 . put ( " STRING " , " STRING " ) ; map37166 . put ( " STRING " , param . toString ( ) ) ; map37166 . put ( " STRING " , " STRING " ) ; bar = ( String ) map37166 . get ( " STRING " ) ; bar = ( String ) map37166 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12782 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map11446 = new HashMap < String , Object > ( ) ; map11446 . put ( " STRING " , " STRING " ) ; map11446 . put ( " STRING " , param . toString ( ) ) ; map11446 . put ( " STRING " , " STRING " ) ; bar = ( String ) map11446 . get ( " STRING " ) ; bar = ( String ) map11446 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12783 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String a82132 = param ; StringBuilder b82132 = new StringBuilder ( a82132 ) ; b82132 . append ( " STRING " ) ; b82132 . replace ( b82132 . length ( ) - " STRING " . length ( ) , b82132 . length ( ) , " STRING " ) ; HashMap < String , Object > map82132 = new HashMap < String , Object > ( ) ; map82132 . put ( " STRING " , b82132 . toString ( ) ) ; String c82132 = ( String ) map82132 . get ( " STRING " ) ; String d82132 = c82132 . substring ( 0 , c82132 . length ( ) - 1 ) ; String e82132 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d82132 . getBytes ( ) ) ) ) ; String f82132 = e82132 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g82132 = " STRING " ; String bar = thing . doSomething ( g82132 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12786 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map63143 = new HashMap < String , Object > ( ) ; map63143 . put ( " STRING " , " STRING " ) ; map63143 . put ( " STRING " , param . toString ( ) ) ; map63143 . put ( " STRING " , " STRING " ) ; bar = ( String ) map63143 . get ( " STRING " ) ; bar = ( String ) map63143 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12790 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a85079 = param ; StringBuilder b85079 = new StringBuilder ( a85079 ) ; b85079 . append ( " STRING " ) ; b85079 . replace ( b85079 . length ( ) - " STRING " . length ( ) , b85079 . length ( ) , " STRING " ) ; HashMap < String , Object > map85079 = new HashMap < String , Object > ( ) ; map85079 . put ( " STRING " , b85079 . toString ( ) ) ; String c85079 = ( String ) map85079 . get ( " STRING " ) ; String d85079 = c85079 . substring ( 0 , c85079 . length ( ) - 1 ) ; String e85079 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d85079 . getBytes ( ) ) ) ) ; String f85079 = e85079 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g85079 = " STRING " ; String bar = thing . doSomething ( g85079 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12791 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12798 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a82343 = param ; StringBuilder b82343 = new StringBuilder ( a82343 ) ; b82343 . append ( " STRING " ) ; b82343 . replace ( b82343 . length ( ) - " STRING " . length ( ) , b82343 . length ( ) , " STRING " ) ; HashMap < String , Object > map82343 = new HashMap < String , Object > ( ) ; map82343 . put ( " STRING " , b82343 . toString ( ) ) ; String c82343 = ( String ) map82343 . get ( " STRING " ) ; String d82343 = c82343 . substring ( 0 , c82343 . length ( ) - 1 ) ; String e82343 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d82343 . getBytes ( ) ) ) ) ; String f82343 = e82343 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g82343 = " STRING " ; String bar = thing . doSomething ( g82343 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12799 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12800 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest12806 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest12809 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12815 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest12816 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map85896 = new HashMap < String , Object > ( ) ; map85896 . put ( " STRING " , " STRING " ) ; map85896 . put ( " STRING " , param . toString ( ) ) ; map85896 . put ( " STRING " , " STRING " ) ; bar = ( String ) map85896 . get ( " STRING " ) ; bar = ( String ) map85896 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12820 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12827 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12828 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12844 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12845 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map24540 = new HashMap < String , Object > ( ) ; map24540 . put ( " STRING " , " STRING " ) ; map24540 . put ( " STRING " , param . toString ( ) ) ; map24540 . put ( " STRING " , " STRING " ) ; bar = ( String ) map24540 . get ( " STRING " ) ; bar = ( String ) map24540 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest12846 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest12847 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12852 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12858 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a38494 = param ; StringBuilder b38494 = new StringBuilder ( a38494 ) ; b38494 . append ( " STRING " ) ; b38494 . replace ( b38494 . length ( ) - " STRING " . length ( ) , b38494 . length ( ) , " STRING " ) ; HashMap < String , Object > map38494 = new HashMap < String , Object > ( ) ; map38494 . put ( " STRING " , b38494 . toString ( ) ) ; String c38494 = ( String ) map38494 . get ( " STRING " ) ; String d38494 = c38494 . substring ( 0 , c38494 . length ( ) - 1 ) ; String e38494 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d38494 . getBytes ( ) ) ) ) ; String f38494 = e38494 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g38494 = " STRING " ; String bar = thing . doSomething ( g38494 ) ; return bar ; } } } falsepositive
public class BenchmarkTest12859 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest12863 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest13394 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map70291 = new HashMap < String , Object > ( ) ; map70291 . put ( " STRING " , " STRING " ) ; map70291 . put ( " STRING " , param . toString ( ) ) ; map70291 . put ( " STRING " , " STRING " ) ; bar = ( String ) map70291 . get ( " STRING " ) ; bar = ( String ) map70291 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest13400 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest13402 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest13404 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map55215 = new HashMap < String , Object > ( ) ; map55215 . put ( " STRING " , " STRING " ) ; map55215 . put ( " STRING " , param . toString ( ) ) ; map55215 . put ( " STRING " , " STRING " ) ; bar = ( String ) map55215 . get ( " STRING " ) ; bar = ( String ) map55215 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest13405 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest13406 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a35941 = param ; StringBuilder b35941 = new StringBuilder ( a35941 ) ; b35941 . append ( " STRING " ) ; b35941 . replace ( b35941 . length ( ) - " STRING " . length ( ) , b35941 . length ( ) , " STRING " ) ; HashMap < String , Object > map35941 = new HashMap < String , Object > ( ) ; map35941 . put ( " STRING " , b35941 . toString ( ) ) ; String c35941 = ( String ) map35941 . get ( " STRING " ) ; String d35941 = c35941 . substring ( 0 , c35941 . length ( ) - 1 ) ; String e35941 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d35941 . getBytes ( ) ) ) ) ; String f35941 = e35941 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g35941 = " STRING " ; String bar = thing . doSomething ( g35941 ) ; return bar ; } } } falsepositive
public class BenchmarkTest13407 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest13411 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest13412 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map55299 = new HashMap < String , Object > ( ) ; map55299 . put ( " STRING " , " STRING " ) ; map55299 . put ( " STRING " , param . toString ( ) ) ; map55299 . put ( " STRING " , " STRING " ) ; bar = ( String ) map55299 . get ( " STRING " ) ; bar = ( String ) map55299 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest13413 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest13419 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest13421 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest13423 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map65895 = new HashMap < String , Object > ( ) ; map65895 . put ( " STRING " , " STRING " ) ; map65895 . put ( " STRING " , param . toString ( ) ) ; map65895 . put ( " STRING " , " STRING " ) ; bar = ( String ) map65895 . get ( " STRING " ) ; bar = ( String ) map65895 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest13434 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest13440 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest13444 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a54333 = param ; StringBuilder b54333 = new StringBuilder ( a54333 ) ; b54333 . append ( " STRING " ) ; b54333 . replace ( b54333 . length ( ) - " STRING " . length ( ) , b54333 . length ( ) , " STRING " ) ; HashMap < String , Object > map54333 = new HashMap < String , Object > ( ) ; map54333 . put ( " STRING " , b54333 . toString ( ) ) ; String c54333 = ( String ) map54333 . get ( " STRING " ) ; String d54333 = c54333 . substring ( 0 , c54333 . length ( ) - 1 ) ; String e54333 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d54333 . getBytes ( ) ) ) ) ; String f54333 = e54333 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g54333 = " STRING " ; String bar = thing . doSomething ( g54333 ) ; return bar ; } } } falsepositive
public class BenchmarkTest13451 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest13452 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map30076 = new HashMap < String , Object > ( ) ; map30076 . put ( " STRING " , " STRING " ) ; map30076 . put ( " STRING " , param . toString ( ) ) ; map30076 . put ( " STRING " , " STRING " ) ; bar = ( String ) map30076 . get ( " STRING " ) ; bar = ( String ) map30076 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest13457 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest13458 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a70255 = param ; StringBuilder b70255 = new StringBuilder ( a70255 ) ; b70255 . append ( " STRING " ) ; b70255 . replace ( b70255 . length ( ) - " STRING " . length ( ) , b70255 . length ( ) , " STRING " ) ; HashMap < String , Object > map70255 = new HashMap < String , Object > ( ) ; map70255 . put ( " STRING " , b70255 . toString ( ) ) ; String c70255 = ( String ) map70255 . get ( " STRING " ) ; String d70255 = c70255 . substring ( 0 , c70255 . length ( ) - 1 ) ; String e70255 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d70255 . getBytes ( ) ) ) ) ; String f70255 = e70255 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g70255 = " STRING " ; String bar = thing . doSomething ( g70255 ) ; return bar ; } } } falsepositive
public class BenchmarkTest13459 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest13462 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest13463 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map23600 = new HashMap < String , Object > ( ) ; map23600 . put ( " STRING " , " STRING " ) ; map23600 . put ( " STRING " , param . toString ( ) ) ; map23600 . put ( " STRING " , " STRING " ) ; bar = ( String ) map23600 . get ( " STRING " ) ; bar = ( String ) map23600 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest13468 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest13475 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest13478 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest13482 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest13486 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest13490 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a50324 = param ; StringBuilder b50324 = new StringBuilder ( a50324 ) ; b50324 . append ( " STRING " ) ; b50324 . replace ( b50324 . length ( ) - " STRING " . length ( ) , b50324 . length ( ) , " STRING " ) ; HashMap < String , Object > map50324 = new HashMap < String , Object > ( ) ; map50324 . put ( " STRING " , b50324 . toString ( ) ) ; String c50324 = ( String ) map50324 . get ( " STRING " ) ; String d50324 = c50324 . substring ( 0 , c50324 . length ( ) - 1 ) ; String e50324 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d50324 . getBytes ( ) ) ) ) ; String f50324 = e50324 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g50324 = " STRING " ; String bar = thing . doSomething ( g50324 ) ; return bar ; } } } falsepositive
public class BenchmarkTest13494 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map53872 = new HashMap < String , Object > ( ) ; map53872 . put ( " STRING " , " STRING " ) ; map53872 . put ( " STRING " , param . toString ( ) ) ; map53872 . put ( " STRING " , " STRING " ) ; bar = ( String ) map53872 . get ( " STRING " ) ; bar = ( String ) map53872 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest13495 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest13496 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14018 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14022 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String a50224 = param ; StringBuilder b50224 = new StringBuilder ( a50224 ) ; b50224 . append ( " STRING " ) ; b50224 . replace ( b50224 . length ( ) - " STRING " . length ( ) , b50224 . length ( ) , " STRING " ) ; HashMap < String , Object > map50224 = new HashMap < String , Object > ( ) ; map50224 . put ( " STRING " , b50224 . toString ( ) ) ; String c50224 = ( String ) map50224 . get ( " STRING " ) ; String d50224 = c50224 . substring ( 0 , c50224 . length ( ) - 1 ) ; String e50224 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d50224 . getBytes ( ) ) ) ) ; String f50224 = e50224 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f50224 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14028 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } falsepositive
public class BenchmarkTest14035 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } falsepositive
public class BenchmarkTest14036 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14037 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz19126 = new StringBuilder ( param ) ; String bar = sbxyz19126 . append ( " STRING " ) . toString ( ) ; return bar ; } } } falsepositive
public class BenchmarkTest14038 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14039 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14040 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14041 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14042 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14043 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest14044 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14045 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14046 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14047 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14048 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14049 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest14050 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14051 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz68338 = new StringBuilder ( param ) ; bar = sbxyz68338 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14052 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } falsepositive
public class BenchmarkTest14053 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14054 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14055 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14056 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a25070 = param ; StringBuilder b25070 = new StringBuilder ( a25070 ) ; b25070 . append ( " STRING " ) ; b25070 . replace ( b25070 . length ( ) - " STRING " . length ( ) , b25070 . length ( ) , " STRING " ) ; HashMap < String , Object > map25070 = new HashMap < String , Object > ( ) ; map25070 . put ( " STRING " , b25070 . toString ( ) ) ; String c25070 = ( String ) map25070 . get ( " STRING " ) ; String d25070 = c25070 . substring ( 0 , c25070 . length ( ) - 1 ) ; String e25070 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d25070 . getBytes ( ) ) ) ) ; String f25070 = e25070 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g25070 = " STRING " ; String bar = thing . doSomething ( g25070 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14057 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz51817 = new StringBuilder ( param ) ; bar = sbxyz51817 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14058 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14059 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } falsepositive
public class BenchmarkTest14060 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14061 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14062 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } falsepositive
public class BenchmarkTest14063 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14064 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14065 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a3158 = param ; StringBuilder b3158 = new StringBuilder ( a3158 ) ; b3158 . append ( " STRING " ) ; b3158 . replace ( b3158 . length ( ) - " STRING " . length ( ) , b3158 . length ( ) , " STRING " ) ; HashMap < String , Object > map3158 = new HashMap < String , Object > ( ) ; map3158 . put ( " STRING " , b3158 . toString ( ) ) ; String c3158 = ( String ) map3158 . get ( " STRING " ) ; String d3158 = c3158 . substring ( 0 , c3158 . length ( ) - 1 ) ; String e3158 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d3158 . getBytes ( ) ) ) ) ; String f3158 = e3158 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g3158 = " STRING " ; String bar = thing . doSomething ( g3158 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14066 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14067 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map66291 = new HashMap < String , Object > ( ) ; map66291 . put ( " STRING " , " STRING " ) ; map66291 . put ( " STRING " , param . toString ( ) ) ; map66291 . put ( " STRING " , " STRING " ) ; bar = ( String ) map66291 . get ( " STRING " ) ; bar = ( String ) map66291 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest14068 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14069 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz32742 = new StringBuilder ( param ) ; bar = sbxyz32742 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14070 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14071 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest14072 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } falsepositive
public class BenchmarkTest14073 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14074 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String a28142 = param ; StringBuilder b28142 = new StringBuilder ( a28142 ) ; b28142 . append ( " STRING " ) ; b28142 . replace ( b28142 . length ( ) - " STRING " . length ( ) , b28142 . length ( ) , " STRING " ) ; HashMap < String , Object > map28142 = new HashMap < String , Object > ( ) ; map28142 . put ( " STRING " , b28142 . toString ( ) ) ; String c28142 = ( String ) map28142 . get ( " STRING " ) ; String d28142 = c28142 . substring ( 0 , c28142 . length ( ) - 1 ) ; String e28142 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d28142 . getBytes ( ) ) ) ) ; String f28142 = e28142 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g28142 = " STRING " ; String bar = thing . doSomething ( g28142 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14075 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } falsepositive
public class BenchmarkTest14076 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14077 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14078 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } falsepositive
public class BenchmarkTest14079 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a45147 = param ; StringBuilder b45147 = new StringBuilder ( a45147 ) ; b45147 . append ( " STRING " ) ; b45147 . replace ( b45147 . length ( ) - " STRING " . length ( ) , b45147 . length ( ) , " STRING " ) ; HashMap < String , Object > map45147 = new HashMap < String , Object > ( ) ; map45147 . put ( " STRING " , b45147 . toString ( ) ) ; String c45147 = ( String ) map45147 . get ( " STRING " ) ; String d45147 = c45147 . substring ( 0 , c45147 . length ( ) - 1 ) ; String e45147 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d45147 . getBytes ( ) ) ) ) ; String f45147 = e45147 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f45147 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14080 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14081 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a4419 = param ; StringBuilder b4419 = new StringBuilder ( a4419 ) ; b4419 . append ( " STRING " ) ; b4419 . replace ( b4419 . length ( ) - " STRING " . length ( ) , b4419 . length ( ) , " STRING " ) ; HashMap < String , Object > map4419 = new HashMap < String , Object > ( ) ; map4419 . put ( " STRING " , b4419 . toString ( ) ) ; String c4419 = ( String ) map4419 . get ( " STRING " ) ; String d4419 = c4419 . substring ( 0 , c4419 . length ( ) - 1 ) ; String e4419 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d4419 . getBytes ( ) ) ) ) ; String f4419 = e4419 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g4419 = " STRING " ; String bar = thing . doSomething ( g4419 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14082 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14083 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14084 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } falsepositive
public class BenchmarkTest14085 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a89506 = param ; StringBuilder b89506 = new StringBuilder ( a89506 ) ; b89506 . append ( " STRING " ) ; b89506 . replace ( b89506 . length ( ) - " STRING " . length ( ) , b89506 . length ( ) , " STRING " ) ; HashMap < String , Object > map89506 = new HashMap < String , Object > ( ) ; map89506 . put ( " STRING " , b89506 . toString ( ) ) ; String c89506 = ( String ) map89506 . get ( " STRING " ) ; String d89506 = c89506 . substring ( 0 , c89506 . length ( ) - 1 ) ; String e89506 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d89506 . getBytes ( ) ) ) ) ; String f89506 = e89506 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f89506 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14086 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14087 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a80689 = param ; StringBuilder b80689 = new StringBuilder ( a80689 ) ; b80689 . append ( " STRING " ) ; b80689 . replace ( b80689 . length ( ) - " STRING " . length ( ) , b80689 . length ( ) , " STRING " ) ; HashMap < String , Object > map80689 = new HashMap < String , Object > ( ) ; map80689 . put ( " STRING " , b80689 . toString ( ) ) ; String c80689 = ( String ) map80689 . get ( " STRING " ) ; String d80689 = c80689 . substring ( 0 , c80689 . length ( ) - 1 ) ; String e80689 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d80689 . getBytes ( ) ) ) ) ; String f80689 = e80689 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g80689 = " STRING " ; String bar = thing . doSomething ( g80689 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14088 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14089 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest14090 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14091 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } falsepositive
public class BenchmarkTest14092 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14093 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest14094 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz15844 = new StringBuilder ( param ) ; bar = sbxyz15844 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14095 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14096 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } } falsepositive
public class BenchmarkTest14097 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14098 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map24087 = new HashMap < String , Object > ( ) ; map24087 . put ( " STRING " , " STRING " ) ; map24087 . put ( " STRING " , param . toString ( ) ) ; map24087 . put ( " STRING " , " STRING " ) ; bar = ( String ) map24087 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest14099 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14100 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map340 = new HashMap < String , Object > ( ) ; map340 . put ( " STRING " , " STRING " ) ; map340 . put ( " STRING " , param . toString ( ) ) ; map340 . put ( " STRING " , " STRING " ) ; bar = ( String ) map340 . get ( " STRING " ) ; bar = ( String ) map340 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest14101 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14102 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } falsepositive
public class BenchmarkTest14103 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14104 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz33849 = new StringBuilder ( param ) ; String bar = sbxyz33849 . append ( " STRING " ) . toString ( ) ; return bar ; } } } falsepositive
public class BenchmarkTest14105 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz85185 = new StringBuilder ( param ) ; bar = sbxyz85185 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14106 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } falsepositive
public class BenchmarkTest14107 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } } falsepositive
public class BenchmarkTest14108 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map19377 = new HashMap < String , Object > ( ) ; map19377 . put ( " STRING " , " STRING " ) ; map19377 . put ( " STRING " , param . toString ( ) ) ; map19377 . put ( " STRING " , " STRING " ) ; bar = ( String ) map19377 . get ( " STRING " ) ; bar = ( String ) map19377 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest14109 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } } falsepositive
public class BenchmarkTest14110 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { StringBuilder sbxyz90873 = new StringBuilder ( param ) ; String bar = sbxyz90873 . append ( " STRING " ) . toString ( ) ; return bar ; } } } falsepositive
public class BenchmarkTest14111 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } falsepositive
public class BenchmarkTest14112 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14113 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String a13687 = param ; StringBuilder b13687 = new StringBuilder ( a13687 ) ; b13687 . append ( " STRING " ) ; b13687 . replace ( b13687 . length ( ) - " STRING " . length ( ) , b13687 . length ( ) , " STRING " ) ; HashMap < String , Object > map13687 = new HashMap < String , Object > ( ) ; map13687 . put ( " STRING " , b13687 . toString ( ) ) ; String c13687 = ( String ) map13687 . get ( " STRING " ) ; String d13687 = c13687 . substring ( 0 , c13687 . length ( ) - 1 ) ; String e13687 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d13687 . getBytes ( ) ) ) ) ; String f13687 = e13687 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g13687 = " STRING " ; String bar = thing . doSomething ( g13687 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14114 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz32764 = new StringBuilder ( param ) ; bar = sbxyz32764 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14115 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14116 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map10902 = new HashMap < String , Object > ( ) ; map10902 . put ( " STRING " , " STRING " ) ; map10902 . put ( " STRING " , param . toString ( ) ) ; map10902 . put ( " STRING " , " STRING " ) ; bar = ( String ) map10902 . get ( " STRING " ) ; bar = ( String ) map10902 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest14117 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14118 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String a98719 = param ; StringBuilder b98719 = new StringBuilder ( a98719 ) ; b98719 . append ( " STRING " ) ; b98719 . replace ( b98719 . length ( ) - " STRING " . length ( ) , b98719 . length ( ) , " STRING " ) ; HashMap < String , Object > map98719 = new HashMap < String , Object > ( ) ; map98719 . put ( " STRING " , b98719 . toString ( ) ) ; String c98719 = ( String ) map98719 . get ( " STRING " ) ; String d98719 = c98719 . substring ( 0 , c98719 . length ( ) - 1 ) ; String e98719 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d98719 . getBytes ( ) ) ) ) ; String f98719 = e98719 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g98719 = " STRING " ; String bar = thing . doSomething ( g98719 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14119 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14120 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } falsepositive
public class BenchmarkTest14121 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14122 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map94413 = new HashMap < String , Object > ( ) ; map94413 . put ( " STRING " , " STRING " ) ; map94413 . put ( " STRING " , param . toString ( ) ) ; map94413 . put ( " STRING " , " STRING " ) ; bar = ( String ) map94413 . get ( " STRING " ) ; return bar ; } } } falsepositive
public class BenchmarkTest14123 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String a82739 = param ; StringBuilder b82739 = new StringBuilder ( a82739 ) ; b82739 . append ( " STRING " ) ; b82739 . replace ( b82739 . length ( ) - " STRING " . length ( ) , b82739 . length ( ) , " STRING " ) ; HashMap < String , Object > map82739 = new HashMap < String , Object > ( ) ; map82739 . put ( " STRING " , b82739 . toString ( ) ) ; String c82739 = ( String ) map82739 . get ( " STRING " ) ; String d82739 = c82739 . substring ( 0 , c82739 . length ( ) - 1 ) ; String e82739 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d82739 . getBytes ( ) ) ) ) ; String f82739 = e82739 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f82739 ) ; return bar ; } } } falsepositive
public class BenchmarkTest14124 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } } falsepositive
public class BenchmarkTest14125 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz45110 = new StringBuilder ( param ) ; bar = sbxyz45110 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14126 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14127 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } } falsepositive
public class BenchmarkTest14128 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } } falsepositive
public class BenchmarkTest14129 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz37127 = new StringBuilder ( param ) ; bar = sbxyz37127 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14130 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } } falsepositive
public class BenchmarkTest14131 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = new Test ( ) . doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private class Test { public String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } } falsepositive
public class BenchmarkTest14663 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a27919 = param ; StringBuilder b27919 = new StringBuilder ( a27919 ) ; b27919 . append ( " STRING " ) ; b27919 . replace ( b27919 . length ( ) - " STRING " . length ( ) , b27919 . length ( ) , " STRING " ) ; HashMap < String , Object > map27919 = new HashMap < String , Object > ( ) ; map27919 . put ( " STRING " , b27919 . toString ( ) ) ; String c27919 = ( String ) map27919 . get ( " STRING " ) ; String d27919 = c27919 . substring ( 0 , c27919 . length ( ) - 1 ) ; String e27919 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d27919 . getBytes ( ) ) ) ) ; String f27919 = e27919 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g27919 = " STRING " ; String bar = thing . doSomething ( g27919 ) ; return bar ; } } falsepositive
public class BenchmarkTest14664 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14673 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map51793 = new HashMap < String , Object > ( ) ; map51793 . put ( " STRING " , " STRING " ) ; map51793 . put ( " STRING " , param . toString ( ) ) ; map51793 . put ( " STRING " , " STRING " ) ; bar = ( String ) map51793 . get ( " STRING " ) ; bar = ( String ) map51793 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest14674 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String a73130 = param ; StringBuilder b73130 = new StringBuilder ( a73130 ) ; b73130 . append ( " STRING " ) ; b73130 . replace ( b73130 . length ( ) - " STRING " . length ( ) , b73130 . length ( ) , " STRING " ) ; HashMap < String , Object > map73130 = new HashMap < String , Object > ( ) ; map73130 . put ( " STRING " , b73130 . toString ( ) ) ; String c73130 = ( String ) map73130 . get ( " STRING " ) ; String d73130 = c73130 . substring ( 0 , c73130 . length ( ) - 1 ) ; String e73130 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d73130 . getBytes ( ) ) ) ) ; String f73130 = e73130 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g73130 = " STRING " ; String bar = thing . doSomething ( g73130 ) ; return bar ; } } falsepositive
public class BenchmarkTest14679 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest14681 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest14682 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14687 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest14688 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a86667 = param ; StringBuilder b86667 = new StringBuilder ( a86667 ) ; b86667 . append ( " STRING " ) ; b86667 . replace ( b86667 . length ( ) - " STRING " . length ( ) , b86667 . length ( ) , " STRING " ) ; HashMap < String , Object > map86667 = new HashMap < String , Object > ( ) ; map86667 . put ( " STRING " , b86667 . toString ( ) ) ; String c86667 = ( String ) map86667 . get ( " STRING " ) ; String d86667 = c86667 . substring ( 0 , c86667 . length ( ) - 1 ) ; String e86667 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d86667 . getBytes ( ) ) ) ) ; String f86667 = e86667 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g86667 = " STRING " ; String bar = thing . doSomething ( g86667 ) ; return bar ; } } falsepositive
public class BenchmarkTest14694 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest14701 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14709 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest14712 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest14716 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map62658 = new HashMap < String , Object > ( ) ; map62658 . put ( " STRING " , " STRING " ) ; map62658 . put ( " STRING " , param . toString ( ) ) ; map62658 . put ( " STRING " , " STRING " ) ; bar = ( String ) map62658 . get ( " STRING " ) ; bar = ( String ) map62658 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest14717 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a65389 = param ; StringBuilder b65389 = new StringBuilder ( a65389 ) ; b65389 . append ( " STRING " ) ; b65389 . replace ( b65389 . length ( ) - " STRING " . length ( ) , b65389 . length ( ) , " STRING " ) ; HashMap < String , Object > map65389 = new HashMap < String , Object > ( ) ; map65389 . put ( " STRING " , b65389 . toString ( ) ) ; String c65389 = ( String ) map65389 . get ( " STRING " ) ; String d65389 = c65389 . substring ( 0 , c65389 . length ( ) - 1 ) ; String e65389 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d65389 . getBytes ( ) ) ) ) ; String f65389 = e65389 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g65389 = " STRING " ; String bar = thing . doSomething ( g65389 ) ; return bar ; } } falsepositive
public class BenchmarkTest14720 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest14721 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest14722 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a93437 = param ; StringBuilder b93437 = new StringBuilder ( a93437 ) ; b93437 . append ( " STRING " ) ; b93437 . replace ( b93437 . length ( ) - " STRING " . length ( ) , b93437 . length ( ) , " STRING " ) ; HashMap < String , Object > map93437 = new HashMap < String , Object > ( ) ; map93437 . put ( " STRING " , b93437 . toString ( ) ) ; String c93437 = ( String ) map93437 . get ( " STRING " ) ; String d93437 = c93437 . substring ( 0 , c93437 . length ( ) - 1 ) ; String e93437 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d93437 . getBytes ( ) ) ) ) ; String f93437 = e93437 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g93437 = " STRING " ; String bar = thing . doSomething ( g93437 ) ; return bar ; } } falsepositive
public class BenchmarkTest14723 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14728 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest14729 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest14732 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest14733 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map16381 = new HashMap < String , Object > ( ) ; map16381 . put ( " STRING " , " STRING " ) ; map16381 . put ( " STRING " , param . toString ( ) ) ; map16381 . put ( " STRING " , " STRING " ) ; bar = ( String ) map16381 . get ( " STRING " ) ; bar = ( String ) map16381 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest14734 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14740 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map58379 = new HashMap < String , Object > ( ) ; map58379 . put ( " STRING " , " STRING " ) ; map58379 . put ( " STRING " , param . toString ( ) ) ; map58379 . put ( " STRING " , " STRING " ) ; bar = ( String ) map58379 . get ( " STRING " ) ; bar = ( String ) map58379 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest14741 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a29774 = param ; StringBuilder b29774 = new StringBuilder ( a29774 ) ; b29774 . append ( " STRING " ) ; b29774 . replace ( b29774 . length ( ) - " STRING " . length ( ) , b29774 . length ( ) , " STRING " ) ; HashMap < String , Object > map29774 = new HashMap < String , Object > ( ) ; map29774 . put ( " STRING " , b29774 . toString ( ) ) ; String c29774 = ( String ) map29774 . get ( " STRING " ) ; String d29774 = c29774 . substring ( 0 , c29774 . length ( ) - 1 ) ; String e29774 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d29774 . getBytes ( ) ) ) ) ; String f29774 = e29774 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g29774 = " STRING " ; String bar = thing . doSomething ( g29774 ) ; return bar ; } } falsepositive
public class BenchmarkTest14742 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14747 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a5236 = param ; StringBuilder b5236 = new StringBuilder ( a5236 ) ; b5236 . append ( " STRING " ) ; b5236 . replace ( b5236 . length ( ) - " STRING " . length ( ) , b5236 . length ( ) , " STRING " ) ; HashMap < String , Object > map5236 = new HashMap < String , Object > ( ) ; map5236 . put ( " STRING " , b5236 . toString ( ) ) ; String c5236 = ( String ) map5236 . get ( " STRING " ) ; String d5236 = c5236 . substring ( 0 , c5236 . length ( ) - 1 ) ; String e5236 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d5236 . getBytes ( ) ) ) ) ; String f5236 = e5236 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g5236 = " STRING " ; String bar = thing . doSomething ( g5236 ) ; return bar ; } } falsepositive
public class BenchmarkTest14753 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest14756 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest14757 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14759 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest14763 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest14766 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map19125 = new HashMap < String , Object > ( ) ; map19125 . put ( " STRING " , " STRING " ) ; map19125 . put ( " STRING " , param . toString ( ) ) ; map19125 . put ( " STRING " , " STRING " ) ; bar = ( String ) map19125 . get ( " STRING " ) ; bar = ( String ) map19125 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest14767 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String taintSrc = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { taintSrc = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { taintSrc = " " ; } } else { taintSrc = " " ; } String T6 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T6 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest14768 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Cookie [ ] cookies = request . getCookies ( ) ; String param = null ; boolean foundit = false ; if ( cookies ! = null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( " STRING " ) ) { param = cookie . getValue ( ) ; foundit = true ; } } if ( ! foundit ) { param = " " ; } } else { param = " " ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a21913 = param ; StringBuilder b21913 = new StringBuilder ( a21913 ) ; b21913 . append ( " STRING " ) ; b21913 . replace ( b21913 . length ( ) - " STRING " . length ( ) , b21913 . length ( ) , " STRING " ) ; HashMap < String , Object > map21913 = new HashMap < String , Object > ( ) ; map21913 . put ( " STRING " , b21913 . toString ( ) ) ; String c21913 = ( String ) map21913 . get ( " STRING " ) ; String d21913 = c21913 . substring ( 0 , c21913 . length ( ) - 1 ) ; String e21913 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d21913 . getBytes ( ) ) ) ) ; String f21913 = e21913 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g21913 = " STRING " ; String bar = thing . doSomething ( g21913 ) ; return bar ; } } falsepositive
public class BenchmarkTest15270 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map38787 = new HashMap < String , Object > ( ) ; map38787 . put ( " STRING " , " STRING " ) ; map38787 . put ( " STRING " , param . toString ( ) ) ; map38787 . put ( " STRING " , " STRING " ) ; bar = ( String ) map38787 . get ( " STRING " ) ; bar = ( String ) map38787 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15271 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a86196 = param ; StringBuilder b86196 = new StringBuilder ( a86196 ) ; b86196 . append ( " STRING " ) ; b86196 . replace ( b86196 . length ( ) - " STRING " . length ( ) , b86196 . length ( ) , " STRING " ) ; HashMap < String , Object > map86196 = new HashMap < String , Object > ( ) ; map86196 . put ( " STRING " , b86196 . toString ( ) ) ; String c86196 = ( String ) map86196 . get ( " STRING " ) ; String d86196 = c86196 . substring ( 0 , c86196 . length ( ) - 1 ) ; String e86196 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d86196 . getBytes ( ) ) ) ) ; String f86196 = e86196 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g86196 = " STRING " ; String bar = thing . doSomething ( g86196 ) ; return bar ; } } falsepositive
public class BenchmarkTest15274 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest15275 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest15286 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map27214 = new HashMap < String , Object > ( ) ; map27214 . put ( " STRING " , " STRING " ) ; map27214 . put ( " STRING " , param . toString ( ) ) ; map27214 . put ( " STRING " , " STRING " ) ; bar = ( String ) map27214 . get ( " STRING " ) ; bar = ( String ) map27214 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15287 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15292 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map31553 = new HashMap < String , Object > ( ) ; map31553 . put ( " STRING " , " STRING " ) ; map31553 . put ( " STRING " , param . toString ( ) ) ; map31553 . put ( " STRING " , " STRING " ) ; bar = ( String ) map31553 . get ( " STRING " ) ; bar = ( String ) map31553 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15299 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map11736 = new HashMap < String , Object > ( ) ; map11736 . put ( " STRING " , " STRING " ) ; map11736 . put ( " STRING " , param . toString ( ) ) ; map11736 . put ( " STRING " , " STRING " ) ; bar = ( String ) map11736 . get ( " STRING " ) ; bar = ( String ) map11736 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15304 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map5642 = new HashMap < String , Object > ( ) ; map5642 . put ( " STRING " , " STRING " ) ; map5642 . put ( " STRING " , param . toString ( ) ) ; map5642 . put ( " STRING " , " STRING " ) ; bar = ( String ) map5642 . get ( " STRING " ) ; bar = ( String ) map5642 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15305 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a89396 = param ; StringBuilder b89396 = new StringBuilder ( a89396 ) ; b89396 . append ( " STRING " ) ; b89396 . replace ( b89396 . length ( ) - " STRING " . length ( ) , b89396 . length ( ) , " STRING " ) ; HashMap < String , Object > map89396 = new HashMap < String , Object > ( ) ; map89396 . put ( " STRING " , b89396 . toString ( ) ) ; String c89396 = ( String ) map89396 . get ( " STRING " ) ; String d89396 = c89396 . substring ( 0 , c89396 . length ( ) - 1 ) ; String e89396 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d89396 . getBytes ( ) ) ) ) ; String f89396 = e89396 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g89396 = " STRING " ; String bar = thing . doSomething ( g89396 ) ; return bar ; } } falsepositive
public class BenchmarkTest15308 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest15309 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15310 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a23058 = param ; StringBuilder b23058 = new StringBuilder ( a23058 ) ; b23058 . append ( " STRING " ) ; b23058 . replace ( b23058 . length ( ) - " STRING " . length ( ) , b23058 . length ( ) , " STRING " ) ; HashMap < String , Object > map23058 = new HashMap < String , Object > ( ) ; map23058 . put ( " STRING " , b23058 . toString ( ) ) ; String c23058 = ( String ) map23058 . get ( " STRING " ) ; String d23058 = c23058 . substring ( 0 , c23058 . length ( ) - 1 ) ; String e23058 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d23058 . getBytes ( ) ) ) ) ; String f23058 = e23058 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g23058 = " STRING " ; String bar = thing . doSomething ( g23058 ) ; return bar ; } } falsepositive
public class BenchmarkTest15313 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest15316 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15327 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15331 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest15339 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getHeader ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a40002 = param ; StringBuilder b40002 = new StringBuilder ( a40002 ) ; b40002 . append ( " STRING " ) ; b40002 . replace ( b40002 . length ( ) - " STRING " . length ( ) , b40002 . length ( ) , " STRING " ) ; HashMap < String , Object > map40002 = new HashMap < String , Object > ( ) ; map40002 . put ( " STRING " , b40002 . toString ( ) ) ; String c40002 = ( String ) map40002 . get ( " STRING " ) ; String d40002 = c40002 . substring ( 0 , c40002 . length ( ) - 1 ) ; String e40002 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d40002 . getBytes ( ) ) ) ) ; String f40002 = e40002 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g40002 = " STRING " ; String bar = thing . doSomething ( g40002 ) ; return bar ; } } falsepositive
public class BenchmarkTest15359 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest15360 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map21314 = new HashMap < String , Object > ( ) ; map21314 . put ( " STRING " , " STRING " ) ; map21314 . put ( " STRING " , param . toString ( ) ) ; map21314 . put ( " STRING " , " STRING " ) ; bar = ( String ) map21314 . get ( " STRING " ) ; bar = ( String ) map21314 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15361 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getHeader ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15893 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest15894 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a53943 = param ; StringBuilder b53943 = new StringBuilder ( a53943 ) ; b53943 . append ( " STRING " ) ; b53943 . replace ( b53943 . length ( ) - " STRING " . length ( ) , b53943 . length ( ) , " STRING " ) ; HashMap < String , Object > map53943 = new HashMap < String , Object > ( ) ; map53943 . put ( " STRING " , b53943 . toString ( ) ) ; String c53943 = ( String ) map53943 . get ( " STRING " ) ; String d53943 = c53943 . substring ( 0 , c53943 . length ( ) - 1 ) ; String e53943 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d53943 . getBytes ( ) ) ) ) ; String f53943 = e53943 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g53943 = " STRING " ; String bar = thing . doSomething ( g53943 ) ; return bar ; } } falsepositive
public class BenchmarkTest15895 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest15902 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15906 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map32793 = new HashMap < String , Object > ( ) ; map32793 . put ( " STRING " , " STRING " ) ; map32793 . put ( " STRING " , param . toString ( ) ) ; map32793 . put ( " STRING " , " STRING " ) ; bar = ( String ) map32793 . get ( " STRING " ) ; bar = ( String ) map32793 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15907 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15911 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map98559 = new HashMap < String , Object > ( ) ; map98559 . put ( " STRING " , " STRING " ) ; map98559 . put ( " STRING " , param . toString ( ) ) ; map98559 . put ( " STRING " , " STRING " ) ; bar = ( String ) map98559 . get ( " STRING " ) ; bar = ( String ) map98559 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15912 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String a9328 = param ; StringBuilder b9328 = new StringBuilder ( a9328 ) ; b9328 . append ( " STRING " ) ; b9328 . replace ( b9328 . length ( ) - " STRING " . length ( ) , b9328 . length ( ) , " STRING " ) ; HashMap < String , Object > map9328 = new HashMap < String , Object > ( ) ; map9328 . put ( " STRING " , b9328 . toString ( ) ) ; String c9328 = ( String ) map9328 . get ( " STRING " ) ; String d9328 = c9328 . substring ( 0 , c9328 . length ( ) - 1 ) ; String e9328 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d9328 . getBytes ( ) ) ) ) ; String f9328 = e9328 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g9328 = " STRING " ; String bar = thing . doSomething ( g9328 ) ; return bar ; } } falsepositive
public class BenchmarkTest15921 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a80191 = param ; StringBuilder b80191 = new StringBuilder ( a80191 ) ; b80191 . append ( " STRING " ) ; b80191 . replace ( b80191 . length ( ) - " STRING " . length ( ) , b80191 . length ( ) , " STRING " ) ; HashMap < String , Object > map80191 = new HashMap < String , Object > ( ) ; map80191 . put ( " STRING " , b80191 . toString ( ) ) ; String c80191 = ( String ) map80191 . get ( " STRING " ) ; String d80191 = c80191 . substring ( 0 , c80191 . length ( ) - 1 ) ; String e80191 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d80191 . getBytes ( ) ) ) ) ; String f80191 = e80191 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g80191 = " STRING " ; String bar = thing . doSomething ( g80191 ) ; return bar ; } } falsepositive
public class BenchmarkTest15927 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest15932 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest15936 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a96282 = param ; StringBuilder b96282 = new StringBuilder ( a96282 ) ; b96282 . append ( " STRING " ) ; b96282 . replace ( b96282 . length ( ) - " STRING " . length ( ) , b96282 . length ( ) , " STRING " ) ; HashMap < String , Object > map96282 = new HashMap < String , Object > ( ) ; map96282 . put ( " STRING " , b96282 . toString ( ) ) ; String c96282 = ( String ) map96282 . get ( " STRING " ) ; String d96282 = c96282 . substring ( 0 , c96282 . length ( ) - 1 ) ; String e96282 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d96282 . getBytes ( ) ) ) ) ; String f96282 = e96282 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g96282 = " STRING " ; String bar = thing . doSomething ( g96282 ) ; return bar ; } } falsepositive
public class BenchmarkTest15937 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest15942 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map39007 = new HashMap < String , Object > ( ) ; map39007 . put ( " STRING " , " STRING " ) ; map39007 . put ( " STRING " , param . toString ( ) ) ; map39007 . put ( " STRING " , " STRING " ) ; bar = ( String ) map39007 . get ( " STRING " ) ; bar = ( String ) map39007 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15951 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest15952 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15954 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest15963 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest15967 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a84539 = param ; StringBuilder b84539 = new StringBuilder ( a84539 ) ; b84539 . append ( " STRING " ) ; b84539 . replace ( b84539 . length ( ) - " STRING " . length ( ) , b84539 . length ( ) , " STRING " ) ; HashMap < String , Object > map84539 = new HashMap < String , Object > ( ) ; map84539 . put ( " STRING " , b84539 . toString ( ) ) ; String c84539 = ( String ) map84539 . get ( " STRING " ) ; String d84539 = c84539 . substring ( 0 , c84539 . length ( ) - 1 ) ; String e84539 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d84539 . getBytes ( ) ) ) ) ; String f84539 = e84539 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g84539 = " STRING " ; String bar = thing . doSomething ( g84539 ) ; return bar ; } } falsepositive
public class BenchmarkTest15968 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest15969 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest15970 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map14725 = new HashMap < String , Object > ( ) ; map14725 . put ( " STRING " , " STRING " ) ; map14725 . put ( " STRING " , param . toString ( ) ) ; map14725 . put ( " STRING " , " STRING " ) ; bar = ( String ) map14725 . get ( " STRING " ) ; bar = ( String ) map14725 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest15971 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headerNames = request . getHeaderNames ( ) ; if ( headerNames . hasMoreElements ( ) ) { param = headerNames . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String a63415 = param ; StringBuilder b63415 = new StringBuilder ( a63415 ) ; b63415 . append ( " STRING " ) ; b63415 . replace ( b63415 . length ( ) - " STRING " . length ( ) , b63415 . length ( ) , " STRING " ) ; HashMap < String , Object > map63415 = new HashMap < String , Object > ( ) ; map63415 . put ( " STRING " , b63415 . toString ( ) ) ; String c63415 = ( String ) map63415 . get ( " STRING " ) ; String d63415 = c63415 . substring ( 0 , c63415 . length ( ) - 1 ) ; String e63415 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d63415 . getBytes ( ) ) ) ) ; String f63415 = e63415 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g63415 = " STRING " ; String bar = thing . doSomething ( g63415 ) ; return bar ; } } falsepositive
public class BenchmarkTest15977 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest15982 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaderNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest16536 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map33667 = new HashMap < String , Object > ( ) ; map33667 . put ( " STRING " , " STRING " ) ; map33667 . put ( " STRING " , param . toString ( ) ) ; map33667 . put ( " STRING " , " STRING " ) ; bar = ( String ) map33667 . get ( " STRING " ) ; bar = ( String ) map33667 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest16537 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest16539 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest16542 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest16543 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest16547 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest16548 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a63963 = param ; StringBuilder b63963 = new StringBuilder ( a63963 ) ; b63963 . append ( " STRING " ) ; b63963 . replace ( b63963 . length ( ) - " STRING " . length ( ) , b63963 . length ( ) , " STRING " ) ; HashMap < String , Object > map63963 = new HashMap < String , Object > ( ) ; map63963 . put ( " STRING " , b63963 . toString ( ) ) ; String c63963 = ( String ) map63963 . get ( " STRING " ) ; String d63963 = c63963 . substring ( 0 , c63963 . length ( ) - 1 ) ; String e63963 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d63963 . getBytes ( ) ) ) ) ; String f63963 = e63963 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g63963 = " STRING " ; String bar = thing . doSomething ( g63963 ) ; return bar ; } } falsepositive
public class BenchmarkTest16549 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest16561 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest16562 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest16566 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map81647 = new HashMap < String , Object > ( ) ; map81647 . put ( " STRING " , " STRING " ) ; map81647 . put ( " STRING " , param . toString ( ) ) ; map81647 . put ( " STRING " , " STRING " ) ; bar = ( String ) map81647 . get ( " STRING " ) ; bar = ( String ) map81647 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest16568 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest16570 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest16571 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a81773 = param ; StringBuilder b81773 = new StringBuilder ( a81773 ) ; b81773 . append ( " STRING " ) ; b81773 . replace ( b81773 . length ( ) - " STRING " . length ( ) , b81773 . length ( ) , " STRING " ) ; HashMap < String , Object > map81773 = new HashMap < String , Object > ( ) ; map81773 . put ( " STRING " , b81773 . toString ( ) ) ; String c81773 = ( String ) map81773 . get ( " STRING " ) ; String d81773 = c81773 . substring ( 0 , c81773 . length ( ) - 1 ) ; String e81773 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d81773 . getBytes ( ) ) ) ) ; String f81773 = e81773 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g81773 = " STRING " ; String bar = thing . doSomething ( g81773 ) ; return bar ; } } falsepositive
public class BenchmarkTest16574 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a54318 = param ; StringBuilder b54318 = new StringBuilder ( a54318 ) ; b54318 . append ( " STRING " ) ; b54318 . replace ( b54318 . length ( ) - " STRING " . length ( ) , b54318 . length ( ) , " STRING " ) ; HashMap < String , Object > map54318 = new HashMap < String , Object > ( ) ; map54318 . put ( " STRING " , b54318 . toString ( ) ) ; String c54318 = ( String ) map54318 . get ( " STRING " ) ; String d54318 = c54318 . substring ( 0 , c54318 . length ( ) - 1 ) ; String e54318 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d54318 . getBytes ( ) ) ) ) ; String f54318 = e54318 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g54318 = " STRING " ; String bar = thing . doSomething ( g54318 ) ; return bar ; } } falsepositive
public class BenchmarkTest16577 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map38644 = new HashMap < String , Object > ( ) ; map38644 . put ( " STRING " , " STRING " ) ; map38644 . put ( " STRING " , param . toString ( ) ) ; map38644 . put ( " STRING " , " STRING " ) ; bar = ( String ) map38644 . get ( " STRING " ) ; bar = ( String ) map38644 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest16578 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest16583 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest16589 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map61473 = new HashMap < String , Object > ( ) ; map61473 . put ( " STRING " , " STRING " ) ; map61473 . put ( " STRING " , param . toString ( ) ) ; map61473 . put ( " STRING " , " STRING " ) ; bar = ( String ) map61473 . get ( " STRING " ) ; bar = ( String ) map61473 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest16590 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String a5044 = param ; StringBuilder b5044 = new StringBuilder ( a5044 ) ; b5044 . append ( " STRING " ) ; b5044 . replace ( b5044 . length ( ) - " STRING " . length ( ) , b5044 . length ( ) , " STRING " ) ; HashMap < String , Object > map5044 = new HashMap < String , Object > ( ) ; map5044 . put ( " STRING " , b5044 . toString ( ) ) ; String c5044 = ( String ) map5044 . get ( " STRING " ) ; String d5044 = c5044 . substring ( 0 , c5044 . length ( ) - 1 ) ; String e5044 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d5044 . getBytes ( ) ) ) ) ; String f5044 = e5044 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g5044 = " STRING " ; String bar = thing . doSomething ( g5044 ) ; return bar ; } } falsepositive
public class BenchmarkTest16596 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map16569 = new HashMap < String , Object > ( ) ; map16569 . put ( " STRING " , " STRING " ) ; map16569 . put ( " STRING " , param . toString ( ) ) ; map16569 . put ( " STRING " , " STRING " ) ; bar = ( String ) map16569 . get ( " STRING " ) ; bar = ( String ) map16569 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest16602 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a97702 = param ; StringBuilder b97702 = new StringBuilder ( a97702 ) ; b97702 . append ( " STRING " ) ; b97702 . replace ( b97702 . length ( ) - " STRING " . length ( ) , b97702 . length ( ) , " STRING " ) ; HashMap < String , Object > map97702 = new HashMap < String , Object > ( ) ; map97702 . put ( " STRING " , b97702 . toString ( ) ) ; String c97702 = ( String ) map97702 . get ( " STRING " ) ; String d97702 = c97702 . substring ( 0 , c97702 . length ( ) - 1 ) ; String e97702 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d97702 . getBytes ( ) ) ) ) ; String f97702 = e97702 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g97702 = " STRING " ; String bar = thing . doSomething ( g97702 ) ; return bar ; } } falsepositive
public class BenchmarkTest16603 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest16611 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest16612 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map18038 = new HashMap < String , Object > ( ) ; map18038 . put ( " STRING " , " STRING " ) ; map18038 . put ( " STRING " , param . toString ( ) ) ; map18038 . put ( " STRING " , " STRING " ) ; bar = ( String ) map18038 . get ( " STRING " ) ; bar = ( String ) map18038 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest16613 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > headers = request . getHeaders ( " STRING " ) ; if ( headers . hasMoreElements ( ) ) { param = headers . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a29919 = param ; StringBuilder b29919 = new StringBuilder ( a29919 ) ; b29919 . append ( " STRING " ) ; b29919 . replace ( b29919 . length ( ) - " STRING " . length ( ) , b29919 . length ( ) , " STRING " ) ; HashMap < String , Object > map29919 = new HashMap < String , Object > ( ) ; map29919 . put ( " STRING " , b29919 . toString ( ) ) ; String c29919 = ( String ) map29919 . get ( " STRING " ) ; String d29919 = c29919 . substring ( 0 , c29919 . length ( ) - 1 ) ; String e29919 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d29919 . getBytes ( ) ) ) ) ; String f29919 = e29919 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g29919 = " STRING " ; String bar = thing . doSomething ( g29919 ) ; return bar ; } } falsepositive
public class BenchmarkTest16614 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest16615 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest16617 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest16618 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest16621 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map69814 = new HashMap < String , Object > ( ) ; map69814 . put ( " STRING " , " STRING " ) ; map69814 . put ( " STRING " , param . toString ( ) ) ; map69814 . put ( " STRING " , " STRING " ) ; bar = ( String ) map69814 . get ( " STRING " ) ; bar = ( String ) map69814 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest16627 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest16628 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest16633 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest16634 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getHeaders ( " STRING " ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17172 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a77842 = param ; StringBuilder b77842 = new StringBuilder ( a77842 ) ; b77842 . append ( " STRING " ) ; b77842 . replace ( b77842 . length ( ) - " STRING " . length ( ) , b77842 . length ( ) , " STRING " ) ; HashMap < String , Object > map77842 = new HashMap < String , Object > ( ) ; map77842 . put ( " STRING " , b77842 . toString ( ) ) ; String c77842 = ( String ) map77842 . get ( " STRING " ) ; String d77842 = c77842 . substring ( 0 , c77842 . length ( ) - 1 ) ; String e77842 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d77842 . getBytes ( ) ) ) ) ; String f77842 = e77842 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g77842 = " STRING " ; String bar = thing . doSomething ( g77842 ) ; return bar ; } } falsepositive
public class BenchmarkTest17173 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17178 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String a70543 = param ; StringBuilder b70543 = new StringBuilder ( a70543 ) ; b70543 . append ( " STRING " ) ; b70543 . replace ( b70543 . length ( ) - " STRING " . length ( ) , b70543 . length ( ) , " STRING " ) ; HashMap < String , Object > map70543 = new HashMap < String , Object > ( ) ; map70543 . put ( " STRING " , b70543 . toString ( ) ) ; String c70543 = ( String ) map70543 . get ( " STRING " ) ; String d70543 = c70543 . substring ( 0 , c70543 . length ( ) - 1 ) ; String e70543 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d70543 . getBytes ( ) ) ) ) ; String f70543 = e70543 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g70543 = " STRING " ; String bar = thing . doSomething ( g70543 ) ; return bar ; } } falsepositive
public class BenchmarkTest17188 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17189 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest17191 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest17192 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String a82910 = param ; StringBuilder b82910 = new StringBuilder ( a82910 ) ; b82910 . append ( " STRING " ) ; b82910 . replace ( b82910 . length ( ) - " STRING " . length ( ) , b82910 . length ( ) , " STRING " ) ; HashMap < String , Object > map82910 = new HashMap < String , Object > ( ) ; map82910 . put ( " STRING " , b82910 . toString ( ) ) ; String c82910 = ( String ) map82910 . get ( " STRING " ) ; String d82910 = c82910 . substring ( 0 , c82910 . length ( ) - 1 ) ; String e82910 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d82910 . getBytes ( ) ) ) ) ; String f82910 = e82910 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g82910 = " STRING " ; String bar = thing . doSomething ( g82910 ) ; return bar ; } } falsepositive
public class BenchmarkTest17197 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map61867 = new HashMap < String , Object > ( ) ; map61867 . put ( " STRING " , " STRING " ) ; map61867 . put ( " STRING " , param . toString ( ) ) ; map61867 . put ( " STRING " , " STRING " ) ; bar = ( String ) map61867 . get ( " STRING " ) ; bar = ( String ) map61867 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17198 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17200 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map14776 = new HashMap < String , Object > ( ) ; map14776 . put ( " STRING " , " STRING " ) ; map14776 . put ( " STRING " , param . toString ( ) ) ; map14776 . put ( " STRING " , " STRING " ) ; bar = ( String ) map14776 . get ( " STRING " ) ; bar = ( String ) map14776 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17201 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17202 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17209 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17211 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17217 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map82712 = new HashMap < String , Object > ( ) ; map82712 . put ( " STRING " , " STRING " ) ; map82712 . put ( " STRING " , param . toString ( ) ) ; map82712 . put ( " STRING " , " STRING " ) ; bar = ( String ) map82712 . get ( " STRING " ) ; bar = ( String ) map82712 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17225 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest17226 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map54302 = new HashMap < String , Object > ( ) ; map54302 . put ( " STRING " , " STRING " ) ; map54302 . put ( " STRING " , param . toString ( ) ) ; map54302 . put ( " STRING " , " STRING " ) ; bar = ( String ) map54302 . get ( " STRING " ) ; bar = ( String ) map54302 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17229 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17234 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17242 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( " STRING " ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map77985 = new HashMap < String , Object > ( ) ; map77985 . put ( " STRING " , " STRING " ) ; map77985 . put ( " STRING " , param . toString ( ) ) ; map77985 . put ( " STRING " , " STRING " ) ; bar = ( String ) map77985 . get ( " STRING " ) ; bar = ( String ) map77985 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17243 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a83639 = param ; StringBuilder b83639 = new StringBuilder ( a83639 ) ; b83639 . append ( " STRING " ) ; b83639 . replace ( b83639 . length ( ) - " STRING " . length ( ) , b83639 . length ( ) , " STRING " ) ; HashMap < String , Object > map83639 = new HashMap < String , Object > ( ) ; map83639 . put ( " STRING " , b83639 . toString ( ) ) ; String c83639 = ( String ) map83639 . get ( " STRING " ) ; String d83639 = c83639 . substring ( 0 , c83639 . length ( ) - 1 ) ; String e83639 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d83639 . getBytes ( ) ) ) ) ; String f83639 = e83639 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g83639 = " STRING " ; String bar = thing . doSomething ( g83639 ) ; return bar ; } } falsepositive
public class BenchmarkTest17771 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17772 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a65171 = param ; StringBuilder b65171 = new StringBuilder ( a65171 ) ; b65171 . append ( " STRING " ) ; b65171 . replace ( b65171 . length ( ) - " STRING " . length ( ) , b65171 . length ( ) , " STRING " ) ; HashMap < String , Object > map65171 = new HashMap < String , Object > ( ) ; map65171 . put ( " STRING " , b65171 . toString ( ) ) ; String c65171 = ( String ) map65171 . get ( " STRING " ) ; String d65171 = c65171 . substring ( 0 , c65171 . length ( ) - 1 ) ; String e65171 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d65171 . getBytes ( ) ) ) ) ; String f65171 = e65171 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g65171 = " STRING " ; String bar = thing . doSomething ( g65171 ) ; return bar ; } } falsepositive
public class BenchmarkTest17773 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17778 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest17782 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map44979 = new HashMap < String , Object > ( ) ; map44979 . put ( " STRING " , " STRING " ) ; map44979 . put ( " STRING " , param . toString ( ) ) ; map44979 . put ( " STRING " , " STRING " ) ; bar = ( String ) map44979 . get ( " STRING " ) ; bar = ( String ) map44979 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17788 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest17789 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map36262 = new HashMap < String , Object > ( ) ; map36262 . put ( " STRING " , " STRING " ) ; map36262 . put ( " STRING " , param . toString ( ) ) ; map36262 . put ( " STRING " , " STRING " ) ; bar = ( String ) map36262 . get ( " STRING " ) ; bar = ( String ) map36262 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17790 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17791 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17796 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest17797 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map92412 = new HashMap < String , Object > ( ) ; map92412 . put ( " STRING " , " STRING " ) ; map92412 . put ( " STRING " , param . toString ( ) ) ; map92412 . put ( " STRING " , " STRING " ) ; bar = ( String ) map92412 . get ( " STRING " ) ; bar = ( String ) map92412 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17798 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17799 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String a17508 = param ; StringBuilder b17508 = new StringBuilder ( a17508 ) ; b17508 . append ( " STRING " ) ; b17508 . replace ( b17508 . length ( ) - " STRING " . length ( ) , b17508 . length ( ) , " STRING " ) ; HashMap < String , Object > map17508 = new HashMap < String , Object > ( ) ; map17508 . put ( " STRING " , b17508 . toString ( ) ) ; String c17508 = ( String ) map17508 . get ( " STRING " ) ; String d17508 = c17508 . substring ( 0 , c17508 . length ( ) - 1 ) ; String e17508 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d17508 . getBytes ( ) ) ) ) ; String f17508 = e17508 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g17508 = " STRING " ; String bar = thing . doSomething ( g17508 ) ; return bar ; } } falsepositive
public class BenchmarkTest17803 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17804 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17810 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a56755 = param ; StringBuilder b56755 = new StringBuilder ( a56755 ) ; b56755 . append ( " STRING " ) ; b56755 . replace ( b56755 . length ( ) - " STRING " . length ( ) , b56755 . length ( ) , " STRING " ) ; HashMap < String , Object > map56755 = new HashMap < String , Object > ( ) ; map56755 . put ( " STRING " , b56755 . toString ( ) ) ; String c56755 = ( String ) map56755 . get ( " STRING " ) ; String d56755 = c56755 . substring ( 0 , c56755 . length ( ) - 1 ) ; String e56755 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d56755 . getBytes ( ) ) ) ) ; String f56755 = e56755 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g56755 = " STRING " ; String bar = thing . doSomething ( g56755 ) ; return bar ; } } falsepositive
public class BenchmarkTest17815 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest17819 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map34570 = new HashMap < String , Object > ( ) ; map34570 . put ( " STRING " , " STRING " ) ; map34570 . put ( " STRING " , param . toString ( ) ) ; map34570 . put ( " STRING " , " STRING " ) ; bar = ( String ) map34570 . get ( " STRING " ) ; bar = ( String ) map34570 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17825 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest17827 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17832 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String a80915 = param ; StringBuilder b80915 = new StringBuilder ( a80915 ) ; b80915 . append ( " STRING " ) ; b80915 . replace ( b80915 . length ( ) - " STRING " . length ( ) , b80915 . length ( ) , " STRING " ) ; HashMap < String , Object > map80915 = new HashMap < String , Object > ( ) ; map80915 . put ( " STRING " , b80915 . toString ( ) ) ; String c80915 = ( String ) map80915 . get ( " STRING " ) ; String d80915 = c80915 . substring ( 0 , c80915 . length ( ) - 1 ) ; String e80915 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d80915 . getBytes ( ) ) ) ) ; String f80915 = e80915 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g80915 = " STRING " ; String bar = thing . doSomething ( g80915 ) ; return bar ; } } falsepositive
public class BenchmarkTest17835 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17841 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a65439 = param ; StringBuilder b65439 = new StringBuilder ( a65439 ) ; b65439 . append ( " STRING " ) ; b65439 . replace ( b65439 . length ( ) - " STRING " . length ( ) , b65439 . length ( ) , " STRING " ) ; HashMap < String , Object > map65439 = new HashMap < String , Object > ( ) ; map65439 . put ( " STRING " , b65439 . toString ( ) ) ; String c65439 = ( String ) map65439 . get ( " STRING " ) ; String d65439 = c65439 . substring ( 0 , c65439 . length ( ) - 1 ) ; String e65439 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d65439 . getBytes ( ) ) ) ) ; String f65439 = e65439 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g65439 = " STRING " ; String bar = thing . doSomething ( g65439 ) ; return bar ; } } falsepositive
public class BenchmarkTest17847 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map12436 = new HashMap < String , Object > ( ) ; map12436 . put ( " STRING " , " STRING " ) ; map12436 . put ( " STRING " , param . toString ( ) ) ; map12436 . put ( " STRING " , " STRING " ) ; bar = ( String ) map12436 . get ( " STRING " ) ; bar = ( String ) map12436 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest17853 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17856 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String a60102 = param ; StringBuilder b60102 = new StringBuilder ( a60102 ) ; b60102 . append ( " STRING " ) ; b60102 . replace ( b60102 . length ( ) - " STRING " . length ( ) , b60102 . length ( ) , " STRING " ) ; HashMap < String , Object > map60102 = new HashMap < String , Object > ( ) ; map60102 . put ( " STRING " , b60102 . toString ( ) ) ; String c60102 = ( String ) map60102 . get ( " STRING " ) ; String d60102 = c60102 . substring ( 0 , c60102 . length ( ) - 1 ) ; String e60102 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d60102 . getBytes ( ) ) ) ) ; String f60102 = e60102 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g60102 = " STRING " ; String bar = thing . doSomething ( g60102 ) ; return bar ; } } falsepositive
public class BenchmarkTest17859 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest17865 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest17866 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest17867 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > map = request . getParameterMap ( ) ; String param = " " ; if ( ! map . isEmpty ( ) ) { param = map . get ( " STRING " ) [ 0 ] ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a5800 = param ; StringBuilder b5800 = new StringBuilder ( a5800 ) ; b5800 . append ( " STRING " ) ; b5800 . replace ( b5800 . length ( ) - " STRING " . length ( ) , b5800 . length ( ) , " STRING " ) ; HashMap < String , Object > map5800 = new HashMap < String , Object > ( ) ; map5800 . put ( " STRING " , b5800 . toString ( ) ) ; String c5800 = ( String ) map5800 . get ( " STRING " ) ; String d5800 = c5800 . substring ( 0 , c5800 . length ( ) - 1 ) ; String e5800 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d5800 . getBytes ( ) ) ) ) ; String f5800 = e5800 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g5800 = " STRING " ; String bar = thing . doSomething ( g5800 ) ; return bar ; } } falsepositive
public class BenchmarkTest17868 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest17870 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { Map < String , String [ ] > taintSrc = request . getParameterMap ( ) ; String T4 = " " ; if ( ! taintSrc . isEmpty ( ) ) { T4 = taintSrc . get ( " STRING " ) [ 0 ] ; } String T5 = doSomething ( T4 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map54912 = new HashMap < String , Object > ( ) ; map54912 . put ( " STRING " , " STRING " ) ; map54912 . put ( " STRING " , param . toString ( ) ) ; map54912 . put ( " STRING " , " STRING " ) ; bar = ( String ) map54912 . get ( " STRING " ) ; bar = ( String ) map54912 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest18401 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a19926 = param ; StringBuilder b19926 = new StringBuilder ( a19926 ) ; b19926 . append ( " STRING " ) ; b19926 . replace ( b19926 . length ( ) - " STRING " . length ( ) , b19926 . length ( ) , " STRING " ) ; HashMap < String , Object > map19926 = new HashMap < String , Object > ( ) ; map19926 . put ( " STRING " , b19926 . toString ( ) ) ; String c19926 = ( String ) map19926 . get ( " STRING " ) ; String d19926 = c19926 . substring ( 0 , c19926 . length ( ) - 1 ) ; String e19926 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d19926 . getBytes ( ) ) ) ) ; String f19926 = e19926 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g19926 = " STRING " ; String bar = thing . doSomething ( g19926 ) ; return bar ; } } falsepositive
public class BenchmarkTest18404 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest18405 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest18407 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest18411 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest18414 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest18419 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest18425 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map25413 = new HashMap < String , Object > ( ) ; map25413 . put ( " STRING " , " STRING " ) ; map25413 . put ( " STRING " , param . toString ( ) ) ; map25413 . put ( " STRING " , " STRING " ) ; bar = ( String ) map25413 . get ( " STRING " ) ; bar = ( String ) map25413 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest18429 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map41275 = new HashMap < String , Object > ( ) ; map41275 . put ( " STRING " , " STRING " ) ; map41275 . put ( " STRING " , param . toString ( ) ) ; map41275 . put ( " STRING " , " STRING " ) ; bar = ( String ) map41275 . get ( " STRING " ) ; bar = ( String ) map41275 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest18430 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest18436 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a9172 = param ; StringBuilder b9172 = new StringBuilder ( a9172 ) ; b9172 . append ( " STRING " ) ; b9172 . replace ( b9172 . length ( ) - " STRING " . length ( ) , b9172 . length ( ) , " STRING " ) ; HashMap < String , Object > map9172 = new HashMap < String , Object > ( ) ; map9172 . put ( " STRING " , b9172 . toString ( ) ) ; String c9172 = ( String ) map9172 . get ( " STRING " ) ; String d9172 = c9172 . substring ( 0 , c9172 . length ( ) - 1 ) ; String e9172 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d9172 . getBytes ( ) ) ) ) ; String f9172 = e9172 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g9172 = " STRING " ; String bar = thing . doSomething ( g9172 ) ; return bar ; } } falsepositive
public class BenchmarkTest18439 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest18447 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest18448 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest18452 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest18455 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest18463 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest18464 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = " " ; Enumeration < String > names = request . getParameterNames ( ) ; if ( names . hasMoreElements ( ) ) { param = names . nextElement ( ) ; } String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a22831 = param ; StringBuilder b22831 = new StringBuilder ( a22831 ) ; b22831 . append ( " STRING " ) ; b22831 . replace ( b22831 . length ( ) - " STRING " . length ( ) , b22831 . length ( ) , " STRING " ) ; HashMap < String , Object > map22831 = new HashMap < String , Object > ( ) ; map22831 . put ( " STRING " , b22831 . toString ( ) ) ; String c22831 = ( String ) map22831 . get ( " STRING " ) ; String d22831 = c22831 . substring ( 0 , c22831 . length ( ) - 1 ) ; String e22831 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d22831 . getBytes ( ) ) ) ) ; String f22831 = e22831 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g22831 = " STRING " ; String bar = thing . doSomething ( g22831 ) ; return bar ; } } falsepositive
public class BenchmarkTest18465 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest18470 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest18471 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest18475 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest18479 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String T3 = " " ; Enumeration < String > taintSrc = request . getParameterNames ( ) ; if ( taintSrc . hasMoreElements ( ) ) { T3 = taintSrc . nextElement ( ) ; } String T5 = doSomething ( T3 ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19012 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a92212 = param ; StringBuilder b92212 = new StringBuilder ( a92212 ) ; b92212 . append ( " STRING " ) ; b92212 . replace ( b92212 . length ( ) - " STRING " . length ( ) , b92212 . length ( ) , " STRING " ) ; HashMap < String , Object > map92212 = new HashMap < String , Object > ( ) ; map92212 . put ( " STRING " , b92212 . toString ( ) ) ; String c92212 = ( String ) map92212 . get ( " STRING " ) ; String d92212 = c92212 . substring ( 0 , c92212 . length ( ) - 1 ) ; String e92212 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d92212 . getBytes ( ) ) ) ) ; String f92212 = e92212 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g92212 = " STRING " ; String bar = thing . doSomething ( g92212 ) ; return bar ; } } falsepositive
public class BenchmarkTest19015 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19020 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19021 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map92461 = new HashMap < String , Object > ( ) ; map92461 . put ( " STRING " , " STRING " ) ; map92461 . put ( " STRING " , param . toString ( ) ) ; map92461 . put ( " STRING " , " STRING " ) ; bar = ( String ) map92461 . get ( " STRING " ) ; bar = ( String ) map92461 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19022 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19025 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19034 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19039 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19040 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map48611 = new HashMap < String , Object > ( ) ; map48611 . put ( " STRING " , " STRING " ) ; map48611 . put ( " STRING " , param . toString ( ) ) ; map48611 . put ( " STRING " , " STRING " ) ; bar = ( String ) map48611 . get ( " STRING " ) ; bar = ( String ) map48611 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19045 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a16302 = param ; StringBuilder b16302 = new StringBuilder ( a16302 ) ; b16302 . append ( " STRING " ) ; b16302 . replace ( b16302 . length ( ) - " STRING " . length ( ) , b16302 . length ( ) , " STRING " ) ; HashMap < String , Object > map16302 = new HashMap < String , Object > ( ) ; map16302 . put ( " STRING " , b16302 . toString ( ) ) ; String c16302 = ( String ) map16302 . get ( " STRING " ) ; String d16302 = c16302 . substring ( 0 , c16302 . length ( ) - 1 ) ; String e16302 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d16302 . getBytes ( ) ) ) ) ; String f16302 = e16302 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g16302 = " STRING " ; String bar = thing . doSomething ( g16302 ) ; return bar ; } } falsepositive
public class BenchmarkTest19046 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19055 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19058 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest19061 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19066 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19067 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String a49545 = param ; StringBuilder b49545 = new StringBuilder ( a49545 ) ; b49545 . append ( " STRING " ) ; b49545 . replace ( b49545 . length ( ) - " STRING " . length ( ) , b49545 . length ( ) , " STRING " ) ; HashMap < String , Object > map49545 = new HashMap < String , Object > ( ) ; map49545 . put ( " STRING " , b49545 . toString ( ) ) ; String c49545 = ( String ) map49545 . get ( " STRING " ) ; String d49545 = c49545 . substring ( 0 , c49545 . length ( ) - 1 ) ; String e49545 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d49545 . getBytes ( ) ) ) ) ; String f49545 = e49545 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g49545 = " STRING " ; String bar = thing . doSomething ( g49545 ) ; return bar ; } } falsepositive
public class BenchmarkTest19068 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19071 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a76074 = param ; StringBuilder b76074 = new StringBuilder ( a76074 ) ; b76074 . append ( " STRING " ) ; b76074 . replace ( b76074 . length ( ) - " STRING " . length ( ) , b76074 . length ( ) , " STRING " ) ; HashMap < String , Object > map76074 = new HashMap < String , Object > ( ) ; map76074 . put ( " STRING " , b76074 . toString ( ) ) ; String c76074 = ( String ) map76074 . get ( " STRING " ) ; String d76074 = c76074 . substring ( 0 , c76074 . length ( ) - 1 ) ; String e76074 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d76074 . getBytes ( ) ) ) ) ; String f76074 = e76074 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g76074 = " STRING " ; String bar = thing . doSomething ( g76074 ) ; return bar ; } } falsepositive
public class BenchmarkTest19077 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map35460 = new HashMap < String , Object > ( ) ; map35460 . put ( " STRING " , " STRING " ) ; map35460 . put ( " STRING " , param . toString ( ) ) ; map35460 . put ( " STRING " , " STRING " ) ; bar = ( String ) map35460 . get ( " STRING " ) ; bar = ( String ) map35460 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19078 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19079 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheParameter ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a18692 = param ; StringBuilder b18692 = new StringBuilder ( a18692 ) ; b18692 . append ( " STRING " ) ; b18692 . replace ( b18692 . length ( ) - " STRING " . length ( ) , b18692 . length ( ) , " STRING " ) ; HashMap < String , Object > map18692 = new HashMap < String , Object > ( ) ; map18692 . put ( " STRING " , b18692 . toString ( ) ) ; String c18692 = ( String ) map18692 . get ( " STRING " ) ; String d18692 = c18692 . substring ( 0 , c18692 . length ( ) - 1 ) ; String e18692 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d18692 . getBytes ( ) ) ) ) ; String f18692 = e18692 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g18692 = " STRING " ; String bar = thing . doSomething ( g18692 ) ; return bar ; } } falsepositive
public class BenchmarkTest19081 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19084 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest19085 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19087 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest19091 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19097 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map50746 = new HashMap < String , Object > ( ) ; map50746 . put ( " STRING " , " STRING " ) ; map50746 . put ( " STRING " , param . toString ( ) ) ; map50746 . put ( " STRING " , " STRING " ) ; bar = ( String ) map50746 . get ( " STRING " ) ; bar = ( String ) map50746 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19102 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19106 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest19109 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map86313 = new HashMap < String , Object > ( ) ; map86313 . put ( " STRING " , " STRING " ) ; map86313 . put ( " STRING " , param . toString ( ) ) ; map86313 . put ( " STRING " , " STRING " ) ; bar = ( String ) map86313 . get ( " STRING " ) ; bar = ( String ) map86313 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19110 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getParameter ( p ) ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19659 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map51288 = new HashMap < String , Object > ( ) ; map51288 . put ( " STRING " , " STRING " ) ; map51288 . put ( " STRING " , param . toString ( ) ) ; map51288 . put ( " STRING " , " STRING " ) ; bar = ( String ) map51288 . get ( " STRING " ) ; bar = ( String ) map51288 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19660 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19662 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map58913 = new HashMap < String , Object > ( ) ; map58913 . put ( " STRING " , " STRING " ) ; map58913 . put ( " STRING " , param . toString ( ) ) ; map58913 . put ( " STRING " , " STRING " ) ; bar = ( String ) map58913 . get ( " STRING " ) ; bar = ( String ) map58913 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19663 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19667 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest19671 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19683 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19691 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map21951 = new HashMap < String , Object > ( ) ; map21951 . put ( " STRING " , " STRING " ) ; map21951 . put ( " STRING " , param . toString ( ) ) ; map21951 . put ( " STRING " , " STRING " ) ; bar = ( String ) map21951 . get ( " STRING " ) ; bar = ( String ) map21951 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19692 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a96793 = param ; StringBuilder b96793 = new StringBuilder ( a96793 ) ; b96793 . append ( " STRING " ) ; b96793 . replace ( b96793 . length ( ) - " STRING " . length ( ) , b96793 . length ( ) , " STRING " ) ; HashMap < String , Object > map96793 = new HashMap < String , Object > ( ) ; map96793 . put ( " STRING " , b96793 . toString ( ) ) ; String c96793 = ( String ) map96793 . get ( " STRING " ) ; String d96793 = c96793 . substring ( 0 , c96793 . length ( ) - 1 ) ; String e96793 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d96793 . getBytes ( ) ) ) ) ; String f96793 = e96793 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g96793 = " STRING " ; String bar = thing . doSomething ( g96793 ) ; return bar ; } } falsepositive
public class BenchmarkTest19693 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19702 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19703 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19711 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19712 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19713 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19719 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19720 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19724 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19726 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest19728 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a98929 = param ; StringBuilder b98929 = new StringBuilder ( a98929 ) ; b98929 . append ( " STRING " ) ; b98929 . replace ( b98929 . length ( ) - " STRING " . length ( ) , b98929 . length ( ) , " STRING " ) ; HashMap < String , Object > map98929 = new HashMap < String , Object > ( ) ; map98929 . put ( " STRING " , b98929 . toString ( ) ) ; String c98929 = ( String ) map98929 . get ( " STRING " ) ; String d98929 = c98929 . substring ( 0 , c98929 . length ( ) - 1 ) ; String e98929 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d98929 . getBytes ( ) ) ) ) ; String f98929 = e98929 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g98929 = " STRING " ; String bar = thing . doSomething ( g98929 ) ; return bar ; } } falsepositive
public class BenchmarkTest19732 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map17885 = new HashMap < String , Object > ( ) ; map17885 . put ( " STRING " , " STRING " ) ; map17885 . put ( " STRING " , param . toString ( ) ) ; map17885 . put ( " STRING " , " STRING " ) ; bar = ( String ) map17885 . get ( " STRING " ) ; bar = ( String ) map17885 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19737 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest19739 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest19742 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a31523 = param ; StringBuilder b31523 = new StringBuilder ( a31523 ) ; b31523 . append ( " STRING " ) ; b31523 . replace ( b31523 . length ( ) - " STRING " . length ( ) , b31523 . length ( ) , " STRING " ) ; HashMap < String , Object > map31523 = new HashMap < String , Object > ( ) ; map31523 . put ( " STRING " , b31523 . toString ( ) ) ; String c31523 = ( String ) map31523 . get ( " STRING " ) ; String d31523 = c31523 . substring ( 0 , c31523 . length ( ) - 1 ) ; String e31523 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d31523 . getBytes ( ) ) ) ) ; String f31523 = e31523 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g31523 = " STRING " ; String bar = thing . doSomething ( g31523 ) ; return bar ; } } falsepositive
public class BenchmarkTest19743 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest19756 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest19757 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map23756 = new HashMap < String , Object > ( ) ; map23756 . put ( " STRING " , " STRING " ) ; map23756 . put ( " STRING " , param . toString ( ) ) ; map23756 . put ( " STRING " , " STRING " ) ; bar = ( String ) map23756 . get ( " STRING " ) ; bar = ( String ) map23756 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest19758 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param ; if ( length ! = 0 ) param = request . getParameterValues ( " STRING " ) [ 0 ] ; else param = null ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a88516 = param ; StringBuilder b88516 = new StringBuilder ( a88516 ) ; b88516 . append ( " STRING " ) ; b88516 . replace ( b88516 . length ( ) - " STRING " . length ( ) , b88516 . length ( ) , " STRING " ) ; HashMap < String , Object > map88516 = new HashMap < String , Object > ( ) ; map88516 . put ( " STRING " , b88516 . toString ( ) ) ; String c88516 = ( String ) map88516 . get ( " STRING " ) ; String d88516 = c88516 . substring ( 0 , c88516 . length ( ) - 1 ) ; String e88516 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d88516 . getBytes ( ) ) ) ) ; String f88516 = e88516 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g88516 = " STRING " ; String bar = thing . doSomething ( g88516 ) ; return bar ; } } falsepositive
public class BenchmarkTest19759 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc ; if ( length ! = 0 ) taintSrc = request . getParameterValues ( " STRING " ) [ 0 ] ; else taintSrc = null ; String T5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20295 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20298 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20299 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map54687 = new HashMap < String , Object > ( ) ; map54687 . put ( " STRING " , " STRING " ) ; map54687 . put ( " STRING " , param . toString ( ) ) ; map54687 . put ( " STRING " , " STRING " ) ; bar = ( String ) map54687 . get ( " STRING " ) ; bar = ( String ) map54687 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20302 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20303 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20307 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20313 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20314 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map96762 = new HashMap < String , Object > ( ) ; map96762 . put ( " STRING " , " STRING " ) ; map96762 . put ( " STRING " , param . toString ( ) ) ; map96762 . put ( " STRING " , " STRING " ) ; bar = ( String ) map96762 . get ( " STRING " ) ; bar = ( String ) map96762 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20315 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String param = request . getQueryString ( ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String a60077 = param ; StringBuilder b60077 = new StringBuilder ( a60077 ) ; b60077 . append ( " STRING " ) ; b60077 . replace ( b60077 . length ( ) - " STRING " . length ( ) , b60077 . length ( ) , " STRING " ) ; HashMap < String , Object > map60077 = new HashMap < String , Object > ( ) ; map60077 . put ( " STRING " , b60077 . toString ( ) ) ; String c60077 = ( String ) map60077 . get ( " STRING " ) ; String d60077 = c60077 . substring ( 0 , c60077 . length ( ) - 1 ) ; String e60077 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d60077 . getBytes ( ) ) ) ) ; String f60077 = e60077 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g60077 = " STRING " ; String bar = thing . doSomething ( g60077 ) ; return bar ; } } falsepositive
public class BenchmarkTest20319 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20320 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20326 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20333 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map4017 = new HashMap < String , Object > ( ) ; map4017 . put ( " STRING " , " STRING " ) ; map4017 . put ( " STRING " , param . toString ( ) ) ; map4017 . put ( " STRING " , " STRING " ) ; bar = ( String ) map4017 . get ( " STRING " ) ; bar = ( String ) map4017 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20334 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20338 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map22546 = new HashMap < String , Object > ( ) ; map22546 . put ( " STRING " , " STRING " ) ; map22546 . put ( " STRING " , param . toString ( ) ) ; map22546 . put ( " STRING " , " STRING " ) ; bar = ( String ) map22546 . get ( " STRING " ) ; bar = ( String ) map22546 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20345 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20347 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20353 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20355 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map5409 = new HashMap < String , Object > ( ) ; map5409 . put ( " STRING " , " STRING " ) ; map5409 . put ( " STRING " , param . toString ( ) ) ; map5409 . put ( " STRING " , " STRING " ) ; bar = ( String ) map5409 . get ( " STRING " ) ; bar = ( String ) map5409 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20356 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20364 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20372 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20373 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20374 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20378 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20379 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20380 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map12822 = new HashMap < String , Object > ( ) ; map12822 . put ( " STRING " , " STRING " ) ; map12822 . put ( " STRING " , param . toString ( ) ) ; map12822 . put ( " STRING " , " STRING " ) ; bar = ( String ) map12822 . get ( " STRING " ) ; bar = ( String ) map12822 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20381 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20386 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map40204 = new HashMap < String , Object > ( ) ; map40204 . put ( " STRING " , " STRING " ) ; map40204 . put ( " STRING " , param . toString ( ) ) ; map40204 . put ( " STRING " , " STRING " ) ; bar = ( String ) map40204 . get ( " STRING " ) ; bar = ( String ) map40204 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20390 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map46722 = new HashMap < String , Object > ( ) ; map46722 . put ( " STRING " , " STRING " ) ; map46722 . put ( " STRING " , param . toString ( ) ) ; map46722 . put ( " STRING " , " STRING " ) ; bar = ( String ) map46722 . get ( " STRING " ) ; bar = ( String ) map46722 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20395 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20396 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20398 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = request . getQueryString ( ) ; String T4 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + T4 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20909 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20911 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String a55285 = param ; StringBuilder b55285 = new StringBuilder ( a55285 ) ; b55285 . append ( " STRING " ) ; b55285 . replace ( b55285 . length ( ) - " STRING " . length ( ) , b55285 . length ( ) , " STRING " ) ; HashMap < String , Object > map55285 = new HashMap < String , Object > ( ) ; map55285 . put ( " STRING " , b55285 . toString ( ) ) ; String c55285 = ( String ) map55285 . get ( " STRING " ) ; String d55285 = c55285 . substring ( 0 , c55285 . length ( ) - 1 ) ; String e55285 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d55285 . getBytes ( ) ) ) ) ; String f55285 = e55285 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g55285 = " STRING " ; String bar = thing . doSomething ( g55285 ) ; return bar ; } } falsepositive
public class BenchmarkTest20914 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; CallableStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String a90139 = param ; StringBuilder b90139 = new StringBuilder ( a90139 ) ; b90139 . append ( " STRING " ) ; b90139 . replace ( b90139 . length ( ) - " STRING " . length ( ) , b90139 . length ( ) , " STRING " ) ; HashMap < String , Object > map90139 = new HashMap < String , Object > ( ) ; map90139 . put ( " STRING " , b90139 . toString ( ) ) ; String c90139 = ( String ) map90139 . get ( " STRING " ) ; String d90139 = c90139 . substring ( 0 , c90139 . length ( ) - 1 ) ; String e90139 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d90139 . getBytes ( ) ) ) ) ; String f90139 = e90139 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f90139 ) ; return bar ; } } falsepositive
public class BenchmarkTest20921 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map46870 = new HashMap < String , Object > ( ) ; map46870 . put ( " STRING " , " STRING " ) ; map46870 . put ( " STRING " , param . toString ( ) ) ; map46870 . put ( " STRING " , " STRING " ) ; bar = ( String ) map46870 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20922 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20923 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } falsepositive
public class BenchmarkTest20924 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY , CLOSE_CURSORS_AT_COMMIT ) ; } } private static String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20925 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20926 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } falsepositive
public class BenchmarkTest20927 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map41538 = new HashMap < String , Object > ( ) ; map41538 . put ( " STRING " , " STRING " ) ; map41538 . put ( " STRING " , param . toString ( ) ) ; map41538 . put ( " STRING " , " STRING " ) ; bar = ( String ) map41538 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20928 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20929 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20930 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } falsepositive
public class BenchmarkTest20931 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , TYPE_FORWARD_ONLY , CONCUR_READ_ONLY ) ; } } private static String doSomething ( String param ) { StringBuilder sbxyz36046 = new StringBuilder ( param ) ; String bar = sbxyz36046 . append ( " STRING " ) . toString ( ) ; return bar ; } } falsepositive
public class BenchmarkTest20932 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } falsepositive
public class BenchmarkTest20933 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map99318 = new HashMap < String , Object > ( ) ; map99318 . put ( " STRING " , " STRING " ) ; map99318 . put ( " STRING " , param . toString ( ) ) ; map99318 . put ( " STRING " , " STRING " ) ; bar = ( String ) map99318 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20934 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map55520 = new HashMap < String , Object > ( ) ; map55520 . put ( " STRING " , " STRING " ) ; map55520 . put ( " STRING " , param . toString ( ) ) ; map55520 . put ( " STRING " , " STRING " ) ; bar = ( String ) map55520 . get ( " STRING " ) ; bar = ( String ) map55520 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20935 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { StringBuilder sbxyz3177 = new StringBuilder ( param ) ; String bar = sbxyz3177 . append ( " STRING " ) . toString ( ) ; return bar ; } } falsepositive
public class BenchmarkTest20936 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20937 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } falsepositive
public class BenchmarkTest20938 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } falsepositive
public class BenchmarkTest20939 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20940 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map1386 = new HashMap < String , Object > ( ) ; map1386 . put ( " STRING " , " STRING " ) ; map1386 . put ( " STRING " , param . toString ( ) ) ; map1386 . put ( " STRING " , " STRING " ) ; bar = ( String ) map1386 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20941 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a70434 = param ; StringBuilder b70434 = new StringBuilder ( a70434 ) ; b70434 . append ( " STRING " ) ; b70434 . replace ( b70434 . length ( ) - " STRING " . length ( ) , b70434 . length ( ) , " STRING " ) ; HashMap < String , Object > map70434 = new HashMap < String , Object > ( ) ; map70434 . put ( " STRING " , b70434 . toString ( ) ) ; String c70434 = ( String ) map70434 . get ( " STRING " ) ; String d70434 = c70434 . substring ( 0 , c70434 . length ( ) - 1 ) ; String e70434 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d70434 . getBytes ( ) ) ) ) ; String f70434 = e70434 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f70434 ) ; return bar ; } } falsepositive
public class BenchmarkTest20942 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map25821 = new HashMap < String , Object > ( ) ; map25821 . put ( " STRING " , " STRING " ) ; map25821 . put ( " STRING " , param . toString ( ) ) ; map25821 . put ( " STRING " , " STRING " ) ; bar = ( String ) map25821 . get ( " STRING " ) ; bar = ( String ) map25821 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20943 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } falsepositive
public class BenchmarkTest20944 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz35341 = new StringBuilder ( param ) ; bar = sbxyz35341 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } falsepositive
public class BenchmarkTest20945 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20946 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20947 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } falsepositive
public class BenchmarkTest20948 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } falsepositive
public class BenchmarkTest20949 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map48949 = new HashMap < String , Object > ( ) ; map48949 . put ( " STRING " , " STRING " ) ; map48949 . put ( " STRING " , param . toString ( ) ) ; map48949 . put ( " STRING " , " STRING " ) ; bar = ( String ) map48949 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20950 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a98804 = param ; StringBuilder b98804 = new StringBuilder ( a98804 ) ; b98804 . append ( " STRING " ) ; b98804 . replace ( b98804 . length ( ) - " STRING " . length ( ) , b98804 . length ( ) , " STRING " ) ; HashMap < String , Object > map98804 = new HashMap < String , Object > ( ) ; map98804 . put ( " STRING " , b98804 . toString ( ) ) ; String c98804 = ( String ) map98804 . get ( " STRING " ) ; String d98804 = c98804 . substring ( 0 , c98804 . length ( ) - 1 ) ; String e98804 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d98804 . getBytes ( ) ) ) ) ; String f98804 = e98804 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f98804 ) ; return bar ; } } falsepositive
public class BenchmarkTest20951 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map97042 = new HashMap < String , Object > ( ) ; map97042 . put ( " STRING " , " STRING " ) ; map97042 . put ( " STRING " , param . toString ( ) ) ; map97042 . put ( " STRING " , " STRING " ) ; bar = ( String ) map97042 . get ( " STRING " ) ; bar = ( String ) map97042 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20952 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) + i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20953 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } falsepositive
public class BenchmarkTest20954 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } falsepositive
public class BenchmarkTest20955 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20956 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map13606 = new HashMap < String , Object > ( ) ; map13606 . put ( " STRING " , " STRING " ) ; map13606 . put ( " STRING " , param . toString ( ) ) ; map13606 . put ( " STRING " , " STRING " ) ; bar = ( String ) map13606 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20957 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20958 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map66890 = new HashMap < String , Object > ( ) ; map66890 . put ( " STRING " , " STRING " ) ; map66890 . put ( " STRING " , param . toString ( ) ) ; map66890 . put ( " STRING " , " STRING " ) ; bar = ( String ) map66890 . get ( " STRING " ) ; bar = ( String ) map66890 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20959 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20960 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20961 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz89216 = new StringBuilder ( param ) ; bar = sbxyz89216 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } falsepositive
public class BenchmarkTest20962 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20963 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20964 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Connection connection = DatabaseHelper . getSqlConnection ( ) ; PreparedStatement statement = connection . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; if ( ( N3 / N2 ) + i > N3 ) bar = param ; else bar = " STRING " ; return bar ; } } falsepositive
public class BenchmarkTest20965 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map39476 = new HashMap < String , Object > ( ) ; map39476 . put ( " STRING " , " STRING " ) ; map39476 . put ( " STRING " , param . toString ( ) ) ; map39476 . put ( " STRING " , " STRING " ) ; bar = ( String ) map39476 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20966 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String a14932 = param ; StringBuilder b14932 = new StringBuilder ( a14932 ) ; b14932 . append ( " STRING " ) ; b14932 . replace ( b14932 . length ( ) - " STRING " . length ( ) , b14932 . length ( ) , " STRING " ) ; HashMap < String , Object > map14932 = new HashMap < String , Object > ( ) ; map14932 . put ( " STRING " , b14932 . toString ( ) ) ; String c14932 = ( String ) map14932 . get ( " STRING " ) ; String d14932 = c14932 . substring ( 0 , c14932 . length ( ) - 1 ) ; String e14932 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d14932 . getBytes ( ) ) ) ) ; String f14932 = e14932 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g14932 = " STRING " ; String bar = thing . doSomething ( g14932 ) ; return bar ; } } falsepositive
public class BenchmarkTest20967 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20968 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } falsepositive
public class BenchmarkTest20969 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { StringBuilder sbxyz94876 = new StringBuilder ( param ) ; String bar = sbxyz94876 . append ( " STRING " ) . toString ( ) ; return bar ; } } falsepositive
public class BenchmarkTest20970 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map51665 = new HashMap < String , Object > ( ) ; map51665 . put ( " STRING " , " STRING " ) ; map51665 . put ( " STRING " , param . toString ( ) ) ; map51665 . put ( " STRING " , " STRING " ) ; bar = ( String ) map51665 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20971 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String a59017 = param ; StringBuilder b59017 = new StringBuilder ( a59017 ) ; b59017 . append ( " STRING " ) ; b59017 . replace ( b59017 . length ( ) - " STRING " . length ( ) , b59017 . length ( ) , " STRING " ) ; HashMap < String , Object > map59017 = new HashMap < String , Object > ( ) ; map59017 . put ( " STRING " , b59017 . toString ( ) ) ; String c59017 = ( String ) map59017 . get ( " STRING " ) ; String d59017 = c59017 . substring ( 0 , c59017 . length ( ) - 1 ) ; String e59017 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d59017 . getBytes ( ) ) ) ) ; String f59017 = e59017 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f59017 ) ; return bar ; } } falsepositive
public class BenchmarkTest20972 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20973 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20974 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20975 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } falsepositive
public class BenchmarkTest20976 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String a31861 = param ; StringBuilder b31861 = new StringBuilder ( a31861 ) ; b31861 . append ( " STRING " ) ; b31861 . replace ( b31861 . length ( ) - " STRING " . length ( ) , b31861 . length ( ) , " STRING " ) ; HashMap < String , Object > map31861 = new HashMap < String , Object > ( ) ; map31861 . put ( " STRING " , b31861 . toString ( ) ) ; String c31861 = ( String ) map31861 . get ( " STRING " ) ; String d31861 = c31861 . substring ( 0 , c31861 . length ( ) - 1 ) ; String e31861 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d31861 . getBytes ( ) ) ) ) ; String f31861 = e31861 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f31861 ) ; return bar ; } } falsepositive
public class BenchmarkTest20977 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest20978 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20979 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { StringBuilder sbxyz4880 = new StringBuilder ( param ) ; String bar = sbxyz4880 . append ( " STRING " ) . toString ( ) ; return bar ; } } falsepositive
public class BenchmarkTest20980 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { StringBuilder sbxyz35684 = new StringBuilder ( param ) ; bar = sbxyz35684 . replace ( param . length ( ) - " STRING " . length ( ) , param . length ( ) , " STRING " ) . toString ( ) ; } return bar ; } } falsepositive
public class BenchmarkTest20981 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20982 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } falsepositive
public class BenchmarkTest20983 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20984 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20985 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20986 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map13999 = new HashMap < String , Object > ( ) ; map13999 . put ( " STRING " , " STRING " ) ; map13999 . put ( " STRING " , param . toString ( ) ) ; map13999 . put ( " STRING " , " STRING " ) ; bar = ( String ) map13999 . get ( " STRING " ) ; bar = ( String ) map13999 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest20987 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a83582 = param ; StringBuilder b83582 = new StringBuilder ( a83582 ) ; b83582 . append ( " STRING " ) ; b83582 . replace ( b83582 . length ( ) - " STRING " . length ( ) , b83582 . length ( ) , " STRING " ) ; HashMap < String , Object > map83582 = new HashMap < String , Object > ( ) ; map83582 . put ( " STRING " , b83582 . toString ( ) ) ; String c83582 = ( String ) map83582 . get ( " STRING " ) ; String d83582 = c83582 . substring ( 0 , c83582 . length ( ) - 1 ) ; String e83582 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d83582 . getBytes ( ) ) ) ) ; String f83582 = e83582 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g83582 = " STRING " ; String bar = thing . doSomething ( g83582 ) ; return bar ; } } falsepositive
public class BenchmarkTest20988 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20989 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20990 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } falsepositive
public class BenchmarkTest20991 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20992 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 0 ) ; return bar ; } } falsepositive
public class BenchmarkTest20993 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20994 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20995 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest20996 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest20997 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = param ; return bar ; } } falsepositive
public class BenchmarkTest20998 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest20999 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest21000 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest21001 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = param . split ( " STRING " ) [ 0 ] ; return bar ; } } falsepositive
public class BenchmarkTest21002 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { StringBuilder sbxyz55821 = new StringBuilder ( param ) ; String bar = sbxyz55821 . append ( " STRING " ) . toString ( ) ; return bar ; } } falsepositive
public class BenchmarkTest21003 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; ResultSet rs = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest21004 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } falsepositive
public class BenchmarkTest21005 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest21006 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map26073 = new HashMap < String , Object > ( ) ; map26073 . put ( " STRING " , " STRING " ) ; map26073 . put ( " STRING " , param . toString ( ) ) ; map26073 . put ( " STRING " , " STRING " ) ; bar = ( String ) map26073 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest21007 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N3 ; bar = ( 7 * N2 ) - i > N3 ? " STRING " : param ; return bar ; } } falsepositive
public class BenchmarkTest21008 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest21009 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; int i = N2 ; if ( ( 7 * N2 ) - i > N3 ) bar = " STRING " ; else bar = param ; return bar ; } } falsepositive
public class BenchmarkTest21010 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String a18747 = param ; StringBuilder b18747 = new StringBuilder ( a18747 ) ; b18747 . append ( " STRING " ) ; b18747 . replace ( b18747 . length ( ) - " STRING " . length ( ) , b18747 . length ( ) , " STRING " ) ; HashMap < String , Object > map18747 = new HashMap < String , Object > ( ) ; map18747 . put ( " STRING " , b18747 . toString ( ) ) ; String c18747 = ( String ) map18747 . get ( " STRING " ) ; String d18747 = c18747 . substring ( 0 , c18747 . length ( ) - 1 ) ; String e18747 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d18747 . getBytes ( ) ) ) ) ; String f18747 = e18747 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String g18747 = " STRING " ; String bar = thing . doSomething ( g18747 ) ; return bar ; } } falsepositive
public class BenchmarkTest21011 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest21012 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = HtmlUtils . htmlEscape ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest21013 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { StringBuilder sbxyz61139 = new StringBuilder ( param ) ; String bar = sbxyz61139 . append ( " STRING " ) . toString ( ) ; return bar ; } } falsepositive
public class BenchmarkTest21014 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , RETURN_GENERATED_KEYS ) ; } } private static String doSomething ( String param ) { String bar = StringEscapeUtils . escapeHtml ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest21015 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( param . getBytes ( ) ) ) ) ; return bar ; } } falsepositive
public class BenchmarkTest21016 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map84997 = new HashMap < String , Object > ( ) ; map84997 . put ( " STRING " , " STRING " ) ; map84997 . put ( " STRING " , param . toString ( ) ) ; map84997 . put ( " STRING " , " STRING " ) ; bar = ( String ) map84997 . get ( " STRING " ) ; return bar ; } } falsepositive
public class BenchmarkTest21017 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { StringBuilder sbxyz63561 = new StringBuilder ( param ) ; String bar = sbxyz63561 . append ( " STRING " ) . toString ( ) ; return bar ; } } falsepositive
public class BenchmarkTest21018 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar = param ; if ( param . length ( ) > 1 ) { bar = param . substring ( 0 , param . length ( ) - 1 ) ; } return bar ; } } falsepositive
public class BenchmarkTest21019 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new int [ ] { 1 , 2 } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 1 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest21020 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = param ; return bar ; } } falsepositive
public class BenchmarkTest21021 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar = ESAPI . encoder ( ) . encodeForHTML ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest21022 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String a35035 = param ; StringBuilder b35035 = new StringBuilder ( a35035 ) ; b35035 . append ( " STRING " ) ; b35035 . replace ( b35035 . length ( ) - " STRING " . length ( ) , b35035 . length ( ) , " STRING " ) ; HashMap < String , Object > map35035 = new HashMap < String , Object > ( ) ; map35035 . put ( " STRING " , b35035 . toString ( ) ) ; String c35035 = ( String ) map35035 . get ( " STRING " ) ; String d35035 = c35035 . substring ( 0 , c35035 . length ( ) - 1 ) ; String e35035 = new String ( new BASE64Decoder ( ) . decodeBuffer ( new BASE64Encoder ( ) . encode ( d35035 . getBytes ( ) ) ) ) ; String f35035 = e35035 . split ( " STRING " ) [ 0 ] ; ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( f35035 ) ; return bar ; } } falsepositive
public class BenchmarkTest21023 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint , new String [ ] { " STRING " , " STRING " } ) ; } } private static String doSomething ( String param ) { String bar ; String guess = " STRING " ; char switchTarget = guess . charAt ( 2 ) ; switch ( switchTarget ) { case ' A ' : bar = param ; break ; case ' B ' : bar = " STRING " ; break ; case ' C ' : case ' D ' : bar = param ; break ; default : bar = " STRING " ; break ; } return bar ; } } falsepositive
public class BenchmarkTest21024 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = param ; return bar ; } } falsepositive
public class BenchmarkTest21025 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { SeparateClassRequest scr = new SeparateClassRequest ( request ) ; String param = scr . getTheValue ( " STRING " ) ; String taintSrc = doSomething ( param ) ; String paramTaint = " STRING " + taintSrc + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { ThingInterface thing = ThingFactory . createThing ( ) ; String bar = thing . doSomething ( param ) ; return bar ; } } falsepositive
public class BenchmarkTest21026 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { List < String > valuesList = new ArrayList < String > ( ) ; valuesList . add ( " STRING " ) ; valuesList . add ( param ) ; valuesList . add ( " STRING " ) ; valuesList . remove ( 0 ) ; String bar = valuesList . get ( 1 ) ; return bar ; } } falsepositive
public class BenchmarkTest21027 extends HttpServlet { public void warningMethod ( HttpServletRequest request , HttpServletResponse response ) { String taintSrc = " bar " ; String U5 = doSomething ( taintSrc ) ; String paramTaint = " STRING " + U5 + " STRING " ; { Statement statement = DatabaseHelper . getSqlStatement ( ) ; int count = statement . injectableMethod ( paramTaint ) ; } } private static String doSomething ( String param ) { String bar = " STRING " ; HashMap < String , Object > map51443 = new HashMap < String , Object > ( ) ; map51443 . put ( " STRING " , " STRING " ) ; map51443 . put ( " STRING " , param . toString ( ) ) ; map51443 . put ( " STRING " , " STRING " ) ; bar = ( String ) map51443 . get ( " STRING " ) ; bar = ( String ) map51443 . get ( " STRING " ) ; return bar ; } } falsepositive
